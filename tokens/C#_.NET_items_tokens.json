[
    {
        "page_index": 0,
        "chunk_index": 0,
        "text": "<h4>\n<i class=\"icon-outcomes\"></i>&nbsp;<strong>M8</strong>&nbsp;<strong>Objectives</strong>\n</h4>\n<p>After completing this week's work, you will be able to:</p>\n<ul>\n<li><span>Create, read, write and update files. </span></li>\n<li><span>Use classes File and Directory to obtain information about files and directories on your computer. </span></li>\n<li><span>Use classes FileStream, StreamReader and StreamWriter to read text from and write text to files. </span></li>\n<li>\n<span>Use classes FileStream and BinaryFormatter to read objects from and write objects to files -&nbsp;</span><span>serialize and deserialize an object&nbsp;</span>\n</li>\n<li><span>Use&nbsp;OpenFileDialog and SaveDialog controls to display standard Windows dialog boxes for opening and saving files</span></li>\n<li><span>Use \"Using\" statement to release resources</span></li>\n</ul>\n<h4>&nbsp;</h4>\n<h4>\n<i class=\"icon-info\"></i>&nbsp;<strong>M8 Activities&nbsp;</strong>\n</h4>\n<ol>\n<li>Watch Video Lectures</li>\n<li>Read Lecture Slides &amp; Programming Guide,</li>\n<li>Practice with Sample Code</li>\n<li>Complete M8&nbsp; Quiz and Assignment</li>\n</ol>"
    },
    {
        "page_index": 1,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides<span>: </span></strong><a class=\"instructure_file_link instructure_scribd_file\" title=\"FileStream.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026263/download?verifier=4kVkNp1UFLO3XutBftW5T9s6cEA4KoDoGjvwsZsi&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026263\" data-api-returntype=\"File\">FileStream.pdf</a></p>\n<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: </strong><a class=\"instructure_file_link\" title=\"Grader.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026273/download?verifier=XHfQWRerVJd8vkNFEIDKY230niYl421l4zfk2fSu&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026273\" data-api-returntype=\"File\">Grader.zip</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures </strong>:&nbsp;&nbsp;</p>\n<p>- FileStream</p>\n<p><iframe src=\"https://www.youtube.com/embed/zU7NZSeBpHQ\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>- Grader Project Walkthrough</p>\n<p><iframe src=\"https://www.youtube.com/embed/EjfWytszdRo\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 2,
        "chunk_index": 0,
        "text": "<h1><span style=\"font-size: 18pt;\"><span style=\"background-color: #f1c40f;\"><strong><span style=\"color: #000000;\">Note:</span> </strong></span>WPF .NET 7.0, follow <a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/windows/how-to-open-common-system-dialog-box?view=netdesktop-7.0\" target=\"_blank\">How to open a common dialog box (WPF .NET)</a></span></h1>\n<h1 id=\"how-to-open-files-with-the-openfiledialog\">How to: Open files with the OpenFileDialog</h1>"
    },
    {
        "page_index": 2,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog\" data-linktype=\"absolute-path\">System.Windows.Forms.OpenFileDialog</a>&nbsp;component opens the Windows dialog box for browsing and selecting files. To open and read the selected files, you can use the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog.openfile\" data-linktype=\"absolute-path\">OpenFileDialog.OpenFile</a>&nbsp;method, or create an instance"
    },
    {
        "page_index": 2,
        "chunk_index": 2,
        "text": "or create an instance of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.streamreader\" data-linktype=\"absolute-path\">System.IO.StreamReader</a>&nbsp;class. The following examples show both approaches.</p>"
    },
    {
        "page_index": 2,
        "chunk_index": 3,
        "text": "<p>In .NET Framework, to get or set the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.filedialog.filename\" data-linktype=\"absolute-path\">FileName</a>&nbsp;property requires a privilege level granted by the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.fileiopermission\" data-linktype=\"absolute-path\">System.Security.Permissions.FileIOPermission</a>&nbsp;class. The examples run a&nbsp;<a"
    },
    {
        "page_index": 2,
        "chunk_index": 4,
        "text": "The examples run a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.fileiopermission\" data-linktype=\"absolute-path\">FileIOPermission</a>&nbsp;permission check, and can throw an exception due to insufficient privileges if run in a partial-trust context. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/misc/code-access-security-basics\" data-linktype=\"relative-path\">Code access security basics</a>.</p>"
    },
    {
        "page_index": 2,
        "chunk_index": 5,
        "text": "<p>You can build and run these examples as .NET Framework apps from the C# or Visual Basic command line. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe\" data-linktype=\"relative-path\">Command-line building with csc.exe</a>&nbsp;or&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/visual-basic/reference/command-line-compiler/building-from-the-command-line\""
    },
    {
        "page_index": 2,
        "chunk_index": 6,
        "text": "data-linktype=\"relative-path\">Build from the command line</a>.</p>"
    },
    {
        "page_index": 2,
        "chunk_index": 7,
        "text": "<p>Starting with .NET Core 3.0, you can also build and run the examples as Windows .NET Core apps from a folder that has a .NET Core Windows Forms&nbsp;<em>&lt;folder name&gt;.csproj</em>&nbsp;project file.</p>\n<h2 id=\"example-read-a-file-as-a-stream-with-streamreader\">Example: Read a file as a stream with StreamReade</h2>"
    },
    {
        "page_index": 2,
        "chunk_index": 8,
        "text": "<p>The following example uses the Windows Forms&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;control's&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.click\" data-linktype=\"absolute-path\">Click</a>&nbsp;event handler to open the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog\""
    },
    {
        "page_index": 2,
        "chunk_index": 9,
        "text": "data-linktype=\"absolute-path\">OpenFileDialog</a>&nbsp;with the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.commondialog.showdialog\" data-linktype=\"absolute-path\">ShowDialog</a>&nbsp;method. After the user chooses a file and selects&nbsp;<strong>OK</strong>, an instance of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.streamreader\" data-linktype=\"absolute-path\">StreamReader</a>&nbsp;class reads the file and displays its contents in the"
    },
    {
        "page_index": 2,
        "chunk_index": 10,
        "text": "reads the file and displays its contents in the form's text box. For more information about reading from file streams, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.filestream.beginread\" data-linktype=\"absolute-path\">FileStream.BeginRead</a>&nbsp;and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.filestream.read\" data-linktype=\"absolute-path\">FileStream.Read</a>.</p>"
    },
    {
        "page_index": 2,
        "chunk_index": 11,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Security;\nusing System.Windows.Forms;"
    },
    {
        "page_index": 2,
        "chunk_index": 12,
        "text": "public class OpenFileDialogForm : Form\n{\n    [STAThread]\n    public static void Main()\n    {\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.EnableVisualStyles();\n        Application.Run(new OpenFileDialogForm());\n    }\n\n    private Button selectButton;\n    private OpenFileDialog openFileDialog1;\n    private TextBox textBox1;"
    },
    {
        "page_index": 2,
        "chunk_index": 13,
        "text": "public OpenFileDialogForm()\n    {\n        openFileDialog1 = new OpenFileDialog();\n        selectButton = new Button\n        {\n            Size = new Size(100, 20),\n            Location = new Point(15, 15),\n            Text = &quot;Select file&quot;\n        };\n        selectButton.Click += new EventHandler(SelectButton_Click);\n        textBox1 = new TextBox\n        {\n            Size = new Size(300, 300),\n            Location = new Point(15, 40),\n            Multiline = true,"
    },
    {
        "page_index": 2,
        "chunk_index": 14,
        "text": "Multiline = true,\n            ScrollBars = ScrollBars.Vertical\n        };\n        ClientSize = new Size(330, 360);\n        Controls.Add(selectButton);\n        Controls.Add(textBox1);\n    }\n    private void SetText(string text)\n    {\n        textBox1.Text = text;\n    }\n    private void SelectButton_Click(object sender, EventArgs e)\n    {\n        if (openFileDialog1.ShowDialog() == DialogResult.OK)\n        {\n            try\n            {"
    },
    {
        "page_index": 2,
        "chunk_index": 15,
        "text": "{\n            try\n            {\n                var sr = new StreamReader(openFileDialog1.FileName);\n                SetText(sr.ReadToEnd());\n            }\n            catch (SecurityException ex)\n            {\n                MessageBox.Show($&quot;Security error.\\n\\nError message: {ex.Message}\\n\\n&quot; +\n                $&quot;Details:\\n\\n{ex.StackTrace}&quot;);\n            }\n        }\n    }\n}\n\"><span class=\"hljs-keyword\">using</span> System;"
    },
    {
        "page_index": 2,
        "chunk_index": 16,
        "text": "\"><span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Drawing;\n<span class=\"hljs-keyword\">using</span> System.IO;\n<span class=\"hljs-keyword\">using</span> System.Security;\n<span class=\"hljs-keyword\">using</span> System.Windows.Forms;"
    },
    {
        "page_index": 2,
        "chunk_index": 17,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OpenFileDialogForm</span> : <span class=\"hljs-title\">Form</span>\n{\n    [<span class=\"hljs-meta\">STAThread</span>]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {"
    },
    {
        "page_index": 2,
        "chunk_index": 18,
        "text": "{\n        Application.SetCompatibleTextRenderingDefault(<span class=\"hljs-literal\">false</span>);\n        Application.EnableVisualStyles();\n        Application.Run(<span class=\"hljs-keyword\">new</span> OpenFileDialogForm());\n    }"
    },
    {
        "page_index": 2,
        "chunk_index": 19,
        "text": "<span class=\"hljs-keyword\">private</span> Button selectButton;\n    <span class=\"hljs-keyword\">private</span> OpenFileDialog openFileDialog1;\n    <span class=\"hljs-keyword\">private</span> TextBox textBox1;"
    },
    {
        "page_index": 2,
        "chunk_index": 20,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">OpenFileDialogForm</span>()</span>\n    {\n        openFileDialog1 = <span class=\"hljs-keyword\">new</span> OpenFileDialog();\n        selectButton = <span class=\"hljs-keyword\">new</span> Button\n        {\n            Size = <span class=\"hljs-keyword\">new</span> Size(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">20</span>),"
    },
    {
        "page_index": 2,
        "chunk_index": 21,
        "text": "Location = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>),\n            Text = <span class=\"hljs-string\">\"Select file\"</span>\n        };\n        selectButton.Click += <span class=\"hljs-keyword\">new</span> EventHandler(SelectButton_Click);\n        textBox1 = <span class=\"hljs-keyword\">new</span> TextBox\n        {"
    },
    {
        "page_index": 2,
        "chunk_index": 22,
        "text": "{\n            Size = <span class=\"hljs-keyword\">new</span> Size(<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">300</span>),\n            Location = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">40</span>),\n            Multiline = <span class=\"hljs-literal\">true</span>,\n            ScrollBars = ScrollBars.Vertical\n        };"
    },
    {
        "page_index": 2,
        "chunk_index": 23,
        "text": "};\n        ClientSize = <span class=\"hljs-keyword\">new</span> Size(<span class=\"hljs-number\">330</span>, <span class=\"hljs-number\">360</span>);\n        Controls.Add(selectButton);\n        Controls.Add(textBox1);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SetText</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> text</span>)</span>\n    {"
    },
    {
        "page_index": 2,
        "chunk_index": 24,
        "text": "{\n        textBox1.Text = text;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SelectButton_Click</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, EventArgs e</span>)</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (openFileDialog1.ShowDialog() == DialogResult.OK)\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {"
    },
    {
        "page_index": 2,
        "chunk_index": 25,
        "text": "{\n                <span class=\"hljs-keyword\">var</span> sr = <span class=\"hljs-keyword\">new</span> StreamReader(openFileDialog1.FileName);\n                SetText(sr.ReadToEnd());\n            }\n            <span class=\"hljs-keyword\">catch</span> (SecurityException ex)\n            {\n                MessageBox.Show(<span class=\"hljs-string\">$\"Security error.\\n\\nError message: <span class=\"hljs-subst\">{ex.Message}</span>\\n\\n\"</span> +"
    },
    {
        "page_index": 2,
        "chunk_index": 26,
        "text": "<span class=\"hljs-string\">$\"Details:\\n\\n<span class=\"hljs-subst\">{ex.StackTrace}</span>\"</span>);\n            }\n        }\n    }\n}\n</code></pre>\n<h2 id=\"example-open-a-file-from-a-filtered-selection-with-openfile\">Example: Open a file from a filtered selection with OpenFile</h2>"
    },
    {
        "page_index": 2,
        "chunk_index": 27,
        "text": "<p>The following example uses the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;control's&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.control.click\" data-linktype=\"absolute-path\">Click</a>&nbsp;event handler to open the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog\" data-linktype=\"absolute-path\">OpenFileDialog</a>&nbsp;with a"
    },
    {
        "page_index": 2,
        "chunk_index": 28,
        "text": "a filter that shows only text files. After the user chooses a text file and selects&nbsp;<strong>OK</strong>, the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog.openfile\" data-linktype=\"absolute-path\">OpenFile</a>&nbsp;method is used to open the file in Notepad.</p>"
    },
    {
        "page_index": 2,
        "chunk_index": 29,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.IO;\nusing System.Security;\nusing System.Windows.Forms;"
    },
    {
        "page_index": 2,
        "chunk_index": 30,
        "text": "public class OpenFileDialogForm : Form\n{\n    [STAThread]\n    public static void Main()\n    {\n        Application.SetCompatibleTextRenderingDefault(false);\n        Application.EnableVisualStyles();\n        Application.Run(new OpenFileDialogForm());\n    }\n\n    private Button selectButton;\n    private OpenFileDialog openFileDialog1;"
    },
    {
        "page_index": 2,
        "chunk_index": 31,
        "text": "public OpenFileDialogForm()\n    {\n        openFileDialog1 = new OpenFileDialog()\n        {\n            FileName = &quot;Select a text file&quot;,\n            Filter = &quot;Text files (*.txt)|*.txt&quot;,\n            Title = &quot;Open text file&quot;\n        };"
    },
    {
        "page_index": 2,
        "chunk_index": 32,
        "text": "selectButton = new Button()\n        {\n            Size = new Size(100, 20),\n            Location = new Point(15, 15),\n            Text = &quot;Select file&quot;\n        };\n        selectButton.Click += new EventHandler(selectButton_Click);\n        Controls.Add(selectButton);\n    }"
    },
    {
        "page_index": 2,
        "chunk_index": 33,
        "text": "private void selectButton_Click(object sender, EventArgs e)\n    {\n        if (openFileDialog1.ShowDialog() == DialogResult.OK)\n        {\n            try\n            {\n                var filePath = openFileDialog1.FileName;\n                using (Stream str = openFileDialog1.OpenFile())\n                {\n                    Process.Start(&quot;notepad.exe&quot;, filePath);\n                }\n            }\n            catch (SecurityException ex)\n            {"
    },
    {
        "page_index": 2,
        "chunk_index": 34,
        "text": "{\n                MessageBox.Show($&quot;Security error.\\n\\nError message: {ex.Message}\\n\\n&quot; +\n                $&quot;Details:\\n\\n{ex.StackTrace}&quot;);\n            }\n        }\n    }\n}\n\"><span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.ComponentModel;\n<span class=\"hljs-keyword\">using</span> System.Diagnostics;\n<span class=\"hljs-keyword\">using</span> System.Drawing;\n<span class=\"hljs-keyword\">using</span> System.IO;"
    },
    {
        "page_index": 2,
        "chunk_index": 35,
        "text": "<span class=\"hljs-keyword\">using</span> System.Security;\n<span class=\"hljs-keyword\">using</span> System.Windows.Forms;"
    },
    {
        "page_index": 2,
        "chunk_index": 36,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OpenFileDialogForm</span> : <span class=\"hljs-title\">Form</span>\n{\n    [<span class=\"hljs-meta\">STAThread</span>]\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {"
    },
    {
        "page_index": 2,
        "chunk_index": 37,
        "text": "{\n        Application.SetCompatibleTextRenderingDefault(<span class=\"hljs-literal\">false</span>);\n        Application.EnableVisualStyles();\n        Application.Run(<span class=\"hljs-keyword\">new</span> OpenFileDialogForm());\n    }"
    },
    {
        "page_index": 2,
        "chunk_index": 38,
        "text": "<span class=\"hljs-keyword\">private</span> Button selectButton;\n    <span class=\"hljs-keyword\">private</span> OpenFileDialog openFileDialog1;"
    },
    {
        "page_index": 2,
        "chunk_index": 39,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">OpenFileDialogForm</span>()</span>\n    {\n        openFileDialog1 = <span class=\"hljs-keyword\">new</span> OpenFileDialog()\n        {\n            FileName = <span class=\"hljs-string\">\"Select a text file\"</span>,\n            Filter = <span class=\"hljs-string\">\"Text files (*.txt)|*.txt\"</span>,\n            Title = <span class=\"hljs-string\">\"Open text file\"</span>\n        };"
    },
    {
        "page_index": 2,
        "chunk_index": 40,
        "text": "selectButton = <span class=\"hljs-keyword\">new</span> Button()\n        {\n            Size = <span class=\"hljs-keyword\">new</span> Size(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">20</span>),\n            Location = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">15</span>),\n            Text = <span class=\"hljs-string\">\"Select file\"</span>\n        };"
    },
    {
        "page_index": 2,
        "chunk_index": 41,
        "text": "};\n        selectButton.Click += <span class=\"hljs-keyword\">new</span> EventHandler(selectButton_Click);\n        Controls.Add(selectButton);\n    }"
    },
    {
        "page_index": 2,
        "chunk_index": 42,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">selectButton_Click</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, EventArgs e</span>)</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (openFileDialog1.ShowDialog() == DialogResult.OK)\n        {\n            <span class=\"hljs-keyword\">try</span>\n            {"
    },
    {
        "page_index": 2,
        "chunk_index": 43,
        "text": "{\n                <span class=\"hljs-keyword\">var</span> filePath = openFileDialog1.FileName;\n                <span class=\"hljs-keyword\">using</span> (Stream str = openFileDialog1.OpenFile())\n                {\n                    Process.Start(<span class=\"hljs-string\">\"notepad.exe\"</span>, filePath);\n                }\n            }\n            <span class=\"hljs-keyword\">catch</span> (SecurityException ex)\n            {"
    },
    {
        "page_index": 2,
        "chunk_index": 44,
        "text": "{\n                MessageBox.Show(<span class=\"hljs-string\">$\"Security error.\\n\\nError message: <span class=\"hljs-subst\">{ex.Message}</span>\\n\\n\"</span> +\n                <span class=\"hljs-string\">$\"Details:\\n\\n<span class=\"hljs-subst\">{ex.StackTrace}</span>\"</span>);\n            }\n        }\n    }\n}</code></pre>"
    },
    {
        "page_index": 3,
        "chunk_index": 0,
        "text": "<h1 id=\"how-to-save-files-using-the-savefiledialog-component\">How to: Save Files Using the SaveFileDialog Component</h1>"
    },
    {
        "page_index": 3,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog\" data-linktype=\"absolute-path\">SaveFileDialog</a>&nbsp;component allows users to browse the file system and select files to be saved. The dialog box returns the path and name of the file the user has selected in the dialog box. However, you must write the code to actually write the files to disk.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 2,
        "text": "<h3 id=\"to-save-a-file-using-the-savefiledialog-component\">To save a file using the SaveFileDialog component<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"to-save-a-file-using-the-savefiledialog-component\" href=\"https://docs.microsoft.com/en-us/dotnet/framework/winforms/controls/how-to-save-files-using-the-savefiledialog-component#to-save-a-file-using-the-savefiledialog-component\"></a>\n</h3>\n<ul>\n<li>"
    },
    {
        "page_index": 3,
        "chunk_index": 3,
        "text": "</h3>\n<ul>\n<li>\n<p>Display the&nbsp;<strong>Save File</strong>&nbsp;dialog box and call a method to save the file selected by the user.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 4,
        "text": "<p>Use the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog\" data-linktype=\"absolute-path\">SaveFileDialog</a>&nbsp;component's&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog.openfile\" data-linktype=\"absolute-path\">OpenFile</a>&nbsp;method to save the file. This method gives you a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.stream\""
    },
    {
        "page_index": 3,
        "chunk_index": 5,
        "text": "data-linktype=\"absolute-path\">Stream</a>&nbsp;object you can write to.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 6,
        "text": "<p>The example below uses the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.dialogresult\" data-linktype=\"absolute-path\">DialogResult</a>&nbsp;property to get the name of the file, and the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.openfiledialog.openfile\" data-linktype=\"absolute-path\">OpenFile</a>&nbsp;method to save the file. The&nbsp;<a"
    },
    {
        "page_index": 3,
        "chunk_index": 7,
        "text": "to save the file. The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog.openfile\" data-linktype=\"absolute-path\">OpenFile</a>&nbsp;method gives you a stream to write the file to.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 8,
        "text": "<p>In the example below, there is a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;control with an image assigned to it. When you click the button, a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog\" data-linktype=\"absolute-path\">SaveFileDialog</a>&nbsp;component is instantiated with a filter that allows files of type .gif, .jpeg, and .bmp. If a file of this type is"
    },
    {
        "page_index": 3,
        "chunk_index": 9,
        "text": ".gif, .jpeg, and .bmp. If a file of this type is selected in the Save File dialog box, the button's image is saved.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 10,
        "text": "<div class=\"alert is-primary\">\n<p class=\"alert-title\">&nbsp;Important</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 11,
        "text": "<p>To get or set the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.filedialog.filename\" data-linktype=\"absolute-path\">FileName</a>&nbsp;property, your assembly requires a privilege level granted by the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.fileiopermission\" data-linktype=\"absolute-path\">System.Security.Permissions.FileIOPermission</a>&nbsp;class. If you are running in a partial-trust context, the process might"
    },
    {
        "page_index": 3,
        "chunk_index": 12,
        "text": "in a partial-trust context, the process might throw an exception due to insufficient privileges. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/misc/code-access-security-basics\" data-linktype=\"relative-path\">Code Access Security Basics</a>.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 13,
        "text": "</div>\n<p>The example assumes your form has a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;control with its&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.buttonbase.image\" data-linktype=\"absolute-path\">Image</a>&nbsp;property set to a file of type .gif, .jpeg, or .bmp.</p>\n<div class=\"alert is-info\">\n<p class=\"alert-title\">&nbsp;Note</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 14,
        "text": "<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.filedialog\" data-linktype=\"absolute-path\">FileDialog</a>&nbsp;class's&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.filedialog.filterindex\" data-linktype=\"absolute-path\">FilterIndex</a>&nbsp;property (which, due to inheritance, is part of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.savefiledialog\""
    },
    {
        "page_index": 3,
        "chunk_index": 15,
        "text": "data-linktype=\"absolute-path\">SaveFileDialog</a>&nbsp;class) uses a one-based index. This is important if you are writing code to save data in a specific format (for example, saving a file in plain text versus binary format). This property is featured in the example below.</p>"
    },
    {
        "page_index": 3,
        "chunk_index": 16,
        "text": "</div>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"private void button2_Click(object sender, System.EventArgs e)\n{\n    // Displays a SaveFileDialog so the user can save the Image\n    // assigned to Button2.\n    SaveFileDialog saveFileDialog1 = new SaveFileDialog();\n    saveFileDialog1.Filter = &quot;JPeg Image|*.jpg|Bitmap Image|*.bmp|Gif Image|*.gif&quot;;"
    },
    {
        "page_index": 3,
        "chunk_index": 17,
        "text": "saveFileDialog1.Title = &quot;Save an Image File&quot;;\n    saveFileDialog1.ShowDialog();"
    },
    {
        "page_index": 3,
        "chunk_index": 18,
        "text": "// If the file name is not an empty string open it for saving.\n    if(saveFileDialog1.FileName != &quot;&quot;)\n    {\n      // Saves the Image via a FileStream created by the OpenFile method.\n      System.IO.FileStream fs =\n          (System.IO.FileStream)saveFileDialog1.OpenFile();\n      // Saves the Image in the appropriate ImageFormat based upon the\n      // File type selected in the dialog box.\n      // NOTE that the FilterIndex property is one-based."
    },
    {
        "page_index": 3,
        "chunk_index": 19,
        "text": "switch(saveFileDialog1.FilterIndex)\n      {\n          case 1 :\n          this.button2.Image.Save(fs,\n            System.Drawing.Imaging.ImageFormat.Jpeg);\n          break;"
    },
    {
        "page_index": 3,
        "chunk_index": 20,
        "text": "case 2 :\n          this.button2.Image.Save(fs,\n            System.Drawing.Imaging.ImageFormat.Bmp);\n          break;\n\n          case 3 :\n          this.button2.Image.Save(fs,\n            System.Drawing.Imaging.ImageFormat.Gif);\n          break;\n      }"
    },
    {
        "page_index": 3,
        "chunk_index": 21,
        "text": "fs.Close();\n    }\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">button2_Click</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, System.EventArgs e</span>)</span>\n{\n    <span class=\"hljs-comment\">// Displays a SaveFileDialog so the user can save the Image</span>\n    <span class=\"hljs-comment\">// assigned to Button2.</span>"
    },
    {
        "page_index": 3,
        "chunk_index": 22,
        "text": "SaveFileDialog saveFileDialog1 = <span class=\"hljs-keyword\">new</span> SaveFileDialog();\n    saveFileDialog1.Filter = <span class=\"hljs-string\">\"JPeg Image|*.jpg|Bitmap Image|*.bmp|Gif Image|*.gif\"</span>;\n    saveFileDialog1.Title = <span class=\"hljs-string\">\"Save an Image File\"</span>;\n    saveFileDialog1.ShowDialog();"
    },
    {
        "page_index": 3,
        "chunk_index": 23,
        "text": "<span class=\"hljs-comment\">// If the file name is not an empty string open it for saving.</span>\n    <span class=\"hljs-keyword\">if</span>(saveFileDialog1.FileName != <span class=\"hljs-string\">\"\"</span>)\n    {\n      <span class=\"hljs-comment\">// Saves the Image via a FileStream created by the OpenFile method.</span>\n      System.IO.FileStream fs =\n          (System.IO.FileStream)saveFileDialog1.OpenFile();"
    },
    {
        "page_index": 3,
        "chunk_index": 24,
        "text": "<span class=\"hljs-comment\">// Saves the Image in the appropriate ImageFormat based upon the</span>\n      <span class=\"hljs-comment\">// File type selected in the dialog box.</span>\n      <span class=\"hljs-comment\">// NOTE that the FilterIndex property is one-based.</span>\n      <span class=\"hljs-keyword\">switch</span>(saveFileDialog1.FilterIndex)\n      {\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span> :"
    },
    {
        "page_index": 3,
        "chunk_index": 25,
        "text": "<span class=\"hljs-keyword\">this</span>.button2.Image.Save(fs,\n            System.Drawing.Imaging.ImageFormat.Jpeg);\n          <span class=\"hljs-keyword\">break</span>;"
    },
    {
        "page_index": 3,
        "chunk_index": 26,
        "text": "<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span> :\n          <span class=\"hljs-keyword\">this</span>.button2.Image.Save(fs,\n            System.Drawing.Imaging.ImageFormat.Bmp);\n          <span class=\"hljs-keyword\">break</span>;"
    },
    {
        "page_index": 3,
        "chunk_index": 27,
        "text": "<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span> :\n          <span class=\"hljs-keyword\">this</span>.button2.Image.Save(fs,\n            System.Drawing.Imaging.ImageFormat.Gif);\n          <span class=\"hljs-keyword\">break</span>;\n      }"
    },
    {
        "page_index": 3,
        "chunk_index": 28,
        "text": "fs.Close();\n    }\n}\n</code></pre>\n<p>(Visual C#) Place the following code in the form's constructor to register the event handler.</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"this.button2.Click += new System.EventHandler(this.button2_Click);"
    },
    {
        "page_index": 3,
        "chunk_index": 29,
        "text": "\"><span class=\"hljs-keyword\">this</span>.button2.Click += <span class=\"hljs-keyword\">new</span> System.EventHandler(<span class=\"hljs-keyword\">this</span>.button2_Click);\n</code></pre>\n<div class=\"alert is-info\">\n<p>&nbsp;</p>\n</div>\n</li>\n</ul>"
    },
    {
        "page_index": 4,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides<span>: </span></strong><a class=\"instructure_file_link instructure_scribd_file\" title=\"Serialization.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026266/download?verifier=XVd0GYE6449Wn12vSfyNcN9FMf0jeO7Ntj3ILetL&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026266\" data-api-returntype=\"File\">Serialization.pdf</a></p>\n<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code:</strong> <a class=\"instructure_file_link\" title=\"SerialData.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026264/download?verifier=URIa0UIa9Pwa9LXACSPbUnkLW4Xaj3xp0bwel0Am&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026264\" data-api-returntype=\"File\">SerialData.zip</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures<span>&nbsp;</span></strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/Kiog3khjEHs\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 5,
        "chunk_index": 0,
        "text": "<h1 id=\"basic-serialization\">Basic serialization</h1>\n<p>The easiest way to make a class serializable is to mark it with the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.serializableattribute\" data-linktype=\"absolute-path\">SerializableAttribute</a>&nbsp;as follows.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>"
    },
    {
        "page_index": 5,
        "chunk_index": 1,
        "text": "<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"[Serializable]  \npublic class MyObject {  \n  public int n1 = 0;  \n  public int n2 = 0;"
    },
    {
        "page_index": 5,
        "chunk_index": 2,
        "text": "public int n1 = 0;  \n  public int n2 = 0;  \n  public String str = null;  \n}  \n\">[<span class=\"hljs-meta\">Serializable</span>]  \n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyObject</span> {  \n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> n1 = <span class=\"hljs-number\">0</span>;"
    },
    {
        "page_index": 5,
        "chunk_index": 3,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> n2 = <span class=\"hljs-number\">0</span>;  \n  <span class=\"hljs-keyword\">public</span> String str = <span class=\"hljs-literal\">null</span>;  \n}  \n</code></pre>\n<p>The following code example shows how an instance of this class can be serialized to a file.</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 5,
        "chunk_index": 4,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"MyObject obj = new MyObject();  \nobj.n1 = 1;  \nobj.n2 = 24;  \nobj.str = &quot;Some String&quot;;  \nIFormatter formatter = new BinaryFormatter();  \nStream stream = new FileStream(&quot;MyFile.bin&quot;, FileMode.Create, FileAccess.Write, FileShare.None);  \nformatter.Serialize(stream, obj);  \nstream.Close();  \n\">MyObject obj = <span class=\"hljs-keyword\">new</span> MyObject();"
    },
    {
        "page_index": 5,
        "chunk_index": 5,
        "text": "obj.n1 = <span class=\"hljs-number\">1</span>;  \nobj.n2 = <span class=\"hljs-number\">24</span>;  \nobj.str = <span class=\"hljs-string\">\"Some String\"</span>;  \nIFormatter formatter = <span class=\"hljs-keyword\">new</span> BinaryFormatter();  \nStream stream = <span class=\"hljs-keyword\">new</span> FileStream(<span class=\"hljs-string\">\"MyFile.bin\"</span>, FileMode.Create, FileAccess.Write, FileShare.None);  \nformatter.Serialize(stream, obj);  \nstream.Close();  \n</code></pre>"
    },
    {
        "page_index": 5,
        "chunk_index": 6,
        "text": "<p>This example uses a binary formatter to do the serialization. All you need to do is create an instance of the stream and the formatter you intend to use, and then call the&nbsp;<strong>Serialize</strong>&nbsp;method on the formatter. The stream and the object to serialize are provided as parameters to this call. Although it is not explicitly demonstrated in this example, all member variables of a class will be serialized—even variables marked as private. In this aspect, binary serialization"
    },
    {
        "page_index": 5,
        "chunk_index": 7,
        "text": "as private. In this aspect, binary serialization differs from the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.xmlserializer\" data-linktype=\"absolute-path\">XmlSerializer</a>&nbsp;class, which only serializes public fields. For information on excluding member variables from binary serialization, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/serialization/selective-serialization\" data-linktype=\"relative-path\">Selective"
    },
    {
        "page_index": 5,
        "chunk_index": 8,
        "text": "data-linktype=\"relative-path\">Selective Serialization</a>.</p>"
    },
    {
        "page_index": 5,
        "chunk_index": 9,
        "text": "<p>Restoring the object back to its former state is just as easy. First, create a stream for reading and a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatter\" data-linktype=\"absolute-path\">Formatter</a>, and then instruct the formatter to deserialize the object. The code example below shows how this is done.</p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 5,
        "chunk_index": 10,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"IFormatter formatter = new BinaryFormatter();  \nStream stream = new FileStream(&quot;MyFile.bin&quot;, FileMode.Open, FileAccess.Read, FileShare.Read);  \nMyObject obj = (MyObject) formatter.Deserialize(stream);  \nstream.Close();  \n  \n// Here's the proof.  \nConsole.WriteLine(&quot;n1: {0}&quot;, obj.n1);  \nConsole.WriteLine(&quot;n2: {0}&quot;, obj.n2);  \nConsole.WriteLine(&quot;str: {0}&quot;, obj.str);"
    },
    {
        "page_index": 5,
        "chunk_index": 11,
        "text": "\">IFormatter formatter = <span class=\"hljs-keyword\">new</span> BinaryFormatter();  \nStream stream = <span class=\"hljs-keyword\">new</span> FileStream(<span class=\"hljs-string\">\"MyFile.bin\"</span>, FileMode.Open, FileAccess.Read, FileShare.Read);  \nMyObject obj = (MyObject) formatter.Deserialize(stream);  \nstream.Close();  \n  \n<span class=\"hljs-comment\">// Here's the proof.  </span>\nConsole.WriteLine(<span class=\"hljs-string\">\"n1: {0}\"</span>, obj.n1);"
    },
    {
        "page_index": 5,
        "chunk_index": 12,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"n2: {0}\"</span>, obj.n2);  \nConsole.WriteLine(<span class=\"hljs-string\">\"str: {0}\"</span>, obj.str);  \n</code></pre>"
    },
    {
        "page_index": 5,
        "chunk_index": 13,
        "text": "<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter\" data-linktype=\"absolute-path\">BinaryFormatter</a>&nbsp;used above is very efficient and produces a compact byte stream. All objects serialized with this formatter can also be deserialized with it, which makes it an ideal tool for serializing objects that will be deserialized on the .NET Framework. It is important to note that constructors are not called when an object"
    },
    {
        "page_index": 5,
        "chunk_index": 14,
        "text": "that constructors are not called when an object is deserialized. This constraint is placed on deserialization for performance reasons. However, this violates some of the usual contracts the runtime makes with the object writer, and developers should ensure that they understand the ramifications when marking an object as serializable.</p>"
    },
    {
        "page_index": 6,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code:<span>&nbsp;</span></strong></p>\n<ul>\n<li><a class=\"instructure_file_link\" title=\"IntroUWP.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026291/download?verifier=YK7GJf6rp5FbndMCEQCL6H2PYqz1ueHnIq95iyFD&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026291\" data-api-returntype=\"File\">IntroUWP.zip</a></li>"
    },
    {
        "page_index": 6,
        "chunk_index": 1,
        "text": "<li><a class=\"instructure_file_link\" title=\"FilePicker.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026274/download?verifier=nxnrUe4TCfHyrZouUFMVY4U3HOnudNhQpV9rnWO8&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026274\" data-api-returntype=\"File\">FilePicker.zip</a></li>\n</ul>\n<p><i class=\"icon-note\"></i><strong>&nbsp;Pick a single file: step-by-step:<span>&nbsp;</span></strong></p>"
    },
    {
        "page_index": 6,
        "chunk_index": 2,
        "text": "<p>Using a file picker involves creating and customizing a file picker object, and then showing the file picker so the user can pick one or more items.</p>\n<ol>\n<li>\n<p><strong>Create and customize a FileOpenPicker</strong></p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-cs\" data-author-content=\"var picker = new Windows.Storage.Pickers.FileOpenPicker();"
    },
    {
        "page_index": 6,
        "chunk_index": 3,
        "text": "picker.ViewMode = Windows.Storage.Pickers.PickerViewMode.Thumbnail;\npicker.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.PicturesLibrary;\npicker.FileTypeFilter.Add(&quot;.jpg&quot;);\npicker.FileTypeFilter.Add(&quot;.jpeg&quot;);\npicker.FileTypeFilter.Add(&quot;.png&quot;);\n\"><span><span class=\"hljs-keyword\">var</span> picker = <span class=\"hljs-keyword\">new</span> Windows.Storage.Pickers.FileOpenPicker();\npicker.ViewMode = Windows.Storage.Pickers.PickerViewMode.Thumbnail;"
    },
    {
        "page_index": 6,
        "chunk_index": 4,
        "text": "picker.SuggestedStartLocation = Windows.Storage.Pickers.PickerLocationId.PicturesLibrary;\npicker.FileTypeFilter.Add(<span class=\"hljs-string\">\".jpg\"</span>);\npicker.FileTypeFilter.Add(<span class=\"hljs-string\">\".jpeg\"</span>);\npicker.FileTypeFilter.Add(<span class=\"hljs-string\">\".png\"</span>);\n</span></code></pre>\n<p>Set properties on the file picker object relevant to your users and app.</p>"
    },
    {
        "page_index": 6,
        "chunk_index": 5,
        "text": "<p>This example creates a rich, visual display of pictures in a convenient location that the user can pick from by setting three properties:<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileopenpicker.viewmode\" data-linktype=\"absolute-path\"><strong>ViewMode</strong></a>,<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileopenpicker.suggestedstartlocation\""
    },
    {
        "page_index": 6,
        "chunk_index": 6,
        "text": "data-linktype=\"absolute-path\"><strong>SuggestedStartLocation</strong></a>, and<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileopenpicker.filetypefilter\" data-linktype=\"absolute-path\"><strong>FileTypeFilter</strong></a>.</p>"
    },
    {
        "page_index": 6,
        "chunk_index": 7,
        "text": "<ul>\n<li>"
    },
    {
        "page_index": 6,
        "chunk_index": 8,
        "text": "<p>Setting<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileopenpicker.viewmode\" data-linktype=\"absolute-path\"><strong>ViewMode</strong></a><span>&nbsp;</span>to the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.Pickers.PickerViewMode\" data-linktype=\"absolute-path\"><strong>PickerViewMode</strong></a><span>&nbsp;</span><strong>Thumbnail</strong><span>&nbsp;</span>enum value creates a rich, visual display by"
    },
    {
        "page_index": 6,
        "chunk_index": 9,
        "text": "value creates a rich, visual display by using picture thumbnails to represent files in the file picker. Do this for picking visual files such as pictures or videos. Otherwise, use<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.Pickers.PickerViewMode\" data-linktype=\"absolute-path\"><strong>PickerViewMode.List</strong></a>. A hypothetical email app with<span>&nbsp;</span><strong>Attach Picture or"
    },
    {
        "page_index": 6,
        "chunk_index": 10,
        "text": "with<span>&nbsp;</span><strong>Attach Picture or Video</strong><span>&nbsp;</span>and<span>&nbsp;</span><strong>Attach Document</strong><span>&nbsp;</span>features would set the<span>&nbsp;</span><strong>ViewMode</strong><span>&nbsp;</span>appropriate to the feature before showing the file picker.</p>"
    },
    {
        "page_index": 6,
        "chunk_index": 11,
        "text": "</li>\n<li>"
    },
    {
        "page_index": 6,
        "chunk_index": 12,
        "text": "<p>Setting<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileopenpicker.suggestedstartlocation\" data-linktype=\"absolute-path\"><strong>SuggestedStartLocation</strong></a><span>&nbsp;</span>to Pictures using<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.Pickers.PickerLocationId\" data-linktype=\"absolute-path\"><strong>PickerLocationId.PicturesLibrary</strong></a><span>&nbsp;</span>starts the user in a location where"
    },
    {
        "page_index": 6,
        "chunk_index": 13,
        "text": "the user in a location where they're likely to find pictures. Set<span>&nbsp;</span><strong>SuggestedStartLocation</strong><span>&nbsp;</span>to a location appropriate for the type of file being picked, for example Music, Pictures, Videos, or Documents. From the start location, the user can navigate to other locations.</p>"
    },
    {
        "page_index": 6,
        "chunk_index": 14,
        "text": "</li>\n<li>"
    },
    {
        "page_index": 6,
        "chunk_index": 15,
        "text": "<p>Using<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileopenpicker.filetypefilter\" data-linktype=\"absolute-path\"><strong>FileTypeFilter</strong></a><span>&nbsp;</span>to specify file types keeps the user focused on picking files that are relevant. To replace previous file types in the<span>&nbsp;</span><strong>FileTypeFilter</strong><span>&nbsp;</span>with new entries, use<span>&nbsp;</span><a"
    },
    {
        "page_index": 6,
        "chunk_index": 16,
        "text": "new entries, use<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileextensionvector.replaceall\" data-linktype=\"absolute-path\"><strong>ReplaceAll</strong></a><span>&nbsp;</span>instead of<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.pickers.fileextensionvector.append\" data-linktype=\"absolute-path\"><strong>Add</strong></a>.</p>"
    },
    {
        "page_index": 6,
        "chunk_index": 17,
        "text": "</li>\n</ul>\n</li>\n<li>\n<p><strong>Show the FileOpenPicker</strong></p>\n<ul>\n<li>\n<p><strong>To pick a single file</strong></p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-cs\" data-author-content=\"Windows.Storage.StorageFile file = await picker.PickSingleFileAsync();\nif (file != null)\n{\n    // Application now has read/write access to the picked file"
    },
    {
        "page_index": 6,
        "chunk_index": 18,
        "text": "this.textBlock.Text = &quot;Picked photo: &quot; + file.Name;\n}\nelse\n{\n    this.textBlock.Text = &quot;Operation cancelled.&quot;;\n}\n\"><span>Windows.Storage.StorageFile file = <span class=\"hljs-keyword\">await</span> picker.PickSingleFileAsync();\n<span class=\"hljs-keyword\">if</span> (file != <span class=\"hljs-literal\">null</span>)\n{\n    <span class=\"hljs-comment\">// Application now has read/write access to the picked file</span>"
    },
    {
        "page_index": 6,
        "chunk_index": 19,
        "text": "<span class=\"hljs-keyword\">this</span>.textBlock.Text = <span class=\"hljs-string\">\"Picked photo: \"</span> + file.Name;\n}\n<span class=\"hljs-keyword\">else</span>\n{\n    <span class=\"hljs-keyword\">this</span>.textBlock.Text = <span class=\"hljs-string\">\"Operation cancelled.\"</span>;\n}\n</span></code></pre>\n</li>\n<li>\n<p><strong>To pick multiple files</strong></p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 6,
        "chunk_index": 20,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-cs\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"var files = await picker.PickMultipleFilesAsync();\nif (files.Count > 0)\n{\n    StringBuilder output = new StringBuilder(&quot;Picked files:\\n&quot;);"
    },
    {
        "page_index": 6,
        "chunk_index": 21,
        "text": "// Application now has read/write access to the picked file(s)\n    foreach (Windows.Storage.StorageFile file in files)\n    {\n        output.Append(file.Name + &quot;\\n&quot;);\n    }\n    this.textBlock.Text = output.ToString();\n}\nelse\n{\n    this.textBlock.Text = &quot;Operation cancelled.&quot;;\n}\n\"><span><span class=\"hljs-keyword\">var</span> files = <span class=\"hljs-keyword\">await</span> picker.PickMultipleFilesAsync();"
    },
    {
        "page_index": 6,
        "chunk_index": 22,
        "text": "<span class=\"hljs-keyword\">if</span> (files.Count &gt; <span class=\"hljs-number\">0</span>)\n{\n    StringBuilder output = <span class=\"hljs-keyword\">new</span> StringBuilder(<span class=\"hljs-string\">\"Picked files:\\n\"</span>);"
    },
    {
        "page_index": 6,
        "chunk_index": 23,
        "text": "<span class=\"hljs-comment\">// Application now has read/write access to the picked file(s)</span>\n    <span class=\"hljs-keyword\">foreach</span> (Windows.Storage.StorageFile file <span class=\"hljs-keyword\">in</span> files)\n    {\n        output.Append(file.Name + <span class=\"hljs-string\">\"\\n\"</span>);\n    }\n    <span class=\"hljs-keyword\">this</span>.textBlock.Text = output.ToString();\n}\n<span class=\"hljs-keyword\">else</span>\n{"
    },
    {
        "page_index": 6,
        "chunk_index": 24,
        "text": "}\n<span class=\"hljs-keyword\">else</span>\n{\n    <span class=\"hljs-keyword\">this</span>.textBlock.Text = <span class=\"hljs-string\">\"Operation cancelled.\"</span>;\n}<br><br></span></code></pre>\n</li>\n</ul>\n</li>\n</ol>"
    },
    {
        "page_index": 7,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-like\"></i><strong>&nbsp;Recommended Online Resources:</strong></p>\n<ul>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/windows/uwp/get-started/fileio-learning-track\" target=\"_blank\"><span>UWP: Work with files</span></a></li>\n</ul>\n<h2 id=\"creating-a-file\" class=\"heading-anchor\">Creating a file</h2>\n<p>Here's how to create a file in the app's local folder. If it already exists, we replace it.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 1,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Create sample file; replace if exists.\nWindows.Storage.StorageFolder storageFolder =\n    Windows.Storage.ApplicationData.Current.LocalFolder;\nWindows.Storage.StorageFile sampleFile =\n    await storageFolder.CreateFileAsync(&quot;sample.txt&quot;,\n        Windows.Storage.CreationCollisionOption.ReplaceExisting);"
    },
    {
        "page_index": 7,
        "chunk_index": 2,
        "text": "\"><span><span class=\"hljs-comment\">// Create sample file; replace if exists.</span>\nWindows.Storage.StorageFolder storageFolder =\n    Windows.Storage.ApplicationData.Current.LocalFolder;\nWindows.Storage.StorageFile sampleFile =\n    <span class=\"hljs-keyword\">await</span> storageFolder.CreateFileAsync(<span class=\"hljs-string\">\"sample.txt\"</span>,\n        Windows.Storage.CreationCollisionOption.ReplaceExisting);\n</span></code></pre>"
    },
    {
        "page_index": 7,
        "chunk_index": 3,
        "text": "</span></code></pre>\n<h2 id=\"writing-to-a-file\" class=\"heading-anchor\">Writing to a file</h2>"
    },
    {
        "page_index": 7,
        "chunk_index": 4,
        "text": "<p>Here's how to write to a writable file on disk using the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.storagefile\" data-linktype=\"absolute-path\"><strong>StorageFile</strong></a><span>&nbsp;</span>class. The common first step for each of the ways of writing to a file (unless you're writing to the file immediately after creating it) is to get the file with<span>&nbsp;</span><a"
    },
    {
        "page_index": 7,
        "chunk_index": 5,
        "text": "it) is to get the file with<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.storagefolder.getfileasync\" data-linktype=\"absolute-path\"><strong>StorageFolder.GetFileAsync</strong></a>.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 6,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"Windows.Storage.StorageFolder storageFolder =\n    Windows.Storage.ApplicationData.Current.LocalFolder;\nWindows.Storage.StorageFile sampleFile =\n    await storageFolder.GetFileAsync(&quot;sample.txt&quot;);\n\"><span>Windows.Storage.StorageFolder storageFolder =\n    Windows.Storage.ApplicationData.Current.LocalFolder;"
    },
    {
        "page_index": 7,
        "chunk_index": 7,
        "text": "Windows.Storage.StorageFile sampleFile =\n    <span class=\"hljs-keyword\">await</span> storageFolder.GetFileAsync(<span class=\"hljs-string\">\"sample.txt\"</span>);\n</span></code></pre>\n<p><strong>Writing text to a file</strong></p>\n<p>Write text to your file by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.fileio.writetextasync\" data-linktype=\"absolute-path\"><strong>FileIO.WriteTextAsync</strong></a><span>&nbsp;</span>method.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 8,
        "text": "<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"await Windows.Storage.FileIO.WriteTextAsync(sampleFile, &quot;Swift as a shadow&quot;);\n\"><span><span class=\"hljs-keyword\">await</span> Windows.Storage.FileIO.WriteTextAsync(sampleFile, <span class=\"hljs-string\">\"Swift as a shadow\"</span>);\n</span></code></pre>"
    },
    {
        "page_index": 7,
        "chunk_index": 9,
        "text": "</span></code></pre>\n<p><strong>Writing bytes to a file by using a buffer (2 steps)</strong></p>\n<ol>\n<li>\n<p>First, call<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.security.cryptography.cryptographicbuffer.convertstringtobinary\" data-linktype=\"absolute-path\"><strong>CryptographicBuffer.ConvertStringToBinary</strong></a><span>&nbsp;</span>to get a buffer of the bytes (based on a string) that you want to write to your file.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 10,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var buffer = Windows.Security.Cryptography.CryptographicBuffer.ConvertStringToBinary(\n    &quot;What fools these mortals be&quot;, Windows.Security.Cryptography.BinaryStringEncoding.Utf8);\n\"><span><span class=\"hljs-keyword\">var</span> buffer = Windows.Security.Cryptography.CryptographicBuffer.ConvertStringToBinary("
    },
    {
        "page_index": 7,
        "chunk_index": 11,
        "text": "<span class=\"hljs-string\">\"What fools these mortals be\"</span>, Windows.Security.Cryptography.BinaryStringEncoding.Utf8);\n</span></code></pre>\n</li>\n<li>\n<p>Then write the bytes from your buffer to your file by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.fileio.writebufferasync\" data-linktype=\"absolute-path\"><strong>FileIO.WriteBufferAsync</strong></a><span>&nbsp;</span>method.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 12,
        "text": "<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"await Windows.Storage.FileIO.WriteBufferAsync(sampleFile, buffer);\n\"><span><span class=\"hljs-keyword\">await</span> Windows.Storage.FileIO.WriteBufferAsync(sampleFile, buffer);\n</span></code></pre>\n</li>\n</ol>\n<p><strong>Writing text to a file by using a stream (4 steps)</strong></p>\n<ol>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 13,
        "text": "<ol>\n<li>\n<p>First, open the file by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.storagefile.openasync\" data-linktype=\"absolute-path\"><strong>StorageFile.OpenAsync</strong></a><span>&nbsp;</span>method. It returns a stream of the file's content when the open operation completes.</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 7,
        "chunk_index": 14,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var stream = await sampleFile.OpenAsync(Windows.Storage.FileAccessMode.ReadWrite);\n\"><span><span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">await</span> sampleFile.OpenAsync(Windows.Storage.FileAccessMode.ReadWrite);\n</span></code></pre>\n</li>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 15,
        "text": "<p>Next, get an output stream by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.irandomaccessstream.getoutputstreamat\" data-linktype=\"absolute-path\"><strong>IRandomAccessStream.GetOutputStreamAt</strong></a><span>&nbsp;</span>method from the<span>&nbsp;</span><code>stream</code>. If you're using C#, then enclose this in a<span>&nbsp;</span><strong>using</strong><span>&nbsp;</span>statement to manage the output stream's lifetime. If you're"
    },
    {
        "page_index": 7,
        "chunk_index": 16,
        "text": "to manage the output stream's lifetime. If you're using<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/intro-to-using-cpp-with-winrt\" data-linktype=\"absolute-path\">C++/WinRT</a>, then you can control its lifetime by enclosing it in a block, or setting it to<span>&nbsp;</span><code>nullptr</code><span>&nbsp;</span>when you're done with it.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 17,
        "text": "<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using (var outputStream = stream.GetOutputStreamAt(0))\n{\n    // We'll add more code here in the next step.\n}\nstream.Dispose(); // Or use the stream variable (see previous code snippet) with a using statement as well."
    },
    {
        "page_index": 7,
        "chunk_index": 18,
        "text": "\"><span><span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> outputStream = stream.GetOutputStreamAt(<span class=\"hljs-number\">0</span>))\n{\n    <span class=\"hljs-comment\">// We'll add more code here in the next step.</span>\n}\nstream.Dispose(); <span class=\"hljs-comment\">// Or use the stream variable (see previous code snippet) with a using statement as well.</span>\n</span></code></pre>\n</li>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 19,
        "text": "<p>Now add this code (if you're using C#, within the existing<span>&nbsp;</span><strong>using</strong><span>&nbsp;</span>statement) to write to the output stream by creating a new<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datawriter\" data-linktype=\"absolute-path\"><strong>DataWriter</strong></a><span>&nbsp;</span>object and calling the<span>&nbsp;</span><a"
    },
    {
        "page_index": 7,
        "chunk_index": 20,
        "text": "and calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datawriter.writestring\" data-linktype=\"absolute-path\"><strong>DataWriter.WriteString</strong></a><span>&nbsp;</span>method.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 21,
        "text": "<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using (var dataWriter = new Windows.Storage.Streams.DataWriter(outputStream))\n{\n    dataWriter.WriteString(&quot;DataWriter has methods to write to various types, such as DataTimeOffset.&quot;);\n}"
    },
    {
        "page_index": 7,
        "chunk_index": 22,
        "text": "}\n\"><span><span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> dataWriter = <span class=\"hljs-keyword\">new</span> Windows.Storage.Streams.DataWriter(outputStream))\n{\n    dataWriter.WriteString(<span class=\"hljs-string\">\"DataWriter has methods to write to various types, such as DataTimeOffset.\"</span>);\n}\n</span></code></pre>\n</li>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 23,
        "text": "<p>Lastly, add this code (if you're using C#, within the inner<span>&nbsp;</span><strong>using</strong><span>&nbsp;</span>statement) to save the text to your file with<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datawriter.storeasync\" data-linktype=\"absolute-path\"><strong>DataWriter.StoreAsync</strong></a><span>&nbsp;</span>and close the stream with<span>&nbsp;</span><a"
    },
    {
        "page_index": 7,
        "chunk_index": 24,
        "text": "close the stream with<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.ioutputstream.flushasync\" data-linktype=\"absolute-path\"><strong>IOutputStream.FlushAsync</strong></a>.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 25,
        "text": "<div id=\"code-try-8\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"await dataWriter.StoreAsync();\nawait outputStream.FlushAsync();\n\"><span><span class=\"hljs-keyword\">await</span> dataWriter.StoreAsync();\n<span class=\"hljs-keyword\">await</span> outputStream.FlushAsync();\n</span></code></pre>\n</li>\n</ol>\n<p><strong>Best practices for writing to a file</strong></p>"
    },
    {
        "page_index": 7,
        "chunk_index": 26,
        "text": "<p>For additional details and best practice guidance, see<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/windows/uwp/files/best-practices-for-writing-to-files\" data-linktype=\"relative-path\">Best practices for writing to files</a>.</p>\n<h2 id=\"reading-from-a-file\" class=\"heading-anchor\">Reading from a file</h2>"
    },
    {
        "page_index": 7,
        "chunk_index": 27,
        "text": "<p>Here's how to read from a file on disk using the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/Windows.Storage.StorageFile\" data-linktype=\"absolute-path\"><strong>StorageFile</strong></a><span>&nbsp;</span>class. The common first step for each of the ways of reading from a file is to get the file with<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.storagefolder.getfileasync\""
    },
    {
        "page_index": 7,
        "chunk_index": 28,
        "text": "data-linktype=\"absolute-path\"><strong>StorageFolder.GetFileAsync</strong></a>.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 29,
        "text": "<div id=\"code-try-9\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"Windows.Storage.StorageFolder storageFolder =\n    Windows.Storage.ApplicationData.Current.LocalFolder;\nWindows.Storage.StorageFile sampleFile =\n    await storageFolder.GetFileAsync(&quot;sample.txt&quot;);\n\"><span>Windows.Storage.StorageFolder storageFolder =\n    Windows.Storage.ApplicationData.Current.LocalFolder;"
    },
    {
        "page_index": 7,
        "chunk_index": 30,
        "text": "Windows.Storage.StorageFile sampleFile =\n    <span class=\"hljs-keyword\">await</span> storageFolder.GetFileAsync(<span class=\"hljs-string\">\"sample.txt\"</span>);\n</span></code></pre>\n<p><strong>Reading text from a file</strong></p>\n<p>Read text from your file by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.fileio.readtextasync\" data-linktype=\"absolute-path\"><strong>FileIO.ReadTextAsync</strong></a><span>&nbsp;</span>method.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 31,
        "text": "<div id=\"code-try-10\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string text = await Windows.Storage.FileIO.ReadTextAsync(sampleFile);\n\"><span><span class=\"hljs-keyword\">string</span> text = <span class=\"hljs-keyword\">await</span> Windows.Storage.FileIO.ReadTextAsync(sampleFile);\n</span></code></pre>\n<p><strong>Reading text from a file by using a buffer (2 steps)</strong></p>"
    },
    {
        "page_index": 7,
        "chunk_index": 32,
        "text": "<ol>\n<li>\n<p>First, call the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.fileio.readbufferasync\" data-linktype=\"absolute-path\"><strong>FileIO.ReadBufferAsync</strong></a><span>&nbsp;</span>method.</p>\n<div id=\"code-try-11\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var buffer = await Windows.Storage.FileIO.ReadBufferAsync(sampleFile);"
    },
    {
        "page_index": 7,
        "chunk_index": 33,
        "text": "\"><span><span class=\"hljs-keyword\">var</span> buffer = <span class=\"hljs-keyword\">await</span> Windows.Storage.FileIO.ReadBufferAsync(sampleFile);\n</span></code></pre>\n</li>\n<li>\n<p>Then use a<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datareader\" data-linktype=\"absolute-path\"><strong>DataReader</strong></a><span>&nbsp;</span>object to read first the length of the buffer and then its contents.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 34,
        "text": "<div id=\"code-try-12\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using (var dataReader = Windows.Storage.Streams.DataReader.FromBuffer(buffer))\n{\n    string text = dataReader.ReadString(buffer.Length);\n}\n\"><span><span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> dataReader = Windows.Storage.Streams.DataReader.FromBuffer(buffer))\n{"
    },
    {
        "page_index": 7,
        "chunk_index": 35,
        "text": "{\n    <span class=\"hljs-keyword\">string</span> text = dataReader.ReadString(buffer.Length);\n}\n</span></code></pre>\n</li>\n</ol>\n<p><strong>Reading text from a file by using a stream (4 steps)</strong></p>\n<ol>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 36,
        "text": "<ol>\n<li>\n<p>Open a stream for your file by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.storagefile.openasync\" data-linktype=\"absolute-path\"><strong>StorageFile.OpenAsync</strong></a><span>&nbsp;</span>method. It returns a stream of the file's content when the operation completes.</p>\n<div id=\"code-try-13\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 7,
        "chunk_index": 37,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var stream = await sampleFile.OpenAsync(Windows.Storage.FileAccessMode.Read);\n\"><span><span class=\"hljs-keyword\">var</span> stream = <span class=\"hljs-keyword\">await</span> sampleFile.OpenAsync(Windows.Storage.FileAccessMode.Read);\n</span></code></pre>\n</li>\n<li>\n<p>Get the size of the stream to use later.</p>\n<div id=\"code-try-14\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 7,
        "chunk_index": 38,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"ulong size = stream.Size;\n\"><span><span class=\"hljs-keyword\">ulong</span> size = stream.Size;\n</span></code></pre>\n</li>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 39,
        "text": "<p>Get an input stream by calling the<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.irandomaccessstream.getinputstreamat\" data-linktype=\"absolute-path\"><strong>IRandomAccessStream.GetInputStreamAt</strong></a><span>&nbsp;</span>method. Put this in a<span>&nbsp;</span><strong>using</strong><span>&nbsp;</span>statement to manage the stream's lifetime. Specify 0 when you call<span>&nbsp;</span><strong>GetInputStreamAt</strong><span>&nbsp;</span>to set"
    },
    {
        "page_index": 7,
        "chunk_index": 40,
        "text": "set the position to the beginning of the stream.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 41,
        "text": "<div id=\"code-try-15\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using (var inputStream = stream.GetInputStreamAt(0))\n{\n    // We'll add more code here in the next step.\n}\n\"><span><span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> inputStream = stream.GetInputStreamAt(<span class=\"hljs-number\">0</span>))\n{"
    },
    {
        "page_index": 7,
        "chunk_index": 42,
        "text": "{\n    <span class=\"hljs-comment\">// We'll add more code here in the next step.</span>\n}\n</span></code></pre>\n</li>\n<li>"
    },
    {
        "page_index": 7,
        "chunk_index": 43,
        "text": "<p>Lastly, add this code within the existing<span>&nbsp;</span><strong>using</strong><span>&nbsp;</span>statement to get a<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datareader\" data-linktype=\"absolute-path\"><strong>DataReader</strong></a><span>&nbsp;</span>object on the stream then read the text by calling<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datareader.loadasync\""
    },
    {
        "page_index": 7,
        "chunk_index": 44,
        "text": "data-linktype=\"absolute-path\"><strong>DataReader.LoadAsync</strong></a><span>&nbsp;</span>and<span>&nbsp;</span><a href=\"https://docs.microsoft.com/en-us/uwp/api/windows.storage.streams.datareader.readstring\" data-linktype=\"absolute-path\"><strong>DataReader.ReadString</strong></a>.</p>"
    },
    {
        "page_index": 7,
        "chunk_index": 45,
        "text": "<div id=\"code-try-16\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using (var dataReader = new Windows.Storage.Streams.DataReader(inputStream))\n{\n    uint numBytesLoaded = await dataReader.LoadAsync((uint)size);\n    string text = dataReader.ReadString(numBytesLoaded);\n}"
    },
    {
        "page_index": 7,
        "chunk_index": 46,
        "text": "}\n\"><span><span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> dataReader = <span class=\"hljs-keyword\">new</span> Windows.Storage.Streams.DataReader(inputStream))\n{\n    <span class=\"hljs-keyword\">uint</span> numBytesLoaded = <span class=\"hljs-keyword\">await</span> dataReader.LoadAsync((<span class=\"hljs-keyword\">uint</span>)size);\n    <span class=\"hljs-keyword\">string</span> text = dataReader.ReadString(numBytesLoaded);\n}\n</span></code></pre>\n</li>\n</ol>"
    },
    {
        "page_index": 8,
        "chunk_index": 0,
        "text": "<h4>\n<i class=\"icon-outcomes\"></i>&nbsp;<strong>M7</strong>&nbsp;<strong>Objectives</strong>\n</h4>\n<p>After completing this week's work, you will be able to:</p>\n<ul>\n<li><span>Declare a delegate type to create an abstraction of a method signature. </span></li>\n<li><span>Create an instance of a delegate to refer to a specific method. </span></li>\n<li><span>Call a method through a delegate. </span></li>\n<li><span>Define a lambda expression to specify the code to be executed by a delegate. </span></li>\n<li><span>Declare an event field. Handle an event by using a delegate. </span></li>\n<li><span>Raise an event.</span></li>\n</ul>\n<h4>&nbsp;</h4>\n<h4>\n<i class=\"icon-info\"></i>&nbsp;<strong>M7 Activities&nbsp;</strong>\n</h4>\n<ol>\n<li>Watch Video Lectures</li>\n<li>Read Lecture Slides &amp; Programming Guide,</li>\n<li>Practice with Sample Code</li>\n<li>Complete M7&nbsp; Quiz and Assignment</li>\n</ol>"
    },
    {
        "page_index": 9,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides<span>: </span></strong><a class=\"instructure_file_link instructure_scribd_file\" title=\"Delegates.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026311/download?verifier=SMTSrF4t6wPDK3Xlwc7Ps3m6Aay5BDQ0IeJPUb4Z&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026311\" data-api-returntype=\"File\">Delegates.pdf</a></p>\n<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: </strong><a class=\"instructure_file_link\" title=\"Delegate_Lamda.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026268/download?verifier=CUxyDeo0ThsQ05dsEzKc3P7eml0aWH4dDg0bBw7d&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026268\" data-api-returntype=\"File\">Delegate_Lamda.zip</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p>Introduction to Delegates</p>\n<p><iframe src=\"https://www.youtube.com/embed/PH2-10rO68E\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>Lamda Expressions</p>\n<p><iframe src=\"https://www.youtube.com/embed/Yu8KZ8YbBYw\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 10,
        "chunk_index": 0,
        "text": "<h1 id=\"using-delegates-c-programming-guide\">Delegates&nbsp;</h1>"
    },
    {
        "page_index": 10,
        "chunk_index": 1,
        "text": "<p>A&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">delegate</a>&nbsp;is a type that safely encapsulates a method, similar to a function pointer in C and C++. Unlike C function pointers, delegates are object-oriented, type safe, and secure. The type of a delegate is defined by the name of the delegate. The following example declares a delegate named&nbsp;<code>Del</code>&nbsp;that can encapsulate a"
    },
    {
        "page_index": 10,
        "chunk_index": 2,
        "text": "can encapsulate a method that takes a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">string</a>&nbsp;as an argument and returns&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/void\" data-linktype=\"relative-path\">void</a>:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 3,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public delegate void Del(string message);"
    },
    {
        "page_index": 10,
        "chunk_index": 4,
        "text": "\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">delegate</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Del</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>;\n</code></pre>"
    },
    {
        "page_index": 10,
        "chunk_index": 5,
        "text": "<p>A delegate object is normally constructed by providing the name of the method the delegate will wrap, or with an&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-functions\" data-linktype=\"relative-path\">anonymous function</a>. Once a delegate is instantiated, a method call made to the delegate will be passed by the delegate to that method. The parameters passed to the delegate by the caller are passed to the method, and"
    },
    {
        "page_index": 10,
        "chunk_index": 6,
        "text": "by the caller are passed to the method, and the return value, if any, from the method is returned to the caller by the delegate. This is known as invoking the delegate. An instantiated delegate can be invoked as if it were the wrapped method itself. For example:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 7,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Create a method for a delegate.\npublic static void DelegateMethod(string message)\n{\n    Console.WriteLine(message);\n}\n\"><span class=\"hljs-comment\">// Create a method for a delegate.</span>"
    },
    {
        "page_index": 10,
        "chunk_index": 8,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DelegateMethod</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>\n{\n    Console.WriteLine(message);\n}\n</code></pre>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 10,
        "chunk_index": 9,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Instantiate the delegate.\nDel handler = DelegateMethod;"
    },
    {
        "page_index": 10,
        "chunk_index": 10,
        "text": "// Call the delegate.\nhandler(&quot;Hello World&quot;);\n\"><span class=\"hljs-comment\">// Instantiate the delegate.</span>\nDel handler = DelegateMethod;"
    },
    {
        "page_index": 10,
        "chunk_index": 11,
        "text": "<span class=\"hljs-comment\">// Call the delegate.</span>\nhandler(<span class=\"hljs-string\">\"Hello World\"</span>);\n</code></pre>"
    },
    {
        "page_index": 10,
        "chunk_index": 12,
        "text": "<p>Delegate types are derived from the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.delegate\" data-linktype=\"absolute-path\">Delegate</a>&nbsp;class in the .NET Framework. Delegate types are&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/sealed\" data-linktype=\"relative-path\">sealed</a>—they cannot be derived from— and it is not possible to derive custom classes from&nbsp;<a"
    },
    {
        "page_index": 10,
        "chunk_index": 13,
        "text": "possible to derive custom classes from&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.delegate\" data-linktype=\"absolute-path\">Delegate</a>. Because the instantiated delegate is an object, it can be passed as a parameter, or assigned to a property. This allows a method to accept a delegate as a parameter, and call the delegate at some later time. This is known as an asynchronous callback, and is a common method of notifying a caller when a long process has completed. When a"
    },
    {
        "page_index": 10,
        "chunk_index": 14,
        "text": "caller when a long process has completed. When a delegate is used in this fashion, the code using the delegate does not need any knowledge of the implementation of the method being used. The functionality is similar to the encapsulation interfaces provide.</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 15,
        "text": "<p>Another common use of callbacks is defining a custom comparison method and passing that delegate to a sort method. It allows the caller's code to become part of the sort algorithm. The following example method uses the&nbsp;<code>Del</code>&nbsp;type as a parameter:</p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 10,
        "chunk_index": 16,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public static void MethodWithCallback(int param1, int param2, Del callback)\n{\n    callback(&quot;The number is: &quot; + (param1 + param2).ToString());\n}"
    },
    {
        "page_index": 10,
        "chunk_index": 17,
        "text": "}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MethodWithCallback</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> param1, <span class=\"hljs-keyword\">int</span> param2, Del callback</span>)</span>\n{\n    callback(<span class=\"hljs-string\">\"The number is: \"</span> + (param1 + param2).ToString());\n}\n</code></pre>"
    },
    {
        "page_index": 10,
        "chunk_index": 18,
        "text": "}\n</code></pre>\n<p>You can then pass the delegate created above to that method:</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"MethodWithCallback(1, 2, handler);\n\">MethodWithCallback(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, handler);\n</code></pre>\n<p>and receive the following output to the console:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 19,
        "text": "<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">console</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-console\" data-author-content=\"The number is: 3\n\">The number is: 3\n</code></pre>"
    },
    {
        "page_index": 10,
        "chunk_index": 20,
        "text": "\">The number is: 3\n</code></pre>\n<p>Using the delegate as an abstraction,&nbsp;<code>MethodWithCallback</code>&nbsp;does not need to call the console directly—it does not have to be designed with a console in mind. What&nbsp;<code>MethodWithCallback</code>&nbsp;does is simply prepare a string and pass the string to another method. This is especially powerful since a delegated method can use any number of parameters.</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 21,
        "text": "<p>When a delegate is constructed to wrap an instance method, the delegate references both the instance and the method. A delegate has no knowledge of the instance type aside from the method it wraps, so a delegate can refer to any type of object as long as there is a method on that object that matches the delegate signature. When a delegate is constructed to wrap a static method, it only references the method. Consider the following declarations:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 22,
        "text": "<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public class MethodClass\n{\n    public void Method1(string message) { }\n    public void Method2(string message) { }\n}\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MethodClass</span>\n{"
    },
    {
        "page_index": 10,
        "chunk_index": 23,
        "text": "{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Method1</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span> { }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Method2</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span> { }\n}"
    },
    {
        "page_index": 10,
        "chunk_index": 24,
        "text": "}\n</code></pre>\n<p>Along with the static&nbsp;<code>DelegateMethod</code>&nbsp;shown previously, we now have three methods that can be wrapped by a&nbsp;<code>Del</code>&nbsp;instance.</p>\n<p>A delegate can call more than one method when invoked. This is referred to as multicasting. To add an extra method to the delegate's list of methods—the invocation list—simply requires adding two delegates using the addition or addition assignment operators ('+' or '+='). For example:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 25,
        "text": "<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var obj = new MethodClass();\nDel d1 = obj.Method1;\nDel d2 = obj.Method2;\nDel d3 = DelegateMethod;"
    },
    {
        "page_index": 10,
        "chunk_index": 26,
        "text": "//Both types of assignment are valid.\nDel allMethodsDelegate = d1 + d2;\nallMethodsDelegate += d3;\n\"><span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> MethodClass();\nDel d1 = obj.Method1;\nDel d2 = obj.Method2;\nDel d3 = DelegateMethod;"
    },
    {
        "page_index": 10,
        "chunk_index": 27,
        "text": "<span class=\"hljs-comment\">//Both types of assignment are valid.</span>\nDel allMethodsDelegate = d1 + d2;\nallMethodsDelegate += d3;\n</code></pre>"
    },
    {
        "page_index": 10,
        "chunk_index": 28,
        "text": "<p>At this point&nbsp;<code>allMethodsDelegate</code>&nbsp;contains three methods in its invocation list—<code>Method1</code>,&nbsp;<code>Method2</code>, and&nbsp;<code>DelegateMethod</code>. The original three delegates,&nbsp;<code>d1</code>,&nbsp;<code>d2</code>, and&nbsp;<code>d3</code>, remain unchanged. When&nbsp;<code>allMethodsDelegate</code>&nbsp;is invoked, all three methods are called in order. If the delegate uses reference parameters, the reference is passed sequentially to each of"
    },
    {
        "page_index": 10,
        "chunk_index": 29,
        "text": "the reference is passed sequentially to each of the three methods in turn, and any changes by one method are visible to the next method. When any of the methods throws an exception that is not caught within the method, that exception is passed to the caller of the delegate and no subsequent methods in the invocation list are called. If the delegate has a return value and/or out parameters, it returns the return value and parameters of the last method invoked. To remove a method from the"
    },
    {
        "page_index": 10,
        "chunk_index": 30,
        "text": "last method invoked. To remove a method from the invocation list, use the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/subtraction-operator\" data-linktype=\"relative-path\">subtraction or subtraction assignment operators</a>&nbsp;(<code>-</code>&nbsp;or&nbsp;<code>-=</code>). For example:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 31,
        "text": "<div id=\"code-try-8\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"//remove Method1\nallMethodsDelegate -= d1;"
    },
    {
        "page_index": 10,
        "chunk_index": 32,
        "text": "// copy AllMethodsDelegate while removing d2\nDel oneMethodDelegate = allMethodsDelegate - d2;\n\"><span class=\"hljs-comment\">//remove Method1</span>\nallMethodsDelegate -= d1;"
    },
    {
        "page_index": 10,
        "chunk_index": 33,
        "text": "<span class=\"hljs-comment\">// copy AllMethodsDelegate while removing d2</span>\nDel oneMethodDelegate = allMethodsDelegate - d2;\n</code></pre>\n<p>Because delegate types are derived from&nbsp;<code>System.Delegate</code>, the methods and properties defined by that class can be called on the delegate. For example, to find the number of methods in a delegate's invocation list, you may write:</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 34,
        "text": "<div id=\"code-try-9\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int invocationCount = d1.GetInvocationList().GetLength(0);\n\"><span class=\"hljs-keyword\">int</span> invocationCount = d1.GetInvocationList().GetLength(<span class=\"hljs-number\">0</span>);\n</code></pre>"
    },
    {
        "page_index": 10,
        "chunk_index": 35,
        "text": "</code></pre>\n<p>Delegates with more than one method in their invocation list derive from&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.multicastdelegate\" data-linktype=\"absolute-path\">MulticastDelegate</a>, which is a subclass of&nbsp;<code>System.Delegate</code>. The above code works in either case because both classes support&nbsp;<code>GetInvocationList</code>.</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 36,
        "text": "<p>Multicast delegates are used extensively in event handling. Event source objects send event notifications to recipient objects that have registered to receive that event. To register for an event, the recipient creates a method designed to handle the event, then creates a delegate for that method and passes the delegate to the event source. The source calls the delegate when the event occurs. The delegate then calls the event handling method on the recipient, delivering the event data. The"
    },
    {
        "page_index": 10,
        "chunk_index": 37,
        "text": "on the recipient, delivering the event data. The delegate type for a given event is defined by the event source. For more, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/\" data-linktype=\"relative-path\">Events</a>.</p>"
    },
    {
        "page_index": 10,
        "chunk_index": 38,
        "text": "<p>Comparing delegates of two different types assigned at compile-time will result in a compilation error. If the delegate instances are statically of the type&nbsp;<code>System.Delegate</code>, then the comparison is allowed, but will return false at run time. For example:</p>\n<div id=\"code-try-10\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"delegate void Delegate1();"
    },
    {
        "page_index": 10,
        "chunk_index": 39,
        "text": "delegate void Delegate2();"
    },
    {
        "page_index": 10,
        "chunk_index": 40,
        "text": "static void method(Delegate1 d, Delegate2 e, System.Delegate f)\n{\n    // Compile-time error.\n    //Console.WriteLine(d == e);"
    },
    {
        "page_index": 10,
        "chunk_index": 41,
        "text": "// OK at compile-time. False if the run-time type of f \n    // is not the same as that of d.\n    Console.WriteLine(d == f);\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">delegate</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Delegate1</span>()</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">delegate</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Delegate2</span>()</span>;"
    },
    {
        "page_index": 10,
        "chunk_index": 42,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method</span>(<span class=\"hljs-params\">Delegate1 d, Delegate2 e, System.Delegate f</span>)</span>\n{\n    <span class=\"hljs-comment\">// Compile-time error.</span>\n    <span class=\"hljs-comment\">//Console.WriteLine(d == e);</span>"
    },
    {
        "page_index": 10,
        "chunk_index": 43,
        "text": "<span class=\"hljs-comment\">// OK at compile-time. False if the run-time type of f </span>\n    <span class=\"hljs-comment\">// is not the same as that of d.</span>\n    Console.WriteLine(d == f);\n}</code></pre>"
    },
    {
        "page_index": 11,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides<span>: </span></strong><a class=\"instructure_file_link instructure_scribd_file\" title=\"Events.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026328/download?verifier=nq365HL3IBHTywn2pdKT9yZ9HynBg1oNn0HhHUR5&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026328\" data-api-returntype=\"File\">Events.pdf</a></p>"
    },
    {
        "page_index": 11,
        "chunk_index": 1,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: </strong></p>\n<ul>\n<li><a class=\"instructure_file_link\" title=\"StockEvent.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026285/download?verifier=mSatYkBQ0SzMKbSLg641i3Lh3hYcCl0aJieX1Wu2&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026285\" data-api-returntype=\"File\">StockEvent.zip</a></li>"
    },
    {
        "page_index": 11,
        "chunk_index": 2,
        "text": "<li><a class=\"instructure_file_link\" title=\"StockEvent_standard.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026284/download?verifier=zIfp51XgXlYoN9NmVYEHOF6KesIbOwDDQIHBPAWM&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026284\" data-api-returntype=\"File\">StockEvent_standard.zip</a></li>\n</ul>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p>Introduction to Events</p>"
    },
    {
        "page_index": 11,
        "chunk_index": 3,
        "text": "<p>Introduction to Events</p>\n<p><iframe src=\"https://www.youtube.com/embed/fXjwizjv8dA\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>Standard Events</p>"
    },
    {
        "page_index": 11,
        "chunk_index": 4,
        "text": "<p>Standard Events</p>\n<p><iframe src=\"https://www.youtube.com/embed/GkYpWsxuiro\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 12,
        "chunk_index": 0,
        "text": "<h1 id=\"events-c-programming-guide\">Events&nbsp;</h1>\n<p>Events enable a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/class\" data-linktype=\"relative-path\">class</a>&nbsp;or object to notify other classes or objects when something of interest occurs. The class that sends (or&nbsp;<em>raises</em>) the event is called the&nbsp;<em>publisher</em>&nbsp;and the classes that receive (or&nbsp;<em>handle</em>) the event are called&nbsp;<em>subscribers</em>.</p>"
    },
    {
        "page_index": 12,
        "chunk_index": 1,
        "text": "<p>In a typical C# Windows Forms or Web application, you subscribe to events raised by controls such as buttons and list boxes. You can use the Visual C# integrated development environment (IDE) to browse the events that a control publishes and select the ones that you want to handle. The IDE provides an easy way to automatically add an empty event handler method and the code to subscribe to the event.</p>\n<h2 id=\"events-overview\">Events Overview</h2>"
    },
    {
        "page_index": 12,
        "chunk_index": 2,
        "text": "<h2 id=\"events-overview\">Events Overview</h2>\n<p>Events have the following properties:</p>\n<ul>\n<li>\n<p>The publisher determines when an event is raised; the subscribers determine what action is taken in response to the event.</p>\n</li>\n<li>\n<p>An event can have multiple subscribers. A subscriber can handle multiple events from multiple publishers.</p>\n</li>\n<li>\n<p>Events that have no subscribers are never raised.</p>\n</li>\n<li>"
    },
    {
        "page_index": 12,
        "chunk_index": 3,
        "text": "</li>\n<li>\n<p>Events are typically used to signal user actions such as button clicks or menu selections in graphical user interfaces.</p>\n</li>\n<li>"
    },
    {
        "page_index": 12,
        "chunk_index": 4,
        "text": "</li>\n<li>\n<p>When an event has multiple subscribers, the event handlers are invoked synchronously when an event is raised. To invoke events asynchronously, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously\" data-linktype=\"relative-path\">Calling Synchronous Methods Asynchronously</a>.</p>\n</li>\n<li>"
    },
    {
        "page_index": 12,
        "chunk_index": 5,
        "text": "</li>\n<li>\n<p>In the .NET Framework class library, events are based on the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.eventhandler\" data-linktype=\"absolute-path\">EventHandler</a>&nbsp;delegate and the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.eventargs\" data-linktype=\"absolute-path\">EventArgs</a>&nbsp;base class.</p>\n</li>\n</ul>"
    },
    {
        "page_index": 13,
        "chunk_index": 0,
        "text": "<h1 id=\"how-to-subscribe-to-and-unsubscribe-from-events-c-programming-guide\">How to subscribe to and unsubscribe from events&nbsp;</h1>\n<p>You subscribe to an event that is published by another class when you want to write custom code that is called when that event is raised. For example, you might subscribe to a button's&nbsp;<code>click</code>&nbsp;event in order to make your application do something useful when the user clicks the button.</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 1,
        "text": "<h3 id=\"to-subscribe-to-events-by-using-the-visual-studio-ide\">To subscribe to events by using the Visual Studio IDE</h3>\n<ol>\n<li>\n<p>If you cannot see the&nbsp;<strong>Properties</strong>&nbsp;window, in&nbsp;<strong>Design</strong>&nbsp;view, right-click the form or control for which you want to create an event handler, and select&nbsp;<strong>Properties</strong>.</p>\n</li>\n<li>"
    },
    {
        "page_index": 13,
        "chunk_index": 2,
        "text": "</li>\n<li>\n<p>On top of the&nbsp;<strong>Properties</strong>&nbsp;window, click the&nbsp;<strong>Events</strong>&nbsp;icon.</p>\n</li>\n<li>\n<p>Double-click the event that you want to create, for example the&nbsp;<code>Load</code>&nbsp;event.</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 3,
        "text": "<p>Visual C# creates an empty event handler method and adds it to your code. Alternatively you can add the code manually in&nbsp;<strong>Code</strong>&nbsp;view. For example, the following lines of code declare an event handler method that will be called when the&nbsp;<code>Form</code>&nbsp;class raises the&nbsp;<code>Load</code>&nbsp;event.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 13,
        "chunk_index": 4,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"private void Form1_Load(object sender, System.EventArgs e)\n{\n    // Add your form load event handling code here.\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Form1_Load</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, System.EventArgs e</span>)</span>\n{"
    },
    {
        "page_index": 13,
        "chunk_index": 5,
        "text": "{\n    <span class=\"hljs-comment\">// Add your form load event handling code here.</span>\n}\n</code></pre>\n<p>The line of code that is required to subscribe to the event is also automatically generated in the&nbsp;<code>InitializeComponent</code>&nbsp;method in the Form1.Designer.cs file in your project. It resembles this:</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 13,
        "chunk_index": 6,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"this.Load += new System.EventHandler(this.Form1_Load);  \n\"><span class=\"hljs-keyword\">this</span>.Load += <span class=\"hljs-keyword\">new</span> System.EventHandler(<span class=\"hljs-keyword\">this</span>.Form1_Load);  \n</code></pre>\n</li>\n</ol>\n<h3 id=\"to-subscribe-to-events-programmatically\">To subscribe to events programmatically</h3>\n<ol>\n<li>"
    },
    {
        "page_index": 13,
        "chunk_index": 7,
        "text": "<ol>\n<li>\n<p>Define an event handler method whose signature matches the delegate signature for the event. For example, if the event is based on the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.eventhandler\" data-linktype=\"absolute-path\">EventHandler</a>&nbsp;delegate type, the following code represents the method stub:</p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 13,
        "chunk_index": 8,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"void HandleCustomEvent(object sender, CustomEventArgs a)  \n{  \n   // Do something useful here.  \n}  \n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HandleCustomEvent</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, CustomEventArgs a</span>)</span>  \n{  \n   <span class=\"hljs-comment\">// Do something useful here.  </span>\n}  \n</code></pre>"
    },
    {
        "page_index": 13,
        "chunk_index": 9,
        "text": "}  \n</code></pre>\n</li>\n<li>\n<p>Use the addition assignment operator (<code>+=</code>) to attach an event handler to the event. In the following example, assume that an object named&nbsp;<code>publisher</code>&nbsp;has an event named&nbsp;<code>RaiseCustomEvent</code>. Note that the subscriber class needs a reference to the publisher class in order to subscribe to its events.</p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 13,
        "chunk_index": 10,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"publisher.RaiseCustomEvent += HandleCustomEvent;  \n\">publisher.RaiseCustomEvent += HandleCustomEvent;  \n</code></pre>\n<p>Note that the previous syntax is new in C# 2.0. It is exactly equivalent to the C# 1.0 syntax in which the encapsulating delegate must be explicitly created by using the&nbsp;<code>new</code>&nbsp;keyword:</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 11,
        "text": "<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"publisher.RaiseCustomEvent += new CustomEventHandler(HandleCustomEvent);  \n\">publisher.RaiseCustomEvent += <span class=\"hljs-keyword\">new</span> CustomEventHandler(HandleCustomEvent);  \n</code></pre>"
    },
    {
        "page_index": 13,
        "chunk_index": 12,
        "text": "</code></pre>\n<p>You also can use a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions\" data-linktype=\"relative-path\">lambda expression</a>&nbsp;to specify an event handler:</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 13,
        "chunk_index": 13,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"public Form1()  \n{  \n    InitializeComponent();  \n    this.Click += (s,e) =>\n        {\n            MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        };\n}"
    },
    {
        "page_index": 13,
        "chunk_index": 14,
        "text": "};\n}  \n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Form1</span>()</span>  \n{  \n    InitializeComponent();  \n    <span class=\"hljs-keyword\">this</span>.Click += (s,e) =&gt;\n        {\n            MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        };\n}  \n</code></pre>\n</li>\n</ol>\n<h3 id=\"to-subscribe-to-events-by-using-an-anonymous-method\">To subscribe to events by using an anonymous method</h3>\n<ul>\n<li>"
    },
    {
        "page_index": 13,
        "chunk_index": 15,
        "text": "<p>If you will not have to unsubscribe to an event later, you can use the addition assignment operator (<code>+=</code>) to attach an anonymous method to the event. In the following example, assume that an object named&nbsp;<code>publisher</code>&nbsp;has an event named&nbsp;<code>RaiseCustomEvent</code>&nbsp;and that a&nbsp;<code>CustomEventArgs</code>&nbsp;class has also been defined to carry some kind of specialized event information. Note that the subscriber class needs a reference"
    },
    {
        "page_index": 13,
        "chunk_index": 16,
        "text": "Note that the subscriber class needs a reference to&nbsp;<code>publisher</code>&nbsp;in order to subscribe to its events.</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 17,
        "text": "<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"publisher.RaiseCustomEvent += delegate(object o, CustomEventArgs e)  \n{  \n  string s = o.ToString() + &quot; &quot; + e.ToString();  \n  Console.WriteLine(s);  \n};  \n\">publisher.RaiseCustomEvent += <span class=\"hljs-keyword\">delegate</span>(<span class=\"hljs-keyword\">object</span> o, CustomEventArgs e)  \n{"
    },
    {
        "page_index": 13,
        "chunk_index": 18,
        "text": "{  \n  <span class=\"hljs-keyword\">string</span> s = o.ToString() + <span class=\"hljs-string\">\" \"</span> + e.ToString();  \n  Console.WriteLine(s);  \n};  \n</code></pre>"
    },
    {
        "page_index": 13,
        "chunk_index": 19,
        "text": "<p>It is important to notice that you cannot easily unsubscribe from an event if you used an anonymous function to subscribe to it. To unsubscribe in this scenario, it is necessary to go back to the code where you subscribe to the event, store the anonymous method in a delegate variable, and then add the delegate to the event. In general, we recommend that you do not use anonymous functions to subscribe to events if you will have to unsubscribe from the event at some later point in your code."
    },
    {
        "page_index": 13,
        "chunk_index": 20,
        "text": "from the event at some later point in your code. For more information about anonymous functions, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/anonymous-functions\" data-linktype=\"relative-path\">Anonymous Functions</a>.</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 21,
        "text": "</li>\n</ul>\n<h2 id=\"unsubscribing\">Unsubscribing</h2>"
    },
    {
        "page_index": 13,
        "chunk_index": 22,
        "text": "<p>To prevent your event handler from being invoked when the event is raised, unsubscribe from the event. In order to prevent resource leaks, you should unsubscribe from events before you dispose of a subscriber object. Until you unsubscribe from an event, the multicast delegate that underlies the event in the publishing object has a reference to the delegate that encapsulates the subscriber's event handler. As long as the publishing object holds that reference, garbage collection will not"
    },
    {
        "page_index": 13,
        "chunk_index": 23,
        "text": "holds that reference, garbage collection will not delete your subscriber object.</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 24,
        "text": "<h4 id=\"to-unsubscribe-from-an-event\">To unsubscribe from an event<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"to-unsubscribe-from-an-event\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events#to-unsubscribe-from-an-event\"></a>\n</h4>\n<ul>\n<li>\n<p>Use the subtraction assignment operator (<code>-=</code>) to unsubscribe from an event:</p>"
    },
    {
        "page_index": 13,
        "chunk_index": 25,
        "text": "<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"publisher.RaiseCustomEvent -= HandleCustomEvent;  \n\">publisher.RaiseCustomEvent -= HandleCustomEvent;  \n</code></pre>\n<p>When all subscribers have unsubscribed from an event, the event instance in the publisher class is set to&nbsp;<code>null</code>.</p>\n</li>\n</ul>"
    },
    {
        "page_index": 14,
        "chunk_index": 0,
        "text": "<h4><i class=\"icon-outcomes\"></i>&nbsp;<strong>M6</strong>&nbsp;<strong>Objectives</strong></h4>\n<p>After completing this week's work, you will be able to:</p>\n<ol>\n<li>Review Exception Handling in Module 4.</li>\n<li>Understand&nbsp;what exceptions are and how they’re handled.</li>\n<li>Handle exceptions by using the try, catch, and finally statements</li>\n<li>Understand&nbsp;the .NET exception class hierarchy.</li>\n<li>Design and develop an interactive user interface with WPF with code behind</li>\n</ol>\n<p>&nbsp;</p>\n<h4><i class=\"icon-info\"></i>&nbsp;<strong>M6 Activities&nbsp;</strong></h4>\n<ol>\n<li>Watch Video Lectures</li>\n<li>Read Lecture Slides &amp; Programming Guide,</li>\n<li>Practice with Sample Code</li>\n<li>Complete M6&nbsp; Quiz and Assignment</li>\n</ol>"
    },
    {
        "page_index": 15,
        "chunk_index": 0,
        "text": "<p>Lecture Slides: <a class=\"inline_disabled\" href=\"https://docs.google.com/presentation/d/1wmyH2_roOpqIbTtNw4sAMA7I54BMZiqfC5-bVyDbNJM/edit?usp=sharing\" target=\"_blank\">Class Library</a> (use your University credential to access)</p>\n<p>Sample Code: <a class=\"inline_disabled\" href=\"https://drive.google.com/file/d/1tEw6TG71G6BT2J2Z4xAQELfR4pUUg7SE/view?usp=sharing\" target=\"_blank\">ClassLibraryProject</a></p>\n<p>Tutorial :&nbsp;<a class=\"inline_disabled\" title=\"Link\" href=\"https://learn.microsoft.com/en-us/dotnet/core/tutorials/library-with-visual-studio?pivots=dotnet-7-0\" target=\"_blank\">Create a .NET class library using Visual Studio</a></p>"
    },
    {
        "page_index": 16,
        "chunk_index": 0,
        "text": "<p>Lecture Slides: <a class=\"inline_disabled\" href=\"https://docs.google.com/presentation/d/18_s8h5YQioZeIoWyyIBDamc_RupPLj3FCMjYGMwzpeY/edit?usp=sharing\" target=\"_blank\">How to Document your Classes</a> <span>(use your University credential to access doc on Google Drive through MU)</span></p>\n<p>Ref: <a class=\"inline_disabled\" title=\"Link\" href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/xmldoc/recommended-tags\" target=\"_blank\">Recommended XML tags for C# documentation comments</a></p>"
    },
    {
        "page_index": 17,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code:&nbsp; <a class=\"instructure_file_link\" title=\"MathsOperators.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026366/download?verifier=RuD2uOIVSKicyHrOcJmClLNi0Ilp0K0SeYGF4Edv&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026366\" data-api-returntype=\"File\">MathsOperators.zip</a></strong></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/6IB5Pactg7M\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 18,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p>A review of M5 Challenge:&nbsp; Data &amp; Time Picker</p>\n<p><iframe src=\"https://www.youtube.com/embed/H9M6J2waJ0Y\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 19,
        "chunk_index": 0,
        "text": "<h4>\n<i class=\"icon-outcomes\"></i>&nbsp;<strong>M5</strong>&nbsp;<strong>Objectives</strong>\n</h4>\n<p>After completing this week's work, you will be able to:</p>\n<ol>\n<li>Illustrate different WPF layout controls (size, position, transform, margin, padding)</li>\n<li>Describe commonly used WPF user interface elements</li>\n<li>Explain the relationship between UI and code behind</li>\n<li>Design and develop an interactive user interface with WPF with code behind</li>\n</ol>\n<p>&nbsp;</p>\n<h4>\n<i class=\"icon-info\"></i>&nbsp;<strong>M5 Activities&nbsp;</strong>\n</h4>\n<ol>\n<li>Watch Video Lectures</li>\n<li>Read Lecture Slides &amp; Programming Guide,</li>\n<li>Practice with Sample Code</li>\n<li>Complete M5 Quiz and Assignment</li>\n</ol>"
    },
    {
        "page_index": 20,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"IntroWPF.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026367/download?verifier=svk5NXPWfuuK4a8GAObQxgqBqf8KSI2lsgKIwqyY&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026367\" data-api-returntype=\"File\">IntroWPF.pdf</a></p>"
    },
    {
        "page_index": 21,
        "chunk_index": 0,
        "text": "<h1 id=\"wpf-overview\">WPF overview</h1>\n<p>Windows Presentation Foundation (WPF) lets you create desktop client applications for Windows with visually stunning user experiences.</p>"
    },
    {
        "page_index": 21,
        "chunk_index": 1,
        "text": "<p>The core of WPF is a resolution-independent and vector-based rendering engine that is built to take advantage of modern graphics hardware. WPF extends the core with a comprehensive set of application-development features that include Extensible Application Markup Language (XAML), controls, data binding, layout, 2D and 3D graphics, animation, styles, templates, documents, media, text, and typography. WPF is part of .NET, so you can build applications that incorporate other elements of the"
    },
    {
        "page_index": 21,
        "chunk_index": 2,
        "text": "that incorporate other elements of the .NET API.</p>"
    },
    {
        "page_index": 21,
        "chunk_index": 3,
        "text": "<p>This overview is intended for newcomers and covers the key capabilities and concepts of WPF.</p>\n<h2 id=\"program-with-wpf\">Program with WPF</h2>"
    },
    {
        "page_index": 21,
        "chunk_index": 4,
        "text": "<p>WPF exists as a subset of .NET types that are (for the most part) located in the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows\" data-linktype=\"absolute-path\">System.Windows</a>&nbsp;namespace. If you have previously built applications with .NET using managed technologies like ASP.NET and Windows Forms, the fundamental WPF programming experience should be familiar; you instantiate classes, set properties, call methods, and handle events, using your"
    },
    {
        "page_index": 21,
        "chunk_index": 5,
        "text": "call methods, and handle events, using your favorite .NET programming language, such as C# or Visual Basic.</p>"
    },
    {
        "page_index": 21,
        "chunk_index": 6,
        "text": "<p>WPF includes additional programming constructs that enhance properties and events:&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-properties-overview\" data-linktype=\"relative-path\">dependency properties</a>&nbsp;and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/routed-events-overview\" data-linktype=\"relative-path\">routed events</a>.</p>\n<h2 id=\"markup-and-code-behind\">Markup and code-behind</h2>"
    },
    {
        "page_index": 21,
        "chunk_index": 7,
        "text": "<p>WPF lets you develop an application using both&nbsp;<em>markup</em>&nbsp;and&nbsp;<em>code-behind</em>, an experience with which ASP.NET developers should be familiar. You generally use XAML markup to implement the appearance of an application while using managed programming languages (code-behind) to implement its behavior. This separation of appearance and behavior has the following benefits:</p>\n<ul>\n<li>"
    },
    {
        "page_index": 21,
        "chunk_index": 8,
        "text": "<ul>\n<li>\n<p>Development and maintenance costs are reduced because appearance-specific markup is not tightly coupled with behavior-specific code.</p>\n</li>\n<li>\n<p>Development is more efficient because designers can implement an application's appearance simultaneously with developers who are implementing the application's behavior.</p>\n</li>\n<li>"
    },
    {
        "page_index": 21,
        "chunk_index": 9,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/wpf-globalization-and-localization-overview\" data-linktype=\"relative-path\">Globalization and localization</a>&nbsp;for WPF applications is simplified.</p>\n</li>\n</ul>\n<h3 id=\"markup\">Markup</h3>"
    },
    {
        "page_index": 21,
        "chunk_index": 10,
        "text": "</li>\n</ul>\n<h3 id=\"markup\">Markup</h3>\n<p>XAML is an XML-based markup language that implements an application's appearance declaratively. You typically use it to create windows, dialog boxes, pages, and user controls, and to fill them with controls, shapes, and graphics.</p>\n<p>The following example uses XAML to implement the appearance of a window that contains a single button:</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>"
    },
    {
        "page_index": 21,
        "chunk_index": 11,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Window\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    Title=&quot;Window with Button&quot;\n    Width=&quot;250&quot; Height=&quot;100&quot;>"
    },
    {
        "page_index": 21,
        "chunk_index": 12,
        "text": "<!-- Add button to window -->\n  <Button Name=&quot;button&quot;>Click Me!</Button>"
    },
    {
        "page_index": 21,
        "chunk_index": 13,
        "text": "</Window>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Window</span>\n    <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span>\n    <span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">\"Window with Button\"</span>\n    <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"250\"</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"100\"</span>&gt;</span>"
    },
    {
        "page_index": 21,
        "chunk_index": 14,
        "text": "<span class=\"hljs-comment\">&lt;!-- Add button to window --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"button\"</span>&gt;</span>Click Me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 21,
        "chunk_index": 15,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Window</span>&gt;</span>\n</code></pre>"
    },
    {
        "page_index": 21,
        "chunk_index": 16,
        "text": "<p>Specifically, this XAML defines a window and a button by using the&nbsp;<code>Window</code>&nbsp;and&nbsp;<code>Button</code>&nbsp;elements, respectively. Each element is configured with attributes, such as the&nbsp;<code>Window</code>&nbsp;element's&nbsp;<code>Title</code>&nbsp;attribute to specify the window's title-bar text. At run time, WPF converts the elements and attributes that are defined in markup to instances of WPF classes. For example, the&nbsp;<code>Window</code>&nbsp;element"
    },
    {
        "page_index": 21,
        "chunk_index": 17,
        "text": "the&nbsp;<code>Window</code>&nbsp;element is converted to an instance of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.window\" data-linktype=\"absolute-path\">Window</a>&nbsp;class whose&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.window.title\" data-linktype=\"absolute-path\">Title</a>&nbsp;property is the value of the&nbsp;<code>Title</code>&nbsp;attribute.</p>"
    },
    {
        "page_index": 21,
        "chunk_index": 18,
        "text": "<p>The following figure shows the user interface (UI) that is defined by the XAML in the previous example:</p>\n<p><img src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/media/introduction-to-wpf/wpfintrofigure10.png\" alt=\"A window that contains a button\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 21,
        "chunk_index": 19,
        "text": "<p>Since XAML is XML-based, the UI that you compose with it is assembled in a hierarchy of nested elements known as an&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/trees-in-wpf\" data-linktype=\"relative-path\">element tree</a>. The element tree provides a logical and intuitive way to create and manage UIs.</p>\n<h3 id=\"code-behind\">Code-behind</h3>"
    },
    {
        "page_index": 21,
        "chunk_index": 20,
        "text": "<p>The main behavior of an application is to implement the functionality that responds to user interactions, including handling events (for example, clicking a menu, tool bar, or button) and calling business logic and data access logic in response. In WPF, this behavior is implemented in code that is associated with markup. This type of code is known as code-behind. The following example shows the updated markup from the previous example and the code-behind:</p>"
    },
    {
        "page_index": 21,
        "chunk_index": 21,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Window\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;"
    },
    {
        "page_index": 21,
        "chunk_index": 22,
        "text": "xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    x:Class=&quot;SDKSample.AWindow&quot;\n    Title=&quot;Window with Button&quot;\n    Width=&quot;250&quot; Height=&quot;100&quot;>"
    },
    {
        "page_index": 21,
        "chunk_index": 23,
        "text": "<!-- Add button to window -->\n  <Button Name=&quot;button&quot; Click=&quot;button_Click&quot;>Click Me!</Button>"
    },
    {
        "page_index": 21,
        "chunk_index": 24,
        "text": "</Window>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Window</span>\n    <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span>\n    <span class=\"hljs-attr\">xmlns:x</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span>\n    <span class=\"hljs-attr\">x:Class</span>=<span class=\"hljs-string\">\"SDKSample.AWindow\"</span>"
    },
    {
        "page_index": 21,
        "chunk_index": 25,
        "text": "<span class=\"hljs-attr\">Title</span>=<span class=\"hljs-string\">\"Window with Button\"</span>\n    <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"250\"</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"100\"</span>&gt;</span>"
    },
    {
        "page_index": 21,
        "chunk_index": 26,
        "text": "<span class=\"hljs-comment\">&lt;!-- Add button to window --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"button\"</span> <span class=\"hljs-attr\">Click</span>=<span class=\"hljs-string\">\"button_Click\"</span>&gt;</span>Click Me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 21,
        "chunk_index": 27,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Window</span>&gt;</span>\n</code></pre>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System.Windows; // Window, RoutedEventArgs, MessageBox&nbsp;"
    },
    {
        "page_index": 21,
        "chunk_index": 28,
        "text": "namespace SDKSample\n{\n    public&nbsp;partial&nbsp;class AWindow : Window\n    {\n        public AWindow()\n        {\n            // InitializeComponent call is required to merge the UI&nbsp;\n            // that is defined in markup with this class, including &nbsp;\n            // setting properties and registering event handlers\n            InitializeComponent();\n        }"
    },
    {
        "page_index": 21,
        "chunk_index": 29,
        "text": "void button_Click(object sender, RoutedEventArgs e)\n        {\n            // Show message box when button is clicked.\n            MessageBox.Show(&quot;Hello, Windows Presentation Foundation!&quot;);\n        }\n    }\n}\n\"><span class=\"hljs-keyword\">using</span> System.Windows; <span class=\"hljs-comment\">// Window, RoutedEventArgs, MessageBox&nbsp;</span>"
    },
    {
        "page_index": 21,
        "chunk_index": 30,
        "text": "<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">SDKSample</span>\n{\n    <span class=\"hljs-keyword\">public</span>&nbsp;<span class=\"hljs-keyword\">partial</span>&nbsp;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AWindow</span> : <span class=\"hljs-title\">Window</span>\n    {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AWindow</span>()</span>\n        {"
    },
    {
        "page_index": 21,
        "chunk_index": 31,
        "text": "{\n            <span class=\"hljs-comment\">// InitializeComponent call is required to merge the UI&nbsp;</span>\n            <span class=\"hljs-comment\">// that is defined in markup with this class, including &nbsp;</span>\n            <span class=\"hljs-comment\">// setting properties and registering event handlers</span>\n            InitializeComponent();\n        }"
    },
    {
        "page_index": 21,
        "chunk_index": 32,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">button_Click</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">object</span> sender, RoutedEventArgs e</span>)</span>\n        {\n            <span class=\"hljs-comment\">// Show message box when button is clicked.</span>\n            MessageBox.Show(<span class=\"hljs-string\">\"Hello, Windows Presentation Foundation!\"</span>);\n        }\n    }\n}\n</code></pre>"
    },
    {
        "page_index": 21,
        "chunk_index": 33,
        "text": "<p>In this example, the code-behind implements a class that derives from the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.window\" data-linktype=\"absolute-path\">Window</a>&nbsp;class. The&nbsp;<code>x:Class</code>&nbsp;attribute is used to associate the markup with the code-behind class.&nbsp;<code>InitializeComponent</code>&nbsp;is called from the code-behind class's constructor to merge the UI that is defined in markup with the code-behind class."
    },
    {
        "page_index": 21,
        "chunk_index": 34,
        "text": "is defined in markup with the code-behind class. (<code>InitializeComponent</code>&nbsp;is generated for you when your application is built, which is why you don't need to implement it manually.) The combination of&nbsp;<code>x:Class</code>&nbsp;and&nbsp;<code>InitializeComponent</code>&nbsp;ensure that your implementation is correctly initialized whenever it is created. The code-behind class also implements an event handler for the button's&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 21,
        "chunk_index": 35,
        "text": "handler for the button's&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.buttonbase.click\" data-linktype=\"absolute-path\">Click</a>&nbsp;event. When the button is clicked, the event handler shows a message box by calling the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.messagebox.show\" data-linktype=\"absolute-path\">System.Windows.MessageBox.Show</a>&nbsp;method.</p>"
    },
    {
        "page_index": 21,
        "chunk_index": 36,
        "text": "<p>The following figure shows the result when the button is clicked:</p>\n<p><img src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/media/introduction-to-wpf/wpfintrofigure25.png\" alt=\"A MessageBox\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 22,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"LayoutChildren.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026265/download?verifier=8epXr8azqE6jgW2mshavzqyIIuUTgmW5NUYYvoZU&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026265\" data-api-returntype=\"File\">LayoutChildren.pdf</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<ol>\n<li>WPF Layout Margin &amp; Padding</li>\n</ol>\n<p><iframe src=\"https://www.youtube.com/embed/2A0PM_59yXQ\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>&nbsp;</p>\n<p>&nbsp; &nbsp; 2. WPF Layout Alignment &amp; Transform</p>\n<p><iframe src=\"https://www.youtube.com/embed/AcW0KLUTJUk\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 23,
        "chunk_index": 0,
        "text": "<h1 id=\"alignment-margins-and-padding-overview\">Alignment, Margins, and Padding Overview</h1>"
    },
    {
        "page_index": 23,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement\" data-linktype=\"absolute-path\">FrameworkElement</a>&nbsp;class exposes several properties that are used to precisely position child elements. This topic discusses four of the most important properties:&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>,&nbsp;<a"
    },
    {
        "page_index": 23,
        "chunk_index": 2,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>, and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>. The effects of these"
    },
    {
        "page_index": 23,
        "chunk_index": 3,
        "text": "The effects of these properties are important to understand, because they provide the basis for controlling the position of elements in Windows Presentation Foundation (WPF) applications.<a name=\"wcpsdk_layout_amp_introduction\"></a></p>"
    },
    {
        "page_index": 23,
        "chunk_index": 4,
        "text": "<h2 id=\"introduction-to-element-positioning\">Introduction to Element Positioning</h2>"
    },
    {
        "page_index": 23,
        "chunk_index": 5,
        "text": "<p>There are numerous ways to position elements using WPF. However, achieving ideal layout goes beyond simply choosing the right&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;element. Fine control of positioning requires an understanding of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\""
    },
    {
        "page_index": 23,
        "chunk_index": 6,
        "text": "data-linktype=\"absolute-path\">HorizontalAlignment</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>, and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\""
    },
    {
        "page_index": 23,
        "chunk_index": 7,
        "text": "data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;properties.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 8,
        "text": "<p>The following illustration shows a layout scenario that utilizes several positioning properties.</p>\n<p><img title=\"layout_margins_padding_alignment_graphic1\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/media/layout-margins-padding-alignment-graphic1.png\" alt=\"WPF Positioning Properties Sample\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 23,
        "chunk_index": 9,
        "text": "<p>At first glance, the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements in this illustration may appear to be placed randomly. However, their positions are actually precisely controlled by using a combination of margins, alignments, and padding.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 10,
        "text": "<p>The following example describes how to create the layout in the preceding illustration. A&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border\" data-linktype=\"absolute-path\">Border</a>&nbsp;element encapsulates a parent&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>, with a&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 11,
        "text": "with a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>&nbsp;value of 15 device independent pixels. This accounts for the narrow&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.brushes.lightblue\" data-linktype=\"absolute-path\">LightBlue</a>&nbsp;band that surrounds the child&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 12,
        "text": "that surrounds the child&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>. Child elements of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>&nbsp;are used to illustrate each of the various positioning properties that are detailed in this topic. Three&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 13,
        "text": "in this topic. Three&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements are used to demonstrate both the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\""
    },
    {
        "page_index": 23,
        "chunk_index": 14,
        "text": "data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;properties.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 15,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"\n// Create the application's main Window.\nmainWindow = new Window ();\nmainWindow.Title = &quot;Margins, Padding and Alignment Sample&quot;;"
    },
    {
        "page_index": 23,
        "chunk_index": 16,
        "text": "// Add a Border\nmyBorder = new Border();\nmyBorder.Background = Brushes.LightBlue;\nmyBorder.BorderBrush = Brushes.Black;\nmyBorder.Padding = new Thickness(15);\nmyBorder.BorderThickness = new Thickness(2);\n\nmyStackPanel = new StackPanel();\nmyStackPanel.Background = Brushes.White;\nmyStackPanel.HorizontalAlignment = HorizontalAlignment.Center;\nmyStackPanel.VerticalAlignment = VerticalAlignment.Top;"
    },
    {
        "page_index": 23,
        "chunk_index": 17,
        "text": "TextBlock myTextBlock = new TextBlock();\nmyTextBlock.Margin = new Thickness(5, 0, 5, 0);\nmyTextBlock.FontSize = 18;\nmyTextBlock.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock.Text = &quot;Alignment, Margin and Padding Sample&quot;;\nButton myButton1 = new Button();\nmyButton1.HorizontalAlignment = HorizontalAlignment.Left;\nmyButton1.Margin = new Thickness(20);\nmyButton1.Content = &quot;Button 1&quot;;\nButton myButton2 = new Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 18,
        "text": "Button myButton2 = new Button();\nmyButton2.HorizontalAlignment = HorizontalAlignment.Right;\nmyButton2.Margin = new Thickness(10);\nmyButton2.Content = &quot;Button 2&quot;;\nButton myButton3 = new Button();\nmyButton3.HorizontalAlignment = HorizontalAlignment.Stretch;\nmyButton3.Margin = new Thickness(0);\nmyButton3.Content = &quot;Button 3&quot;;"
    },
    {
        "page_index": 23,
        "chunk_index": 19,
        "text": "// Add child elements to the parent StackPanel.\nmyStackPanel.Children.Add(myTextBlock);\nmyStackPanel.Children.Add(myButton1);\nmyStackPanel.Children.Add(myButton2);\nmyStackPanel.Children.Add(myButton3);\n\n// Add the StackPanel as the lone Child of the Border.\nmyBorder.Child = myStackPanel;\n\n// Add the Border as the Content of the Parent Window Object.\nmainWindow.Content = myBorder;\nmainWindow.Show ();"
    },
    {
        "page_index": 23,
        "chunk_index": 20,
        "text": "\">\n<span class=\"hljs-comment\">// Create the application's main Window.</span>\nmainWindow = <span class=\"hljs-keyword\">new</span> Window ();\nmainWindow.Title = <span class=\"hljs-string\">\"Margins, Padding and Alignment Sample\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 21,
        "text": "<span class=\"hljs-comment\">// Add a Border</span>\nmyBorder = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder.Background = Brushes.LightBlue;\nmyBorder.BorderBrush = Brushes.Black;\nmyBorder.Padding = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">15</span>);\nmyBorder.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">2</span>);"
    },
    {
        "page_index": 23,
        "chunk_index": 22,
        "text": "myStackPanel = <span class=\"hljs-keyword\">new</span> StackPanel();\nmyStackPanel.Background = Brushes.White;\nmyStackPanel.HorizontalAlignment = HorizontalAlignment.Center;\nmyStackPanel.VerticalAlignment = VerticalAlignment.Top;"
    },
    {
        "page_index": 23,
        "chunk_index": 23,
        "text": "TextBlock myTextBlock = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>);\nmyTextBlock.FontSize = <span class=\"hljs-number\">18</span>;\nmyTextBlock.HorizontalAlignment = HorizontalAlignment.Center;"
    },
    {
        "page_index": 23,
        "chunk_index": 24,
        "text": "myTextBlock.Text = <span class=\"hljs-string\">\"Alignment, Margin and Padding Sample\"</span>;\nButton myButton1 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton1.HorizontalAlignment = HorizontalAlignment.Left;\nmyButton1.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">20</span>);\nmyButton1.Content = <span class=\"hljs-string\">\"Button 1\"</span>;\nButton myButton2 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 25,
        "text": "myButton2.HorizontalAlignment = HorizontalAlignment.Right;\nmyButton2.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);\nmyButton2.Content = <span class=\"hljs-string\">\"Button 2\"</span>;\nButton myButton3 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton3.HorizontalAlignment = HorizontalAlignment.Stretch;\nmyButton3.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>);"
    },
    {
        "page_index": 23,
        "chunk_index": 26,
        "text": "myButton3.Content = <span class=\"hljs-string\">\"Button 3\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 27,
        "text": "<span class=\"hljs-comment\">// Add child elements to the parent StackPanel.</span>\nmyStackPanel.Children.Add(myTextBlock);\nmyStackPanel.Children.Add(myButton1);\nmyStackPanel.Children.Add(myButton2);\nmyStackPanel.Children.Add(myButton3);\n\n<span class=\"hljs-comment\">// Add the StackPanel as the lone Child of the Border.</span>\nmyBorder.Child = myStackPanel;"
    },
    {
        "page_index": 23,
        "chunk_index": 28,
        "text": "<span class=\"hljs-comment\">// Add the Border as the Content of the Parent Window Object.</span>\nmainWindow.Content = myBorder;\nmainWindow.Show ();"
    },
    {
        "page_index": 23,
        "chunk_index": 29,
        "text": "</code></pre>\n<p>The following diagram provides a close-up view of the various positioning properties that are used in the preceding sample. Subsequent sections in this topic describe in greater detail how to use each positioning property.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 30,
        "text": "<p><img title=\"layout_margins_padding_alignment_graphic2\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/media/layout-margins-padding-alignment-graphic2.png\" alt=\"Positioning Properties with Screen Call-outs\" data-linktype=\"relative-path\" loading=\"lazy\"><a name=\"wcpsdk_layout_amp_alignment_properties\"></a></p>\n<h2>&nbsp;</h2>\n<h2 id=\"understanding-alignment-properties\">Understanding Alignment Properties</h2>"
    },
    {
        "page_index": 23,
        "chunk_index": 31,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;properties describe how a child element should be positioned within a parent element's allocated layout space. By using these"
    },
    {
        "page_index": 23,
        "chunk_index": 32,
        "text": "element's allocated layout space. By using these properties together, you can position child elements precisely. For example, child elements of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;can specify four different horizontal alignments:&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Left\""
    },
    {
        "page_index": 23,
        "chunk_index": 33,
        "text": "data-linktype=\"absolute-path\">Left</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Right\" data-linktype=\"absolute-path\">Right</a>, or&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Center\" data-linktype=\"absolute-path\">Center</a>, or to&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 34,
        "text": "or to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Stretch\" data-linktype=\"absolute-path\">Stretch</a>&nbsp;to fill available space. Similar values are available for vertical positioning.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 35,
        "text": "<div class=\"alert is-info\">\n<p class=\"alert-title\">&nbsp;Note</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 36,
        "text": "<p>Explicitly-set&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.height\" data-linktype=\"absolute-path\">Height</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.width\" data-linktype=\"absolute-path\">Width</a>&nbsp;properties on an element take precedence over the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 37,
        "text": "take precedence over the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Stretch\" data-linktype=\"absolute-path\">Stretch</a>&nbsp;property value. Attempting to set&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.height\" data-linktype=\"absolute-path\">Height</a>,&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 38,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.width\" data-linktype=\"absolute-path\">Width</a>, and a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;value of&nbsp;<code>Stretch</code>&nbsp;results in the&nbsp;<code>Stretch</code>&nbsp;request being ignored.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 39,
        "text": "</div>\n<p>&nbsp;</p>\n<h3 id=\"horizontalalignment-property\">HorizontalAlignment Property</h3>"
    },
    {
        "page_index": 23,
        "chunk_index": 40,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;property declares the horizontal alignment characteristics to apply to child elements. The following table shows each of the possible values of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\""
    },
    {
        "page_index": 23,
        "chunk_index": 41,
        "text": "data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;property.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 42,
        "text": "<div class=\"table-scroll-wrapper\">\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Left\" data-linktype=\"absolute-path\">Left</a></td>\n<td>Child elements are aligned to the left of the parent element's allocated layout space.</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 23,
        "chunk_index": 43,
        "text": "</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Center\" data-linktype=\"absolute-path\">Center</a></td>\n<td>Child elements are aligned to the center of the parent element's allocated layout space.</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 23,
        "chunk_index": 44,
        "text": "</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Right\" data-linktype=\"absolute-path\">Right</a></td>\n<td>Child elements are aligned to the right of the parent element's allocated layout space.</td>\n</tr>\n<tr>\n<td>"
    },
    {
        "page_index": 23,
        "chunk_index": 45,
        "text": "</tr>\n<tr>\n<td>\n<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.horizontalalignment#System_Windows_HorizontalAlignment_Stretch\" data-linktype=\"absolute-path\">Stretch</a>&nbsp;(Default)</td>"
    },
    {
        "page_index": 23,
        "chunk_index": 46,
        "text": "<td>Child elements are stretched to fill the parent element's allocated layout space. Explicit&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.width\" data-linktype=\"absolute-path\">Width</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.height\" data-linktype=\"absolute-path\">Height</a>&nbsp;values take precedence.</td>\n</tr>\n</tbody>\n</table>\n</div>"
    },
    {
        "page_index": 23,
        "chunk_index": 47,
        "text": "</div>\n<p>The following example shows how to apply the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;property to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements. Each attribute value is shown, to better illustrate the various rendering behaviors.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 48,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"Button myButton1 = new Button();\nmyButton1.HorizontalAlignment = HorizontalAlignment.Left;\nmyButton1.Content = &quot;Button 1 (Left)&quot;;\nButton myButton2 = new Button();\nmyButton2.HorizontalAlignment = HorizontalAlignment.Right;\nmyButton2.Content = &quot;Button 2 (Right)&quot;;\nButton myButton3 = new Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 49,
        "text": "Button myButton3 = new Button();\nmyButton3.HorizontalAlignment = HorizontalAlignment.Center;\nmyButton3.Content = &quot;Button 3 (Center)&quot;;\nButton myButton4 = new Button();\nmyButton4.HorizontalAlignment = HorizontalAlignment.Stretch;\nmyButton4.Content = &quot;Button 4 (Stretch)&quot;;\n\">Button myButton1 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton1.HorizontalAlignment = HorizontalAlignment.Left;\nmyButton1.Content = <span class=\"hljs-string\">\"Button 1 (Left)\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 50,
        "text": "Button myButton2 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton2.HorizontalAlignment = HorizontalAlignment.Right;\nmyButton2.Content = <span class=\"hljs-string\">\"Button 2 (Right)\"</span>;\nButton myButton3 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton3.HorizontalAlignment = HorizontalAlignment.Center;\nmyButton3.Content = <span class=\"hljs-string\">\"Button 3 (Center)\"</span>;\nButton myButton4 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 51,
        "text": "myButton4.HorizontalAlignment = HorizontalAlignment.Stretch;\nmyButton4.Content = <span class=\"hljs-string\">\"Button 4 (Stretch)\"</span>;\n</code></pre>\n<p>The preceding code yields a layout similar to the following image. The positioning effects of each&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;value are visible in the illustration.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 52,
        "text": "<p><img title=\"layout_horizontal_alignment_graphic\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/media/layout-horizontal-alignment-graphic.png\" alt=\"HorizontalAlignment Sample\" data-linktype=\"relative-path\" loading=\"lazy\"><a name=\"wcpsdk_layout_amp_verticalalignment_properties\"></a></p>\n<h3 id=\"verticalalignment-property\">VerticalAlignment Property</h3>"
    },
    {
        "page_index": 23,
        "chunk_index": 53,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;property describes the vertical alignment characteristics to apply to child elements. The following table shows each of the possible values for the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\""
    },
    {
        "page_index": 23,
        "chunk_index": 54,
        "text": "data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;property.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 55,
        "text": "<div class=\"table-scroll-wrapper\">\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.verticalalignment#System_Windows_VerticalAlignment_Top\" data-linktype=\"absolute-path\">Top</a></td>\n<td>Child elements are aligned to the top of the parent element's allocated layout space.</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 23,
        "chunk_index": 56,
        "text": "</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.verticalalignment#System_Windows_VerticalAlignment_Center\" data-linktype=\"absolute-path\">Center</a></td>\n<td>Child elements are aligned to the center of the parent element's allocated layout space.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.verticalalignment#System_Windows_VerticalAlignment_Bottom\" data-linktype=\"absolute-path\">Bottom</a></td>"
    },
    {
        "page_index": 23,
        "chunk_index": 57,
        "text": "<td>Child elements are aligned to the bottom of the parent element's allocated layout space.</td>\n</tr>\n<tr>\n<td>\n<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.verticalalignment#System_Windows_VerticalAlignment_Stretch\" data-linktype=\"absolute-path\">Stretch</a>&nbsp;(Default)</td>"
    },
    {
        "page_index": 23,
        "chunk_index": 58,
        "text": "<td>Child elements are stretched to fill the parent element's allocated layout space. Explicit&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.width\" data-linktype=\"absolute-path\">Width</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.height\" data-linktype=\"absolute-path\">Height</a>&nbsp;values take precedence.</td>\n</tr>\n</tbody>\n</table>\n</div>"
    },
    {
        "page_index": 23,
        "chunk_index": 59,
        "text": "<p>The following example shows how to apply the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;property to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements. Each attribute value is shown, to better illustrate the various rendering behaviors. For purposes of"
    },
    {
        "page_index": 23,
        "chunk_index": 60,
        "text": "the various rendering behaviors. For purposes of this sample, a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;element with visible gridlines is used as the parent, to better illustrate the layout behavior of each property value.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 61,
        "text": "<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"TextBlock myTextBlock = new TextBlock();\nmyTextBlock.FontSize = 18;\nmyTextBlock.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock.Text = &quot;VerticalAlignment Sample&quot;;\nGrid.SetRow(myTextBlock, 0);\nButton myButton1 = new Button();\nmyButton1.VerticalAlignment = VerticalAlignment.Top;"
    },
    {
        "page_index": 23,
        "chunk_index": 62,
        "text": "myButton1.Content = &quot;Button 1 (Top)&quot;;\nGrid.SetRow(myButton1, 1);\nButton myButton2 = new Button();\nmyButton2.VerticalAlignment = VerticalAlignment.Bottom;\nmyButton2.Content = &quot;Button 2 (Bottom)&quot;;\nGrid.SetRow(myButton2, 2);\nButton myButton3 = new Button();\nmyButton3.VerticalAlignment = VerticalAlignment.Center;\nmyButton3.Content = &quot;Button 3 (Center)&quot;;\nGrid.SetRow(myButton3, 3);\nButton myButton4 = new Button();\nmyButton4.VerticalAlignment = VerticalAlignment.Stretch;"
    },
    {
        "page_index": 23,
        "chunk_index": 63,
        "text": "myButton4.Content = &quot;Button 4 (Stretch)&quot;;\nGrid.SetRow(myButton4, 4);\n\">TextBlock myTextBlock = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock.FontSize = <span class=\"hljs-number\">18</span>;\nmyTextBlock.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock.Text = <span class=\"hljs-string\">\"VerticalAlignment Sample\"</span>;\nGrid.SetRow(myTextBlock, <span class=\"hljs-number\">0</span>);\nButton myButton1 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 64,
        "text": "myButton1.VerticalAlignment = VerticalAlignment.Top;\nmyButton1.Content = <span class=\"hljs-string\">\"Button 1 (Top)\"</span>;\nGrid.SetRow(myButton1, <span class=\"hljs-number\">1</span>);\nButton myButton2 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton2.VerticalAlignment = VerticalAlignment.Bottom;\nmyButton2.Content = <span class=\"hljs-string\">\"Button 2 (Bottom)\"</span>;\nGrid.SetRow(myButton2, <span class=\"hljs-number\">2</span>);"
    },
    {
        "page_index": 23,
        "chunk_index": 65,
        "text": "Button myButton3 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton3.VerticalAlignment = VerticalAlignment.Center;\nmyButton3.Content = <span class=\"hljs-string\">\"Button 3 (Center)\"</span>;\nGrid.SetRow(myButton3, <span class=\"hljs-number\">3</span>);\nButton myButton4 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton4.VerticalAlignment = VerticalAlignment.Stretch;\nmyButton4.Content = <span class=\"hljs-string\">\"Button 4 (Stretch)\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 66,
        "text": "Grid.SetRow(myButton4, <span class=\"hljs-number\">4</span>);\n</code></pre>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">XAML</span>Copy</div>"
    },
    {
        "page_index": 23,
        "chunk_index": 67,
        "text": "<span class=\"language\">XAML</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Page xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; \n      xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;"
    },
    {
        "page_index": 23,
        "chunk_index": 68,
        "text": "WindowTitle=&quot;VerticalAlignment Sample&quot;>\n  <Border Background=&quot;LightBlue&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;2&quot; Padding=&quot;15&quot;>\n    <Grid Background=&quot;White&quot; ShowGridLines=&quot;True&quot;>\n      <Grid.RowDefinitions>\n        <RowDefinition Height=&quot;25&quot;/>\n        <RowDefinition Height=&quot;50&quot;/>\n        <RowDefinition Height=&quot;50&quot;/>\n        <RowDefinition Height=&quot;50&quot;/>"
    },
    {
        "page_index": 23,
        "chunk_index": 69,
        "text": "<RowDefinition Height=&quot;50&quot;/>\n        <RowDefinition Height=&quot;50&quot;/>\n      </Grid.RowDefinitions>\n            <TextBlock Grid.Row=&quot;0&quot; Grid.Column=&quot;0&quot; FontSize=&quot;18&quot; HorizontalAlignment=&quot;Center&quot;>VerticalAlignment Sample</TextBlock>\n            <Button Grid.Row=&quot;1&quot; Grid.Column=&quot;0&quot; VerticalAlignment=&quot;Top&quot;>Button 1 (Top)</Button>"
    },
    {
        "page_index": 23,
        "chunk_index": 70,
        "text": "<Button Grid.Row=&quot;2&quot; Grid.Column=&quot;0&quot; VerticalAlignment=&quot;Bottom&quot;>Button 2 (Bottom)</Button>    \n            <Button Grid.Row=&quot;3&quot; Grid.Column=&quot;0&quot; VerticalAlignment=&quot;Center&quot;>Button 3 (Center)</Button>\n            <Button Grid.Row=&quot;4&quot; Grid.Column=&quot;0&quot; VerticalAlignment=&quot;Stretch&quot;>Button 4 (Stretch)</Button>          \n    </Grid>\n  </Border>    \n</Page>"
    },
    {
        "page_index": 23,
        "chunk_index": 71,
        "text": "</Grid>\n  </Border>    \n</Page>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span> \n      <span class=\"hljs-attr\">xmlns:x</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml\"</span>\n      <span class=\"hljs-attr\">WindowTitle</span>=<span class=\"hljs-string\">\"VerticalAlignment Sample\"</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 72,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"LightBlue\"</span> <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">Padding</span>=<span class=\"hljs-string\">\"15\"</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 73,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"White\"</span> <span class=\"hljs-attr\">ShowGridLines</span>=<span class=\"hljs-string\">\"True\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid.RowDefinitions</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 74,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"25\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"50\"</span>/&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 75,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"50\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"50\"</span>/&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 76,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"50\"</span>/&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid.RowDefinitions</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 77,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">FontSize</span>=<span class=\"hljs-string\">\"18\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>VerticalAlignment Sample<span class=\"hljs-tag\">&lt;/<span"
    },
    {
        "page_index": 23,
        "chunk_index": 78,
        "text": "Sample<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 79,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Top\"</span>&gt;</span>Button 1 (Top)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 80,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Bottom\"</span>&gt;</span>Button 2 (Bottom)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 81,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"3\"</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>Button 3 (Center)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 82,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"4\"</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Stretch\"</span>&gt;</span>Button 4 (Stretch)<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 83,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n</code></pre>"
    },
    {
        "page_index": 23,
        "chunk_index": 84,
        "text": "</code></pre>\n<p>The preceding code yields a layout similar to the following image. The positioning effects of each&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;value are visible in the illustration.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 85,
        "text": "<p><img title=\"layout_vertical_alignment_graphic\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/media/layout-vertical-alignment-graphic.png\" alt=\"VerticalAlignment property sample\" data-linktype=\"relative-path\" loading=\"lazy\"></p>\n<p><a name=\"wcpsdk_layout_amp_margin_properties\"></a></p>\n<h2 id=\"understanding-margin-properties\">Understanding Margin Properties</h2>"
    },
    {
        "page_index": 23,
        "chunk_index": 86,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;property describes the distance between an element and its child or peers.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;values can be uniform, by using syntax like&nbsp;<code>Margin=\"20\"</code>. With this syntax, a"
    },
    {
        "page_index": 23,
        "chunk_index": 87,
        "text": "With this syntax, a uniform&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;of 20 device independent pixels would be applied to the element.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;values can also take the form of four distinct values, each value describing a distinct"
    },
    {
        "page_index": 23,
        "chunk_index": 88,
        "text": "distinct values, each value describing a distinct margin to apply to the left, top, right, and bottom (in that order), like&nbsp;<code>Margin=\"0,10,5,25\"</code>. Proper use of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;property enables very fine control of an element's rendering position and the rendering position of its neighbor elements and children.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 89,
        "text": "<div class=\"alert is-info\">\n<p class=\"alert-title\">&nbsp;Note</p>\n<p>A non-zero margin applies space outside the element's&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.actualwidth\" data-linktype=\"absolute-path\">ActualWidth</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.actualheight\" data-linktype=\"absolute-path\">ActualHeight</a>.</p>\n</div>"
    },
    {
        "page_index": 23,
        "chunk_index": 90,
        "text": "</div>\n<p>The following example shows how to apply uniform margins around a group of&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements are spaced evenly with a ten-pixel margin buffer in each direction.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 91,
        "text": "<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"Button myButton7 = new Button();\nmyButton7.Margin = new Thickness(10);\nmyButton7.Content = &quot;Button 7&quot;;\nButton myButton8 = new Button();\nmyButton8.Margin = new Thickness(10);\nmyButton8.Content = &quot;Button 8&quot;;\nButton myButton9 = new Button();\nmyButton9.Margin = new Thickness(10);"
    },
    {
        "page_index": 23,
        "chunk_index": 92,
        "text": "myButton9.Margin = new Thickness(10);\nmyButton9.Content = &quot;Button 9&quot;;\n\">Button myButton7 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton7.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);\nmyButton7.Content = <span class=\"hljs-string\">\"Button 7\"</span>;\nButton myButton8 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton8.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);"
    },
    {
        "page_index": 23,
        "chunk_index": 93,
        "text": "myButton8.Content = <span class=\"hljs-string\">\"Button 8\"</span>;\nButton myButton9 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton9.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);\nmyButton9.Content = <span class=\"hljs-string\">\"Button 9\"</span>;\n</code></pre>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>"
    },
    {
        "page_index": 23,
        "chunk_index": 94,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Button Margin=&quot;10&quot;>Button 7</Button>\n<Button Margin=&quot;10&quot;>Button 8</Button>\n<Button Margin=&quot;10&quot;>Button 9</Button>"
    },
    {
        "page_index": 23,
        "chunk_index": 95,
        "text": "<Button Margin=&quot;10&quot;>Button 9</Button>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Button 7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 96,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Button 8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Button 9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n</code></pre>"
    },
    {
        "page_index": 23,
        "chunk_index": 97,
        "text": "</code></pre>\n<p>In many instances, a uniform margin is not appropriate. In these cases, non-uniform spacing can be applied. The following example shows how to apply non-uniform margin spacing to child elements. Margins are described in this order: left, top, right, bottom.</p>\n<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"Button myButton1 = new Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 98,
        "text": "myButton1.Margin = new Thickness(0, 10, 0, 10);\nmyButton1.Content = &quot;Button 1&quot;;\nButton myButton2 = new Button();\nmyButton2.Margin = new Thickness(0, 10, 0, 10);\nmyButton2.Content = &quot;Button 2&quot;;\nButton myButton3 = new Button();\nmyButton3.Margin = new Thickness(0, 10, 0, 10);\n\">Button myButton1 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 99,
        "text": "myButton1.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\nmyButton1.Content = <span class=\"hljs-string\">\"Button 1\"</span>;\nButton myButton2 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 100,
        "text": "myButton2.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\nmyButton2.Content = <span class=\"hljs-string\">\"Button 2\"</span>;\nButton myButton3 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 101,
        "text": "myButton3.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\n</code></pre>\n<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>"
    },
    {
        "page_index": 23,
        "chunk_index": 102,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Button Margin=&quot;0,10,0,10&quot;>Button 1</Button>\n<Button Margin=&quot;0,10,0,10&quot;>Button 2</Button>\n<Button Margin=&quot;0,10,0,10&quot;>Button 3</Button>"
    },
    {
        "page_index": 23,
        "chunk_index": 103,
        "text": "\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,10,0,10\"</span>&gt;</span>Button 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,10,0,10\"</span>&gt;</span>Button 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 104,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,10,0,10\"</span>&gt;</span>Button 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n</code></pre>\n<h2 id=\"understanding-the-padding-property\">Understanding the Padding Property</h2>"
    },
    {
        "page_index": 23,
        "chunk_index": 105,
        "text": "<p>Padding is similar to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;in most respects. The Padding property is exposed on only on a few classes, primarily as a convenience:&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.block\" data-linktype=\"absolute-path\">Block</a>,&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 106,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border\" data-linktype=\"absolute-path\">Border</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.control\" data-linktype=\"absolute-path\">Control</a>, and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.textblock\" data-linktype=\"absolute-path\">TextBlock</a>&nbsp;are samples of classes that expose a Padding property."
    },
    {
        "page_index": 23,
        "chunk_index": 107,
        "text": "of classes that expose a Padding property. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>&nbsp;property enlarges the effective size of a child element by the specified&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.thickness\" data-linktype=\"absolute-path\">Thickness</a>&nbsp;value.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 108,
        "text": "<p>The following example shows how to apply&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>&nbsp;to a parent&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border\" data-linktype=\"absolute-path\">Border</a>&nbsp;element.</p>\n<div id=\"code-try-8\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 23,
        "chunk_index": 109,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"myBorder = new Border();\nmyBorder.Background = Brushes.LightBlue;\nmyBorder.BorderBrush = Brushes.Black;\nmyBorder.BorderThickness = new Thickness(2);\nmyBorder.CornerRadius = new CornerRadius(45);\nmyBorder.Padding = new Thickness(25);\n\">myBorder = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder.Background = Brushes.LightBlue;\nmyBorder.BorderBrush = Brushes.Black;"
    },
    {
        "page_index": 23,
        "chunk_index": 110,
        "text": "myBorder.BorderBrush = Brushes.Black;\nmyBorder.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">2</span>);\nmyBorder.CornerRadius = <span class=\"hljs-keyword\">new</span> CornerRadius(<span class=\"hljs-number\">45</span>);\nmyBorder.Padding = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">25</span>);\n</code></pre>\n<div id=\"code-try-9\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>"
    },
    {
        "page_index": 23,
        "chunk_index": 111,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Border Background=&quot;LightBlue&quot; \n        BorderBrush=&quot;Black&quot; \n        BorderThickness=&quot;2&quot; \n        CornerRadius=&quot;45&quot; \n        Padding=&quot;25&quot;>"
    },
    {
        "page_index": 23,
        "chunk_index": 112,
        "text": "Padding=&quot;25&quot;>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"LightBlue\"</span> \n        <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> \n        <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"2\"</span> \n        <span class=\"hljs-attr\">CornerRadius</span>=<span class=\"hljs-string\">\"45\"</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 113,
        "text": "<span class=\"hljs-attr\">Padding</span>=<span class=\"hljs-string\">\"25\"</span>&gt;</span>\n</code></pre>\n<h2 id=\"using-alignment-margins-and-padding-in-an-application\">Using Alignment, Margins, and Padding in an Application</h2>"
    },
    {
        "page_index": 23,
        "chunk_index": 114,
        "text": "<p><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>, and&nbsp;<a"
    },
    {
        "page_index": 23,
        "chunk_index": 115,
        "text": "and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;provide the positioning control necessary to create a complex user interface (UI). You can use the effects of each property to change child-element positioning, enabling flexibility in creating dynamic applications and user experiences.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 116,
        "text": "<p>The following example demonstrates each of the concepts that are detailed in this topic. Building on the infrastructure found in the first sample in this topic, this example adds a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;element as a child of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border\""
    },
    {
        "page_index": 23,
        "chunk_index": 117,
        "text": "data-linktype=\"absolute-path\">Border</a>&nbsp;in the first sample.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border.padding\" data-linktype=\"absolute-path\">Padding</a>&nbsp;is applied to the parent&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border\" data-linktype=\"absolute-path\">Border</a>&nbsp;element. The&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 118,
        "text": "The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;is used to partition space between three child&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>&nbsp;elements.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\""
    },
    {
        "page_index": 23,
        "chunk_index": 119,
        "text": "data-linktype=\"absolute-path\">Button</a>&nbsp;elements are again used to show the various effects of&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>.&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 120,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.textblock\" data-linktype=\"absolute-path\">TextBlock</a>&nbsp;elements are added to each&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.columndefinition\" data-linktype=\"absolute-path\">ColumnDefinition</a>&nbsp;to better define the various properties applied to the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 23,
        "chunk_index": 121,
        "text": "properties applied to the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.button\" data-linktype=\"absolute-path\">Button</a>&nbsp;elements in each column.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 122,
        "text": "<div id=\"code-try-10\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"mainWindow = new Window();"
    },
    {
        "page_index": 23,
        "chunk_index": 123,
        "text": "myBorder = new Border();\nmyBorder.Background = Brushes.LightBlue;\nmyBorder.BorderBrush = Brushes.Black;\nmyBorder.BorderThickness = new Thickness(2);\nmyBorder.CornerRadius = new CornerRadius(45);\nmyBorder.Padding = new Thickness(25);\n\n// Define the Grid.\nmyGrid = new Grid();\nmyGrid.Background = Brushes.White;\nmyGrid.ShowGridLines = true;"
    },
    {
        "page_index": 23,
        "chunk_index": 124,
        "text": "// Define the Columns.\nColumnDefinition myColDef1 = new ColumnDefinition();\nmyColDef1.Width = new GridLength(1, GridUnitType.Auto);\nColumnDefinition myColDef2 = new ColumnDefinition();\nmyColDef2.Width = new GridLength(1, GridUnitType.Star);\nColumnDefinition myColDef3 = new ColumnDefinition();\nmyColDef3.Width = new GridLength(1, GridUnitType.Auto);"
    },
    {
        "page_index": 23,
        "chunk_index": 125,
        "text": "// Add the ColumnDefinitions to the Grid.\nmyGrid.ColumnDefinitions.Add(myColDef1);\nmyGrid.ColumnDefinitions.Add(myColDef2);\nmyGrid.ColumnDefinitions.Add(myColDef3);"
    },
    {
        "page_index": 23,
        "chunk_index": 126,
        "text": "// Add the first child StackPanel.\nStackPanel myStackPanel = new StackPanel();\nmyStackPanel.HorizontalAlignment = HorizontalAlignment.Left;\nmyStackPanel.VerticalAlignment = VerticalAlignment.Top;\nGrid.SetColumn(myStackPanel, 0);\nGrid.SetRow(myStackPanel, 0);\nTextBlock myTextBlock1 = new TextBlock();\nmyTextBlock1.FontSize = 18;\nmyTextBlock1.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock1.Margin = new Thickness(0, 0, 0, 15);\nmyTextBlock1.Text = &quot;StackPanel 1&quot;;"
    },
    {
        "page_index": 23,
        "chunk_index": 127,
        "text": "myTextBlock1.Text = &quot;StackPanel 1&quot;;\nButton myButton1 = new Button();\nmyButton1.Margin = new Thickness(0, 10, 0, 10);\nmyButton1.Content = &quot;Button 1&quot;;\nButton myButton2 = new Button();\nmyButton2.Margin = new Thickness(0, 10, 0, 10);\nmyButton2.Content = &quot;Button 2&quot;;\nButton myButton3 = new Button();\nmyButton3.Margin = new Thickness(0, 10, 0, 10);\nTextBlock myTextBlock2 = new TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 128,
        "text": "TextBlock myTextBlock2 = new TextBlock();\nmyTextBlock2.Text = @&quot;ColumnDefinition.Width = &quot;&quot;Auto&quot;&quot;&quot;;\nTextBlock myTextBlock3 = new TextBlock();\nmyTextBlock3.Text = @&quot;StackPanel.HorizontalAlignment = &quot;&quot;Left&quot;&quot;&quot;;\nTextBlock myTextBlock4 = new TextBlock();\nmyTextBlock4.Text = @&quot;StackPanel.VerticalAlignment = &quot;&quot;Top&quot;&quot;&quot;;\nTextBlock myTextBlock5 = new TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 129,
        "text": "TextBlock myTextBlock5 = new TextBlock();\nmyTextBlock5.Text = @&quot;StackPanel.Orientation = &quot;&quot;Vertical&quot;&quot;&quot;;\nTextBlock myTextBlock6 = new TextBlock();\nmyTextBlock6.Text = @&quot;Button.Margin = &quot;&quot;1,10,0,10&quot;&quot;&quot;;\nmyStackPanel.Children.Add(myTextBlock1);\nmyStackPanel.Children.Add(myButton1);\nmyStackPanel.Children.Add(myButton2);\nmyStackPanel.Children.Add(myButton3);\nmyStackPanel.Children.Add(myTextBlock2);\nmyStackPanel.Children.Add(myTextBlock3);"
    },
    {
        "page_index": 23,
        "chunk_index": 130,
        "text": "myStackPanel.Children.Add(myTextBlock3);\nmyStackPanel.Children.Add(myTextBlock4);\nmyStackPanel.Children.Add(myTextBlock5);\nmyStackPanel.Children.Add(myTextBlock6);"
    },
    {
        "page_index": 23,
        "chunk_index": 131,
        "text": "// Add the second child StackPanel.\nStackPanel myStackPanel2 = new StackPanel();\nmyStackPanel2.HorizontalAlignment = HorizontalAlignment.Stretch;\nmyStackPanel2.VerticalAlignment = VerticalAlignment.Top;\nmyStackPanel2.Orientation = Orientation.Vertical;\nGrid.SetColumn(myStackPanel2, 1);\nGrid.SetRow(myStackPanel2, 0);\nTextBlock myTextBlock7 = new TextBlock();\nmyTextBlock7.FontSize = 18;\nmyTextBlock7.HorizontalAlignment = HorizontalAlignment.Center;"
    },
    {
        "page_index": 23,
        "chunk_index": 132,
        "text": "myTextBlock7.Margin = new Thickness(0, 0, 0, 15);\nmyTextBlock7.Text = &quot;StackPanel 2&quot;;\nButton myButton4 = new Button();\nmyButton4.Margin = new Thickness(10, 0, 10, 0);\nmyButton4.Content = &quot;Button 4&quot;;\nButton myButton5 = new Button();\nmyButton5.Margin = new Thickness(10, 0, 10, 0);\nmyButton5.Content = &quot;Button 5&quot;;\nButton myButton6 = new Button();\nmyButton6.Margin = new Thickness(10, 0, 10, 0);\nmyButton6.Content = &quot;Button 6&quot;;"
    },
    {
        "page_index": 23,
        "chunk_index": 133,
        "text": "myButton6.Content = &quot;Button 6&quot;;\nTextBlock myTextBlock8 = new TextBlock();\nmyTextBlock8.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock8.Text = @&quot;ColumnDefinition.Width = &quot;&quot;*&quot;&quot;&quot;;\nTextBlock myTextBlock9 = new TextBlock();\nmyTextBlock9.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock9.Text = @&quot;StackPanel.HorizontalAlignment = &quot;&quot;Stretch&quot;&quot;&quot;;\nTextBlock myTextBlock10 = new TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 134,
        "text": "TextBlock myTextBlock10 = new TextBlock();\nmyTextBlock10.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock10.Text = @&quot;StackPanel.VerticalAlignment = &quot;&quot;Top&quot;&quot;&quot;;\nTextBlock myTextBlock11 = new TextBlock();\nmyTextBlock11.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock11.Text = @&quot;StackPanel.Orientation = &quot;&quot;Horizontal&quot;&quot;&quot;;\nTextBlock myTextBlock12 = new TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 135,
        "text": "TextBlock myTextBlock12 = new TextBlock();\nmyTextBlock12.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock12.Text = @&quot;Button.Margin = &quot;&quot;10,0,10,0&quot;&quot;&quot;;\nmyStackPanel2.Children.Add(myTextBlock7);\nmyStackPanel2.Children.Add(myButton4);\nmyStackPanel2.Children.Add(myButton5);\nmyStackPanel2.Children.Add(myButton6);\nmyStackPanel2.Children.Add(myTextBlock8);\nmyStackPanel2.Children.Add(myTextBlock9);\nmyStackPanel2.Children.Add(myTextBlock10);"
    },
    {
        "page_index": 23,
        "chunk_index": 136,
        "text": "myStackPanel2.Children.Add(myTextBlock10);\nmyStackPanel2.Children.Add(myTextBlock11);\nmyStackPanel2.Children.Add(myTextBlock12);"
    },
    {
        "page_index": 23,
        "chunk_index": 137,
        "text": "// Add the final child StackPanel.\nStackPanel myStackPanel3 = new StackPanel();\nmyStackPanel3.HorizontalAlignment = HorizontalAlignment.Left;\nmyStackPanel3.VerticalAlignment = VerticalAlignment.Top;\nGrid.SetColumn(myStackPanel3, 2);\nGrid.SetRow(myStackPanel3, 0);\nTextBlock myTextBlock13 = new TextBlock();\nmyTextBlock13.FontSize = 18;\nmyTextBlock13.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock13.Margin = new Thickness(0, 0, 0, 15);\nmyTextBlock13.Text = &quot;StackPanel 3&quot;;"
    },
    {
        "page_index": 23,
        "chunk_index": 138,
        "text": "myTextBlock13.Text = &quot;StackPanel 3&quot;;\nButton myButton7 = new Button();\nmyButton7.Margin = new Thickness(10);\nmyButton7.Content = &quot;Button 7&quot;;\nButton myButton8 = new Button();\nmyButton8.Margin = new Thickness(10);\nmyButton8.Content = &quot;Button 8&quot;;\nButton myButton9 = new Button();\nmyButton9.Margin = new Thickness(10);\nmyButton9.Content = &quot;Button 9&quot;;\nTextBlock myTextBlock14 = new TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 139,
        "text": "TextBlock myTextBlock14 = new TextBlock();\nmyTextBlock14.Text = @&quot;ColumnDefinition.Width = &quot;&quot;Auto&quot;&quot;&quot;;\nTextBlock myTextBlock15 = new TextBlock();\nmyTextBlock15.Text = @&quot;StackPanel.HorizontalAlignment = &quot;&quot;Left&quot;&quot;&quot;;\nTextBlock myTextBlock16 = new TextBlock();\nmyTextBlock16.Text = @&quot;StackPanel.VerticalAlignment = &quot;&quot;Top&quot;&quot;&quot;;\nTextBlock myTextBlock17 = new TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 140,
        "text": "TextBlock myTextBlock17 = new TextBlock();\nmyTextBlock17.Text = @&quot;StackPanel.Orientation = &quot;&quot;Vertical&quot;&quot;&quot;;\nTextBlock myTextBlock18 = new TextBlock();\nmyTextBlock18.Text = @&quot;Button.Margin = &quot;&quot;10&quot;&quot;&quot;;\nmyStackPanel3.Children.Add(myTextBlock13);\nmyStackPanel3.Children.Add(myButton7);\nmyStackPanel3.Children.Add(myButton8);\nmyStackPanel3.Children.Add(myButton9);\nmyStackPanel3.Children.Add(myTextBlock14);"
    },
    {
        "page_index": 23,
        "chunk_index": 141,
        "text": "myStackPanel3.Children.Add(myTextBlock14);\nmyStackPanel3.Children.Add(myTextBlock15);\nmyStackPanel3.Children.Add(myTextBlock16);\nmyStackPanel3.Children.Add(myTextBlock17);\nmyStackPanel3.Children.Add(myTextBlock18);"
    },
    {
        "page_index": 23,
        "chunk_index": 142,
        "text": "// Add child content to the parent Grid.\nmyGrid.Children.Add(myStackPanel);\nmyGrid.Children.Add(myStackPanel2);\nmyGrid.Children.Add(myStackPanel3);\n\n// Add the Grid as the lone child of the Border.\nmyBorder.Child = myGrid;\n\n// Add the Border to the Window as Content and show the Window.\nmainWindow.Content = myBorder;\nmainWindow.Title = &quot;Margin, Padding, and Alignment Sample&quot;;\nmainWindow.Show();\n\">mainWindow = <span class=\"hljs-keyword\">new</span> Window();"
    },
    {
        "page_index": 23,
        "chunk_index": 143,
        "text": "myBorder = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder.Background = Brushes.LightBlue;\nmyBorder.BorderBrush = Brushes.Black;\nmyBorder.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">2</span>);\nmyBorder.CornerRadius = <span class=\"hljs-keyword\">new</span> CornerRadius(<span class=\"hljs-number\">45</span>);\nmyBorder.Padding = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">25</span>);"
    },
    {
        "page_index": 23,
        "chunk_index": 144,
        "text": "<span class=\"hljs-comment\">// Define the Grid.</span>\nmyGrid = <span class=\"hljs-keyword\">new</span> Grid();\nmyGrid.Background = Brushes.White;\nmyGrid.ShowGridLines = <span class=\"hljs-literal\">true</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 145,
        "text": "<span class=\"hljs-comment\">// Define the Columns.</span>\nColumnDefinition myColDef1 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\nmyColDef1.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Auto);\nColumnDefinition myColDef2 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\nmyColDef2.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Star);"
    },
    {
        "page_index": 23,
        "chunk_index": 146,
        "text": "ColumnDefinition myColDef3 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\nmyColDef3.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Auto);"
    },
    {
        "page_index": 23,
        "chunk_index": 147,
        "text": "<span class=\"hljs-comment\">// Add the ColumnDefinitions to the Grid.</span>\nmyGrid.ColumnDefinitions.Add(myColDef1);\nmyGrid.ColumnDefinitions.Add(myColDef2);\nmyGrid.ColumnDefinitions.Add(myColDef3);"
    },
    {
        "page_index": 23,
        "chunk_index": 148,
        "text": "<span class=\"hljs-comment\">// Add the first child StackPanel.</span>\nStackPanel myStackPanel = <span class=\"hljs-keyword\">new</span> StackPanel();\nmyStackPanel.HorizontalAlignment = HorizontalAlignment.Left;\nmyStackPanel.VerticalAlignment = VerticalAlignment.Top;\nGrid.SetColumn(myStackPanel, <span class=\"hljs-number\">0</span>);\nGrid.SetRow(myStackPanel, <span class=\"hljs-number\">0</span>);\nTextBlock myTextBlock1 = <span class=\"hljs-keyword\">new</span> TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 149,
        "text": "myTextBlock1.FontSize = <span class=\"hljs-number\">18</span>;\nmyTextBlock1.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock1.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>);\nmyTextBlock1.Text = <span class=\"hljs-string\">\"StackPanel 1\"</span>;\nButton myButton1 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 150,
        "text": "myButton1.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\nmyButton1.Content = <span class=\"hljs-string\">\"Button 1\"</span>;\nButton myButton2 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 151,
        "text": "myButton2.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\nmyButton2.Content = <span class=\"hljs-string\">\"Button 2\"</span>;\nButton myButton3 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 152,
        "text": "myButton3.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>);\nTextBlock myTextBlock2 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock2.Text = <span class=\"hljs-string\">@\"ColumnDefinition.Width = \"\"Auto\"\"\"</span>;\nTextBlock myTextBlock3 = <span class=\"hljs-keyword\">new</span> TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 153,
        "text": "myTextBlock3.Text = <span class=\"hljs-string\">@\"StackPanel.HorizontalAlignment = \"\"Left\"\"\"</span>;\nTextBlock myTextBlock4 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock4.Text = <span class=\"hljs-string\">@\"StackPanel.VerticalAlignment = \"\"Top\"\"\"</span>;\nTextBlock myTextBlock5 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock5.Text = <span class=\"hljs-string\">@\"StackPanel.Orientation = \"\"Vertical\"\"\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 154,
        "text": "TextBlock myTextBlock6 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock6.Text = <span class=\"hljs-string\">@\"Button.Margin = \"\"1,10,0,10\"\"\"</span>;\nmyStackPanel.Children.Add(myTextBlock1);\nmyStackPanel.Children.Add(myButton1);\nmyStackPanel.Children.Add(myButton2);\nmyStackPanel.Children.Add(myButton3);\nmyStackPanel.Children.Add(myTextBlock2);\nmyStackPanel.Children.Add(myTextBlock3);\nmyStackPanel.Children.Add(myTextBlock4);\nmyStackPanel.Children.Add(myTextBlock5);"
    },
    {
        "page_index": 23,
        "chunk_index": 155,
        "text": "myStackPanel.Children.Add(myTextBlock5);\nmyStackPanel.Children.Add(myTextBlock6);"
    },
    {
        "page_index": 23,
        "chunk_index": 156,
        "text": "<span class=\"hljs-comment\">// Add the second child StackPanel.</span>\nStackPanel myStackPanel2 = <span class=\"hljs-keyword\">new</span> StackPanel();\nmyStackPanel2.HorizontalAlignment = HorizontalAlignment.Stretch;\nmyStackPanel2.VerticalAlignment = VerticalAlignment.Top;\nmyStackPanel2.Orientation = Orientation.Vertical;\nGrid.SetColumn(myStackPanel2, <span class=\"hljs-number\">1</span>);\nGrid.SetRow(myStackPanel2, <span class=\"hljs-number\">0</span>);"
    },
    {
        "page_index": 23,
        "chunk_index": 157,
        "text": "TextBlock myTextBlock7 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock7.FontSize = <span class=\"hljs-number\">18</span>;\nmyTextBlock7.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock7.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>);\nmyTextBlock7.Text = <span class=\"hljs-string\">\"StackPanel 2\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 158,
        "text": "Button myButton4 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton4.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>);\nmyButton4.Content = <span class=\"hljs-string\">\"Button 4\"</span>;\nButton myButton5 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 159,
        "text": "myButton5.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>);\nmyButton5.Content = <span class=\"hljs-string\">\"Button 5\"</span>;\nButton myButton6 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 160,
        "text": "myButton6.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>);\nmyButton6.Content = <span class=\"hljs-string\">\"Button 6\"</span>;\nTextBlock myTextBlock8 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock8.HorizontalAlignment = HorizontalAlignment.Center;"
    },
    {
        "page_index": 23,
        "chunk_index": 161,
        "text": "myTextBlock8.Text = <span class=\"hljs-string\">@\"ColumnDefinition.Width = \"\"*\"\"\"</span>;\nTextBlock myTextBlock9 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock9.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock9.Text = <span class=\"hljs-string\">@\"StackPanel.HorizontalAlignment = \"\"Stretch\"\"\"</span>;\nTextBlock myTextBlock10 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock10.HorizontalAlignment = HorizontalAlignment.Center;"
    },
    {
        "page_index": 23,
        "chunk_index": 162,
        "text": "myTextBlock10.Text = <span class=\"hljs-string\">@\"StackPanel.VerticalAlignment = \"\"Top\"\"\"</span>;\nTextBlock myTextBlock11 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock11.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock11.Text = <span class=\"hljs-string\">@\"StackPanel.Orientation = \"\"Horizontal\"\"\"</span>;\nTextBlock myTextBlock12 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock12.HorizontalAlignment = HorizontalAlignment.Center;"
    },
    {
        "page_index": 23,
        "chunk_index": 163,
        "text": "myTextBlock12.Text = <span class=\"hljs-string\">@\"Button.Margin = \"\"10,0,10,0\"\"\"</span>;\nmyStackPanel2.Children.Add(myTextBlock7);\nmyStackPanel2.Children.Add(myButton4);\nmyStackPanel2.Children.Add(myButton5);\nmyStackPanel2.Children.Add(myButton6);\nmyStackPanel2.Children.Add(myTextBlock8);\nmyStackPanel2.Children.Add(myTextBlock9);\nmyStackPanel2.Children.Add(myTextBlock10);\nmyStackPanel2.Children.Add(myTextBlock11);\nmyStackPanel2.Children.Add(myTextBlock12);"
    },
    {
        "page_index": 23,
        "chunk_index": 164,
        "text": "<span class=\"hljs-comment\">// Add the final child StackPanel.</span>\nStackPanel myStackPanel3 = <span class=\"hljs-keyword\">new</span> StackPanel();\nmyStackPanel3.HorizontalAlignment = HorizontalAlignment.Left;\nmyStackPanel3.VerticalAlignment = VerticalAlignment.Top;\nGrid.SetColumn(myStackPanel3, <span class=\"hljs-number\">2</span>);\nGrid.SetRow(myStackPanel3, <span class=\"hljs-number\">0</span>);\nTextBlock myTextBlock13 = <span class=\"hljs-keyword\">new</span> TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 165,
        "text": "myTextBlock13.FontSize = <span class=\"hljs-number\">18</span>;\nmyTextBlock13.HorizontalAlignment = HorizontalAlignment.Center;\nmyTextBlock13.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>);\nmyTextBlock13.Text = <span class=\"hljs-string\">\"StackPanel 3\"</span>;\nButton myButton7 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 166,
        "text": "myButton7.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);\nmyButton7.Content = <span class=\"hljs-string\">\"Button 7\"</span>;\nButton myButton8 = <span class=\"hljs-keyword\">new</span> Button();\nmyButton8.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);\nmyButton8.Content = <span class=\"hljs-string\">\"Button 8\"</span>;\nButton myButton9 = <span class=\"hljs-keyword\">new</span> Button();"
    },
    {
        "page_index": 23,
        "chunk_index": 167,
        "text": "myButton9.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>);\nmyButton9.Content = <span class=\"hljs-string\">\"Button 9\"</span>;\nTextBlock myTextBlock14 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock14.Text = <span class=\"hljs-string\">@\"ColumnDefinition.Width = \"\"Auto\"\"\"</span>;\nTextBlock myTextBlock15 = <span class=\"hljs-keyword\">new</span> TextBlock();"
    },
    {
        "page_index": 23,
        "chunk_index": 168,
        "text": "myTextBlock15.Text = <span class=\"hljs-string\">@\"StackPanel.HorizontalAlignment = \"\"Left\"\"\"</span>;\nTextBlock myTextBlock16 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock16.Text = <span class=\"hljs-string\">@\"StackPanel.VerticalAlignment = \"\"Top\"\"\"</span>;\nTextBlock myTextBlock17 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock17.Text = <span class=\"hljs-string\">@\"StackPanel.Orientation = \"\"Vertical\"\"\"</span>;"
    },
    {
        "page_index": 23,
        "chunk_index": 169,
        "text": "TextBlock myTextBlock18 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock18.Text = <span class=\"hljs-string\">@\"Button.Margin = \"\"10\"\"\"</span>;\nmyStackPanel3.Children.Add(myTextBlock13);\nmyStackPanel3.Children.Add(myButton7);\nmyStackPanel3.Children.Add(myButton8);\nmyStackPanel3.Children.Add(myButton9);\nmyStackPanel3.Children.Add(myTextBlock14);\nmyStackPanel3.Children.Add(myTextBlock15);\nmyStackPanel3.Children.Add(myTextBlock16);\nmyStackPanel3.Children.Add(myTextBlock17);"
    },
    {
        "page_index": 23,
        "chunk_index": 170,
        "text": "myStackPanel3.Children.Add(myTextBlock17);\nmyStackPanel3.Children.Add(myTextBlock18);"
    },
    {
        "page_index": 23,
        "chunk_index": 171,
        "text": "<span class=\"hljs-comment\">// Add child content to the parent Grid.</span>\nmyGrid.Children.Add(myStackPanel);\nmyGrid.Children.Add(myStackPanel2);\nmyGrid.Children.Add(myStackPanel3);\n\n<span class=\"hljs-comment\">// Add the Grid as the lone child of the Border.</span>\nmyBorder.Child = myGrid;"
    },
    {
        "page_index": 23,
        "chunk_index": 172,
        "text": "<span class=\"hljs-comment\">// Add the Border to the Window as Content and show the Window.</span>\nmainWindow.Content = myBorder;\nmainWindow.Title = <span class=\"hljs-string\">\"Margin, Padding, and Alignment Sample\"</span>;\nmainWindow.Show();\n</code></pre>\n<div id=\"code-try-11\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>"
    },
    {
        "page_index": 23,
        "chunk_index": 173,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Page xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; WindowTitle=&quot;Margins, Padding and Alignment Sample&quot;>\n  <Border Background=&quot;LightBlue&quot;"
    },
    {
        "page_index": 23,
        "chunk_index": 174,
        "text": "<Border Background=&quot;LightBlue&quot; \n          BorderBrush=&quot;Black&quot; \n          BorderThickness=&quot;2&quot; \n          CornerRadius=&quot;45&quot; \n          Padding=&quot;25&quot;>\n    <Grid Background=&quot;White&quot; ShowGridLines=&quot;True&quot;>\n      <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=&quot;Auto&quot;/>\n        <ColumnDefinition Width=&quot;*&quot;/>\n        <ColumnDefinition Width=&quot;Auto&quot;/>\n      </Grid.ColumnDefinitions>"
    },
    {
        "page_index": 23,
        "chunk_index": 175,
        "text": "</Grid.ColumnDefinitions>\n        \n    <StackPanel Grid.Column=&quot;0&quot; Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Left&quot; Name=&quot;StackPanel1&quot; VerticalAlignment=&quot;Top&quot;>\n        <TextBlock FontSize=&quot;18&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,0,0,15&quot;>StackPanel1</TextBlock>\n        <Button Margin=&quot;0,10,0,10&quot;>Button 1</Button>\n        <Button Margin=&quot;0,10,0,10&quot;>Button 2</Button>"
    },
    {
        "page_index": 23,
        "chunk_index": 176,
        "text": "<Button Margin=&quot;0,10,0,10&quot;>Button 3</Button>\n        <TextBlock>ColumnDefinition.Width=&quot;Auto&quot;</TextBlock>\n        <TextBlock>StackPanel.HorizontalAlignment=&quot;Left&quot;</TextBlock>\n        <TextBlock>StackPanel.VerticalAlignment=&quot;Top&quot;</TextBlock>\n        <TextBlock>StackPanel.Orientation=&quot;Vertical&quot;</TextBlock>\n        <TextBlock>Button.Margin=&quot;0,10,0,10&quot;</TextBlock>\n    </StackPanel>"
    },
    {
        "page_index": 23,
        "chunk_index": 177,
        "text": "</StackPanel>\n    \n    <StackPanel Grid.Column=&quot;1&quot; Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Stretch&quot; Name=&quot;StackPanel2&quot; VerticalAlignment=&quot;Top&quot; Orientation=&quot;Vertical&quot;>\n        <TextBlock FontSize=&quot;18&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,0,0,15&quot;>StackPanel2</TextBlock>\n        <Button Margin=&quot;10,0,10,0&quot;>Button 4</Button>\n        <Button Margin=&quot;10,0,10,0&quot;>Button 5</Button>"
    },
    {
        "page_index": 23,
        "chunk_index": 178,
        "text": "<Button Margin=&quot;10,0,10,0&quot;>Button 6</Button>\n        <TextBlock HorizontalAlignment=&quot;Center&quot;>ColumnDefinition.Width=&quot;*&quot;</TextBlock>\n        <TextBlock HorizontalAlignment=&quot;Center&quot;>StackPanel.HorizontalAlignment=&quot;Stretch&quot;</TextBlock>\n        <TextBlock HorizontalAlignment=&quot;Center&quot;>StackPanel.VerticalAlignment=&quot;Top&quot;</TextBlock>"
    },
    {
        "page_index": 23,
        "chunk_index": 179,
        "text": "<TextBlock HorizontalAlignment=&quot;Center&quot;>StackPanel.Orientation=&quot;Horizontal&quot;</TextBlock>\n        <TextBlock HorizontalAlignment=&quot;Center&quot;>Button.Margin=&quot;10,0,10,0&quot;</TextBlock>\n    </StackPanel>        \n        \n    <StackPanel Grid.Column=&quot;2&quot; Grid.Row=&quot;0&quot; HorizontalAlignment=&quot;Left&quot; Name=&quot;StackPanel3&quot; VerticalAlignment=&quot;Top&quot;>"
    },
    {
        "page_index": 23,
        "chunk_index": 180,
        "text": "<TextBlock FontSize=&quot;18&quot; HorizontalAlignment=&quot;Center&quot; Margin=&quot;0,0,0,15&quot;>StackPanel3</TextBlock>\n        <Button Margin=&quot;10&quot;>Button 7</Button>\n        <Button Margin=&quot;10&quot;>Button 8</Button>\n        <Button Margin=&quot;10&quot;>Button 9</Button>\n        <TextBlock>ColumnDefinition.Width=&quot;Auto&quot;</TextBlock>\n        <TextBlock>StackPanel.HorizontalAlignment=&quot;Left&quot;</TextBlock>"
    },
    {
        "page_index": 23,
        "chunk_index": 181,
        "text": "<TextBlock>StackPanel.VerticalAlignment=&quot;Top&quot;</TextBlock>\n        <TextBlock>StackPanel.Orientation=&quot;Vertical&quot;</TextBlock>\n        <TextBlock>Button.Margin=&quot;10&quot;</TextBlock>      \n    </StackPanel>\n  </Grid>\n  </Border>    \n</Page>"
    },
    {
        "page_index": 23,
        "chunk_index": 182,
        "text": "</Grid>\n  </Border>    \n</Page>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span> <span class=\"hljs-attr\">WindowTitle</span>=<span class=\"hljs-string\">\"Margins, Padding and Alignment Sample\"</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 183,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"LightBlue\"</span> \n          <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> \n          <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"2\"</span> \n          <span class=\"hljs-attr\">CornerRadius</span>=<span class=\"hljs-string\">\"45\"</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 184,
        "text": "<span class=\"hljs-attr\">Padding</span>=<span class=\"hljs-string\">\"25\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"White\"</span> <span class=\"hljs-attr\">ShowGridLines</span>=<span class=\"hljs-string\">\"True\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid.ColumnDefinitions</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 185,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColumnDefinition</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"Auto\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColumnDefinition</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"*\"</span>/&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 186,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColumnDefinition</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"Auto\"</span>/&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid.ColumnDefinitions</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 187,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StackPanel</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Left\"</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"StackPanel1\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span"
    },
    {
        "page_index": 23,
        "chunk_index": 188,
        "text": "class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Top\"</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 189,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">FontSize</span>=<span class=\"hljs-string\">\"18\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,0,0,15\"</span>&gt;</span>StackPanel1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 190,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,10,0,10\"</span>&gt;</span>Button 1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 191,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,10,0,10\"</span>&gt;</span>Button 2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 192,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,10,0,10\"</span>&gt;</span>Button 3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>ColumnDefinition.Width=\"Auto\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 193,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>StackPanel.HorizontalAlignment=\"Left\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>StackPanel.VerticalAlignment=\"Top\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 194,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>StackPanel.Orientation=\"Vertical\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>Button.Margin=\"0,10,0,10\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StackPanel</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 195,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StackPanel</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Stretch\"</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"StackPanel2\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Top\"</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 196,
        "text": "class=\"hljs-string\">\"Top\"</span> <span class=\"hljs-attr\">Orientation</span>=<span class=\"hljs-string\">\"Vertical\"</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 197,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">FontSize</span>=<span class=\"hljs-string\">\"18\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,0,0,15\"</span>&gt;</span>StackPanel2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 198,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10,0,10,0\"</span>&gt;</span>Button 4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 199,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10,0,10,0\"</span>&gt;</span>Button 5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 200,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10,0,10,0\"</span>&gt;</span>Button 6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 201,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>ColumnDefinition.Width=\"*\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 202,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>StackPanel.HorizontalAlignment=\"Stretch\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 203,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>StackPanel.VerticalAlignment=\"Top\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 204,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>StackPanel.Orientation=\"Horizontal\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 205,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span>&gt;</span>Button.Margin=\"10,0,10,0\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StackPanel</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 206,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StackPanel</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Left\"</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">\"StackPanel3\"</span> <span class=\"hljs-attr\">VerticalAlignment</span>=<span"
    },
    {
        "page_index": 23,
        "chunk_index": 207,
        "text": "class=\"hljs-attr\">VerticalAlignment</span>=<span class=\"hljs-string\">\"Top\"</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 208,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">FontSize</span>=<span class=\"hljs-string\">\"18\"</span> <span class=\"hljs-attr\">HorizontalAlignment</span>=<span class=\"hljs-string\">\"Center\"</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"0,0,0,15\"</span>&gt;</span>StackPanel3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 209,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Button 7<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Button 8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 210,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">Margin</span>=<span class=\"hljs-string\">\"10\"</span>&gt;</span>Button 9<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>ColumnDefinition.Width=\"Auto\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 211,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>StackPanel.HorizontalAlignment=\"Left\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>StackPanel.VerticalAlignment=\"Top\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 212,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>StackPanel.Orientation=\"Vertical\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span>&gt;</span>Button.Margin=\"10\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>      \n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StackPanel</span>&gt;</span>"
    },
    {
        "page_index": 23,
        "chunk_index": 213,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>    \n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n</code></pre>"
    },
    {
        "page_index": 23,
        "chunk_index": 214,
        "text": "</code></pre>\n<p>When compiled, the preceding application yields a UI that looks like the following illustration. The effects of the various property values are evident in the spacing between elements, and significant property values for elements in each column are shown within&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.textblock\" data-linktype=\"absolute-path\">TextBlock</a>&nbsp;elements.</p>"
    },
    {
        "page_index": 23,
        "chunk_index": 215,
        "text": "<p><img title=\"layout_margins_padding_aligment_graphic3\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/media/layout-margins-padding-aligment-graphic3.png\" alt=\"Several positioning properties in one application\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 24,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"LayoutPanels.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026320/download?verifier=GDRxFcFcW61Xg6vdZgb1AaIGKOgUSyXbbeulX7Xb&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026320\" data-api-returntype=\"File\">LayoutPanels.pdf</a><i class=\"icon-video\"></i></p>\n<p><i class=\"icon-like\"></i><strong>&nbsp;Recommended Online Resources:</strong></p>\n<p><span style=\"font-size: 10pt;\">*Note: these youtube videos are WPF with VB not C#. But XAML and WPF related information are still very useful.</span></p>\n<p><span style=\"font-size: 12pt;\"><a class=\"\" href=\"https://www.youtube.com/watch?v=VvmP2j-PRls\">The Grid</a></span></p>\n<p><span style=\"font-size: 12pt;\"><a class=\"\" href=\"https://www.youtube.com/watch?v=XgpNAoqXqTs\">Stack Panel</a></span></p>\n<p><span style=\"font-size: 12pt;\"><a class=\"\" href=\"https://www.youtube.com/watch?v=bKN6qH7hJpM\">Dock Panel</a></span></p>"
    },
    {
        "page_index": 25,
        "chunk_index": 0,
        "text": "<h1 id=\"panels-overview\">Panels Overview</h1>"
    },
    {
        "page_index": 25,
        "chunk_index": 1,
        "text": "<p><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;elements are components that control the rendering of elements—their size and dimensions, their position, and the arrangement of their child content. The Windows Presentation Foundation (WPF) provides a number of predefined&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\""
    },
    {
        "page_index": 25,
        "chunk_index": 2,
        "text": "data-linktype=\"absolute-path\">Panel</a>&nbsp;elements as well as the ability to construct custom&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a> elements.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 3,
        "text": "<h2 id=\"the-panel-class\">The Panel Class</h2>"
    },
    {
        "page_index": 25,
        "chunk_index": 4,
        "text": "<p><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;is the base class for all elements that provide layout support in Windows Presentation Foundation (WPF). Derived&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;elements are used to position and arrange elements in Extensible Application Markup Language"
    },
    {
        "page_index": 25,
        "chunk_index": 5,
        "text": "in Extensible Application Markup Language (XAML) and code.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 6,
        "text": "<p>The WPF includes a comprehensive suite of derived panel implementations that enable many complex layouts. These derived classes expose properties and methods that enable most standard user interface (UI) scenarios. Developers who are unable to find a child arrangement behavior that meets their needs can create new layouts by overriding the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.arrangeoverride\""
    },
    {
        "page_index": 25,
        "chunk_index": 7,
        "text": "data-linktype=\"absolute-path\">ArrangeOverride</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.measureoverride\" data-linktype=\"absolute-path\">MeasureOverride</a>&nbsp;methods. For more information on custom layout behaviors, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/panels-overview#Panels_custom_panel_elements\" data-linktype=\"self-bookmark\">Custom Panel Elements</a>.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 8,
        "text": "<p><a name=\"Panels_declared_members\"></a></p>\n<h2 id=\"panel-common-members\">Panel Common Members</h2>"
    },
    {
        "page_index": 25,
        "chunk_index": 9,
        "text": "<p>All&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;elements support the base sizing and positioning properties defined by&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement\" data-linktype=\"absolute-path\">FrameworkElement</a>, including&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 10,
        "text": "including&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.height\" data-linktype=\"absolute-path\">Height</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.width\" data-linktype=\"absolute-path\">Width</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\""
    },
    {
        "page_index": 25,
        "chunk_index": 11,
        "text": "data-linktype=\"absolute-path\">HorizontalAlignment</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>, and&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 12,
        "text": "and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.layouttransform\" data-linktype=\"absolute-path\">LayoutTransform</a>. For additional information on positioning properties defined by&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement\" data-linktype=\"absolute-path\">FrameworkElement</a>, see&nbsp;<a"
    },
    {
        "page_index": 25,
        "chunk_index": 13,
        "text": "see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/alignment-margins-and-padding-overview\" data-linktype=\"relative-path\">Alignment, Margins, and Padding Overview</a>.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 14,
        "text": "<p><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;exposes additional properties that are of critical importance in understanding and using layout. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.background\" data-linktype=\"absolute-path\">Background</a>&nbsp;property is used to fill the area between the boundaries of a derived panel element with"
    },
    {
        "page_index": 25,
        "chunk_index": 15,
        "text": "the boundaries of a derived panel element with a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.brush\" data-linktype=\"absolute-path\">Brush</a>.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.children\" data-linktype=\"absolute-path\">Children</a>&nbsp;represents the child collection of elements that the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 16,
        "text": "of elements that the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;is comprised of.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.internalchildren\" data-linktype=\"absolute-path\">InternalChildren</a>&nbsp;represents the content of the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 17,
        "text": "the content of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.children\" data-linktype=\"absolute-path\">Children</a>&nbsp;collection plus those members generated by data binding. Both consist of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.uielementcollection\" data-linktype=\"absolute-path\">UIElementCollection</a>&nbsp;of child elements hosted within the parent&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 18,
        "text": "hosted within the parent&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 19,
        "text": "<p>Panel also exposes a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.zindex\" data-linktype=\"absolute-path\">Panel.ZIndex</a>&nbsp;attached property that can be used to achieve layered order in a derived&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>. Members of a panel's&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 20,
        "text": "Members of a panel's&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.children\" data-linktype=\"absolute-path\">Children</a>&nbsp;collection with a higher&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.zindex\" data-linktype=\"absolute-path\">Panel.ZIndex</a>&nbsp;value appear in front of those with a lower&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 21,
        "text": "front of those with a lower&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.zindex\" data-linktype=\"absolute-path\">Panel.ZIndex</a>&nbsp;value. This is particularly useful for panels such as&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.canvas\" data-linktype=\"absolute-path\">Canvas</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\""
    },
    {
        "page_index": 25,
        "chunk_index": 22,
        "text": "data-linktype=\"absolute-path\">Grid</a>&nbsp;which allow children to share the same coordinate space.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 23,
        "text": "<p><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>&nbsp;also defines the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel.onrender\" data-linktype=\"absolute-path\">OnRender</a>&nbsp;method, which can be used to override the default presentation behavior of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\""
    },
    {
        "page_index": 25,
        "chunk_index": 24,
        "text": "data-linktype=\"absolute-path\">Panel</a>.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 25,
        "text": "<p>&nbsp;</p>\n<h2 id=\"derived-panel-elements\">Derived Panel Elements</h2>"
    },
    {
        "page_index": 25,
        "chunk_index": 26,
        "text": "<p>Many objects derive from&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.panel\" data-linktype=\"absolute-path\">Panel</a>, but not all of them are intended for use as root layout providers. There are six defined panel classes (<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.canvas\" data-linktype=\"absolute-path\">Canvas</a>,&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 27,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>,&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 28,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.virtualizingstackpanel\" data-linktype=\"absolute-path\">VirtualizingStackPanel</a>, and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.wrappanel\" data-linktype=\"absolute-path\">WrapPanel</a>) that are designed specifically for creating application UI.</p>"
    },
    {
        "page_index": 25,
        "chunk_index": 29,
        "text": "<p>Each panel element encapsulates its own special functionality, as seen in the following table.</p>\n<div class=\"table-scroll-wrapper\">\n<table>\n<thead>\n<tr>\n<th>Element Name</th>\n<th>UI Panel?</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.canvas\" data-linktype=\"absolute-path\">Canvas</a></td>\n<td>Yes</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 30,
        "text": "<td>Yes</td>\n<td>Defines an area within which you can explicitly position child elements by coordinates relative to the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.canvas\" data-linktype=\"absolute-path\">Canvas</a>&nbsp;area.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a></td>\n<td>Yes</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 31,
        "text": "<td>Yes</td>\n<td>Defines an area within which you can arrange child elements either horizontally or vertically, relative to each other.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a></td>\n<td>Yes</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 32,
        "text": "<td>Yes</td>\n<td>Defines a flexible grid area consisting of columns and rows. Child elements of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;can be positioned precisely using the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.margin\" data-linktype=\"absolute-path\">Margin</a>&nbsp;property.</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 25,
        "chunk_index": 33,
        "text": "</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a></td>\n<td>Yes</td>\n<td>Arranges child elements into a single line that can be oriented horizontally or vertically.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.tabpanel\" data-linktype=\"absolute-path\">TabPanel</a></td>\n<td>No</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 34,
        "text": "<td>No</td>\n<td>Handles the layout of tab buttons in a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.tabcontrol\" data-linktype=\"absolute-path\">TabControl</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.toolbaroverflowpanel\" data-linktype=\"absolute-path\">ToolBarOverflowPanel</a></td>\n<td>No</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 35,
        "text": "<td>No</td>\n<td>Arranges content within a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.toolbar\" data-linktype=\"absolute-path\">ToolBar</a>&nbsp;control.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.uniformgrid\" data-linktype=\"absolute-path\">UniformGrid</a></td>\n<td>No</td>\n<td>"
    },
    {
        "page_index": 25,
        "chunk_index": 36,
        "text": "<td>No</td>\n<td>\n<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.primitives.uniformgrid\" data-linktype=\"absolute-path\">UniformGrid</a>&nbsp;is used to arrange children in a grid with all equal cell sizes.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.virtualizingpanel\" data-linktype=\"absolute-path\">VirtualizingPanel</a></td>\n<td>No</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 37,
        "text": "<td>No</td>\n<td>Provides a base class for panels that can \"virtualize\" their children collection.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.virtualizingstackpanel\" data-linktype=\"absolute-path\">VirtualizingStackPanel</a></td>\n<td>Yes</td>\n<td>Arranges and virtualizes content on a single line oriented horizontally or vertically.</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 25,
        "chunk_index": 38,
        "text": "</tr>\n<tr>\n<td><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.wrappanel\" data-linktype=\"absolute-path\">WrapPanel</a></td>\n<td>Yes</td>\n<td>"
    },
    {
        "page_index": 25,
        "chunk_index": 39,
        "text": "<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.wrappanel\" data-linktype=\"absolute-path\">WrapPanel</a>&nbsp;positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box. Subsequent ordering happens sequentially from top to bottom or right to left, depending on the value of the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 25,
        "chunk_index": 40,
        "text": "on the value of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.wrappanel.orientation\" data-linktype=\"absolute-path\">Orientation</a>&nbsp;property.</td>"
    },
    {
        "page_index": 25,
        "chunk_index": 41,
        "text": "</tr>\n</tbody>\n</table>\n<p>&nbsp;</p>\n</div>"
    },
    {
        "page_index": 26,
        "chunk_index": 0,
        "text": "<h3 id=\"grid\">Grid</h3>"
    },
    {
        "page_index": 26,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;element merges the functionality of an absolute positioning and tabular data control. A&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;enables you to easily position and style elements.&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 26,
        "chunk_index": 2,
        "text": "position and style elements.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;allows you to define flexible row and column groupings, and even provides a mechanism to share sizing information between multiple&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;elements.</p>"
    },
    {
        "page_index": 26,
        "chunk_index": 3,
        "text": "<h4 id=\"how-is-grid-different-from-table\">How is Grid Different from Table?</h4>"
    },
    {
        "page_index": 26,
        "chunk_index": 4,
        "text": "<p><a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\" data-linktype=\"absolute-path\">Table</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;share some common functionality, but each is best suited for different scenarios. A&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\""
    },
    {
        "page_index": 26,
        "chunk_index": 5,
        "text": "data-linktype=\"absolute-path\">Table</a>&nbsp;is designed for use within flow content (see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/flow-document-overview\" data-linktype=\"relative-path\">Flow Document Overview</a>&nbsp;for more information on flow content). Grids are best used inside of forms (basically anywhere outside of flow content). Within a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.flowdocument\""
    },
    {
        "page_index": 26,
        "chunk_index": 6,
        "text": "data-linktype=\"absolute-path\">FlowDocument</a>,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\" data-linktype=\"absolute-path\">Table</a>&nbsp;supports flow content behaviors like pagination, column reflow, and content selection while a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;does not. A&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 26,
        "chunk_index": 7,
        "text": "not. A&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;on the other hand is best used outside of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.flowdocument\" data-linktype=\"absolute-path\">FlowDocument</a>&nbsp;for many reasons including&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\""
    },
    {
        "page_index": 26,
        "chunk_index": 8,
        "text": "data-linktype=\"absolute-path\">Grid</a>&nbsp;adds elements based on a row and column index,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\" data-linktype=\"absolute-path\">Table</a>&nbsp;does not. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;element allows layering of child content, allowing more than one element to exist within a single"
    },
    {
        "page_index": 26,
        "chunk_index": 9,
        "text": "more than one element to exist within a single \"cell.\"&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\" data-linktype=\"absolute-path\">Table</a>&nbsp;does not support layering. Child elements of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;can be absolutely positioned relative to the area of their \"cell\" boundaries.&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 26,
        "chunk_index": 10,
        "text": "of their \"cell\" boundaries.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\" data-linktype=\"absolute-path\">Table</a>&nbsp;does not support this feature. Finally, a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;is lighter weight than a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.documents.table\""
    },
    {
        "page_index": 26,
        "chunk_index": 11,
        "text": "data-linktype=\"absolute-path\">Table</a>.</p>"
    },
    {
        "page_index": 26,
        "chunk_index": 12,
        "text": "<h4 id=\"sizing-behavior-of-columns-and-rows\">Sizing Behavior of Columns and Rows</h4>"
    },
    {
        "page_index": 26,
        "chunk_index": 13,
        "text": "<p>Columns and rows defined within a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;can take advantage of&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.gridunittype#System_Windows_GridUnitType_Star\" data-linktype=\"absolute-path\">Star</a>&nbsp;sizing in order to distribute remaining space proportionally. When&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 26,
        "chunk_index": 14,
        "text": "space proportionally. When&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.gridunittype#System_Windows_GridUnitType_Star\" data-linktype=\"absolute-path\">Star</a>&nbsp;is selected as the Height or Width of a row or column, that column or row receives a weighted proportion of remaining available space. This is in contrast to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.gridunittype#System_Windows_GridUnitType_Auto\""
    },
    {
        "page_index": 26,
        "chunk_index": 15,
        "text": "data-linktype=\"absolute-path\">Auto</a>, which will distribute space evenly based on the size of the content within a column or row. This value is expressed as&nbsp;<code>*</code>&nbsp;or&nbsp;<code>2*</code>&nbsp;when using Extensible Application Markup Language (XAML). In the first case, the row or column would receive one times the available space, in the second case, two times, and so on. By combining this technique to proportionally distribute space with a&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 26,
        "chunk_index": 16,
        "text": "distribute space with a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.horizontalalignment\" data-linktype=\"absolute-path\">HorizontalAlignment</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.verticalalignment\" data-linktype=\"absolute-path\">VerticalAlignment</a>&nbsp;value of&nbsp;<code>Stretch</code>&nbsp;it is possible to partition layout space by percentage of screen"
    },
    {
        "page_index": 26,
        "chunk_index": 17,
        "text": "to partition layout space by percentage of screen space.&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.grid\" data-linktype=\"absolute-path\">Grid</a>&nbsp;is the only layout panel that can distribute space in this manner.</p>"
    },
    {
        "page_index": 26,
        "chunk_index": 18,
        "text": "<h4 id=\"defining-and-using-a-grid\">Defining and Using a Grid</h4>\n<p>The following example demonstrates how to build a UI similar to that found on the Run dialog available on the Windows Start menu.</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"\n// Create the Grid.\ngrid1 = new Grid ();\ngrid1.Background = Brushes.Gainsboro;"
    },
    {
        "page_index": 26,
        "chunk_index": 19,
        "text": "grid1.Background = Brushes.Gainsboro;\ngrid1.HorizontalAlignment = HorizontalAlignment.Left;\ngrid1.VerticalAlignment = VerticalAlignment.Top;\ngrid1.ShowGridLines = true;\ngrid1.Width = 425;\ngrid1.Height = 165;"
    },
    {
        "page_index": 26,
        "chunk_index": 20,
        "text": "// Define the Columns.\ncolDef1 = new ColumnDefinition();\ncolDef1.Width = new GridLength(1, GridUnitType.Auto);\ncolDef2 = new ColumnDefinition();\ncolDef2.Width = new GridLength(1, GridUnitType.Star);\ncolDef3 = new ColumnDefinition();\ncolDef3.Width = new GridLength(1, GridUnitType.Star);\ncolDef4 = new ColumnDefinition();\ncolDef4.Width = new GridLength(1, GridUnitType.Star);\ncolDef5 = new ColumnDefinition();\ncolDef5.Width = new GridLength(1, GridUnitType.Star);"
    },
    {
        "page_index": 26,
        "chunk_index": 21,
        "text": "grid1.ColumnDefinitions.Add(colDef1);\ngrid1.ColumnDefinitions.Add(colDef2);\ngrid1.ColumnDefinitions.Add(colDef3);\ngrid1.ColumnDefinitions.Add(colDef4);\ngrid1.ColumnDefinitions.Add(colDef5);"
    },
    {
        "page_index": 26,
        "chunk_index": 22,
        "text": "// Define the Rows.\nrowDef1 = new RowDefinition();\nrowDef1.Height = new GridLength(1, GridUnitType.Auto);\nrowDef2 = new RowDefinition();\nrowDef2.Height = new GridLength(1, GridUnitType.Auto);\nrowDef3 = new RowDefinition();\nrowDef3.Height = new GridLength(1, GridUnitType.Star);\nrowDef4 = new RowDefinition();\nrowDef4.Height = new GridLength(1, GridUnitType.Auto);\ngrid1.RowDefinitions.Add(rowDef1);\ngrid1.RowDefinitions.Add(rowDef2);\ngrid1.RowDefinitions.Add(rowDef3);"
    },
    {
        "page_index": 26,
        "chunk_index": 23,
        "text": "grid1.RowDefinitions.Add(rowDef3);\ngrid1.RowDefinitions.Add(rowDef4);"
    },
    {
        "page_index": 26,
        "chunk_index": 24,
        "text": "// Add the Image.\nimg1 = new Image();\nimg1.Source = new System.Windows.Media.Imaging.BitmapImage(new Uri(&quot;runicon.png&quot;, UriKind.Relative));\nGrid.SetRow(img1, 0);\nGrid.SetColumn(img1, 0);"
    },
    {
        "page_index": 26,
        "chunk_index": 25,
        "text": "// Add the main application dialog.\ntxt1 = new TextBlock();\ntxt1.Text = &quot;Type the name of a program, folder, document, or Internet resource, and Windows will open it for you.&quot;;\ntxt1.TextWrapping = TextWrapping.Wrap;\nGrid.SetColumnSpan(txt1, 4);\nGrid.SetRow(txt1, 0);\nGrid.SetColumn(txt1, 1);\n\n// Add the second text cell to the Grid.\ntxt2 = new TextBlock();\ntxt2.Text = &quot;Open:&quot;;\nGrid.SetRow(txt2, 1);\nGrid.SetColumn(txt2, 0);"
    },
    {
        "page_index": 26,
        "chunk_index": 26,
        "text": "// Add the TextBox control.\ntb1 = new TextBox();\nGrid.SetRow(tb1, 1);\nGrid.SetColumn(tb1, 1);\nGrid.SetColumnSpan(tb1, 5);"
    },
    {
        "page_index": 26,
        "chunk_index": 27,
        "text": "// Add the buttons.\nbutton1 = new Button();\nbutton2 = new Button();\nbutton3 = new Button();\nbutton1.Content = &quot;OK&quot;;\nbutton2.Content = &quot;Cancel&quot;;\nbutton3.Content = &quot;Browse ...&quot;;\nGrid.SetRow(button1, 3);\nGrid.SetColumn(button1, 2);\nbutton1.Margin = new Thickness(10, 0, 10, 15);\nbutton2.Margin = new Thickness(10, 0, 10, 15);\nbutton3.Margin = new Thickness(10, 0, 10, 15);\nGrid.SetRow(button2, 3);\nGrid.SetColumn(button2, 3);\nGrid.SetRow(button3, 3);"
    },
    {
        "page_index": 26,
        "chunk_index": 28,
        "text": "Grid.SetRow(button3, 3);\nGrid.SetColumn(button3, 4);"
    },
    {
        "page_index": 26,
        "chunk_index": 29,
        "text": "grid1.Children.Add(img1);\ngrid1.Children.Add(txt1);\ngrid1.Children.Add(txt2);\ngrid1.Children.Add(tb1);\ngrid1.Children.Add(button1);\ngrid1.Children.Add(button2);\ngrid1.Children.Add(button3);"
    },
    {
        "page_index": 26,
        "chunk_index": 30,
        "text": "mainWindow.Content = grid1;\n\">\n<span class=\"hljs-comment\">// Create the Grid.</span>\ngrid1 = <span class=\"hljs-keyword\">new</span> Grid ();\ngrid1.Background = Brushes.Gainsboro;\ngrid1.HorizontalAlignment = HorizontalAlignment.Left;\ngrid1.VerticalAlignment = VerticalAlignment.Top;\ngrid1.ShowGridLines = <span class=\"hljs-literal\">true</span>;\ngrid1.Width = <span class=\"hljs-number\">425</span>;\ngrid1.Height = <span class=\"hljs-number\">165</span>;"
    },
    {
        "page_index": 26,
        "chunk_index": 31,
        "text": "<span class=\"hljs-comment\">// Define the Columns.</span>\ncolDef1 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\ncolDef1.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Auto);\ncolDef2 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\ncolDef2.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Star);"
    },
    {
        "page_index": 26,
        "chunk_index": 32,
        "text": "colDef3 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\ncolDef3.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Star);\ncolDef4 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();\ncolDef4.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Star);\ncolDef5 = <span class=\"hljs-keyword\">new</span> ColumnDefinition();"
    },
    {
        "page_index": 26,
        "chunk_index": 33,
        "text": "colDef5.Width = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Star);\ngrid1.ColumnDefinitions.Add(colDef1);\ngrid1.ColumnDefinitions.Add(colDef2);\ngrid1.ColumnDefinitions.Add(colDef3);\ngrid1.ColumnDefinitions.Add(colDef4);\ngrid1.ColumnDefinitions.Add(colDef5);"
    },
    {
        "page_index": 26,
        "chunk_index": 34,
        "text": "<span class=\"hljs-comment\">// Define the Rows.</span>\nrowDef1 = <span class=\"hljs-keyword\">new</span> RowDefinition();\nrowDef1.Height = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Auto);\nrowDef2 = <span class=\"hljs-keyword\">new</span> RowDefinition();\nrowDef2.Height = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Auto);\nrowDef3 = <span class=\"hljs-keyword\">new</span> RowDefinition();"
    },
    {
        "page_index": 26,
        "chunk_index": 35,
        "text": "rowDef3.Height = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Star);\nrowDef4 = <span class=\"hljs-keyword\">new</span> RowDefinition();\nrowDef4.Height = <span class=\"hljs-keyword\">new</span> GridLength(<span class=\"hljs-number\">1</span>, GridUnitType.Auto);\ngrid1.RowDefinitions.Add(rowDef1);\ngrid1.RowDefinitions.Add(rowDef2);\ngrid1.RowDefinitions.Add(rowDef3);\ngrid1.RowDefinitions.Add(rowDef4);"
    },
    {
        "page_index": 26,
        "chunk_index": 36,
        "text": "<span class=\"hljs-comment\">// Add the Image.</span>\nimg1 = <span class=\"hljs-keyword\">new</span> Image();\nimg1.Source = <span class=\"hljs-keyword\">new</span> System.Windows.Media.Imaging.BitmapImage(<span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"runicon.png\"</span>, UriKind.Relative));\nGrid.SetRow(img1, <span class=\"hljs-number\">0</span>);\nGrid.SetColumn(img1, <span class=\"hljs-number\">0</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 37,
        "text": "<span class=\"hljs-comment\">// Add the main application dialog.</span>\ntxt1 = <span class=\"hljs-keyword\">new</span> TextBlock();\ntxt1.Text = <span class=\"hljs-string\">\"Type the name of a program, folder, document, or Internet resource, and Windows will open it for you.\"</span>;\ntxt1.TextWrapping = TextWrapping.Wrap;\nGrid.SetColumnSpan(txt1, <span class=\"hljs-number\">4</span>);\nGrid.SetRow(txt1, <span class=\"hljs-number\">0</span>);\nGrid.SetColumn(txt1, <span class=\"hljs-number\">1</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 38,
        "text": "<span class=\"hljs-comment\">// Add the second text cell to the Grid.</span>\ntxt2 = <span class=\"hljs-keyword\">new</span> TextBlock();\ntxt2.Text = <span class=\"hljs-string\">\"Open:\"</span>;\nGrid.SetRow(txt2, <span class=\"hljs-number\">1</span>);\nGrid.SetColumn(txt2, <span class=\"hljs-number\">0</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 39,
        "text": "<span class=\"hljs-comment\">// Add the TextBox control.</span>\ntb1 = <span class=\"hljs-keyword\">new</span> TextBox();\nGrid.SetRow(tb1, <span class=\"hljs-number\">1</span>);\nGrid.SetColumn(tb1, <span class=\"hljs-number\">1</span>);\nGrid.SetColumnSpan(tb1, <span class=\"hljs-number\">5</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 40,
        "text": "<span class=\"hljs-comment\">// Add the buttons.</span>\nbutton1 = <span class=\"hljs-keyword\">new</span> Button();\nbutton2 = <span class=\"hljs-keyword\">new</span> Button();\nbutton3 = <span class=\"hljs-keyword\">new</span> Button();\nbutton1.Content = <span class=\"hljs-string\">\"OK\"</span>;\nbutton2.Content = <span class=\"hljs-string\">\"Cancel\"</span>;\nbutton3.Content = <span class=\"hljs-string\">\"Browse ...\"</span>;\nGrid.SetRow(button1, <span class=\"hljs-number\">3</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 41,
        "text": "Grid.SetColumn(button1, <span class=\"hljs-number\">2</span>);\nbutton1.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>);\nbutton2.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 42,
        "text": "button3.Margin = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>);\nGrid.SetRow(button2, <span class=\"hljs-number\">3</span>);\nGrid.SetColumn(button2, <span class=\"hljs-number\">3</span>);\nGrid.SetRow(button3, <span class=\"hljs-number\">3</span>);\nGrid.SetColumn(button3, <span class=\"hljs-number\">4</span>);"
    },
    {
        "page_index": 26,
        "chunk_index": 43,
        "text": "grid1.Children.Add(img1);\ngrid1.Children.Add(txt1);\ngrid1.Children.Add(txt2);\ngrid1.Children.Add(tb1);\ngrid1.Children.Add(button1);\ngrid1.Children.Add(button2);\ngrid1.Children.Add(button3);"
    },
    {
        "page_index": 26,
        "chunk_index": 44,
        "text": "mainWindow.Content = grid1;\n</code></pre>\n<p>The compiled application yields a new UI that looks like this.</p>\n<p><img title=\"avalon_run_dialog\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/media/avalon-run-dialog.png\" alt=\"A typical Grid Element.\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 27,
        "chunk_index": 0,
        "text": "<h3 id=\"dockpanel\">DockPanel</h3>"
    },
    {
        "page_index": 27,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;element uses the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel.dock\" data-linktype=\"absolute-path\">DockPanel.Dock</a>&nbsp;attached property as set in child content elements to position content along the edges of a container. When&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 27,
        "chunk_index": 2,
        "text": "edges of a container. When&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel.dock\" data-linktype=\"absolute-path\">DockPanel.Dock</a>&nbsp;is set to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dock#System_Windows_Controls_Dock_Top\" data-linktype=\"absolute-path\">Top</a>&nbsp;or&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 27,
        "chunk_index": 3,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dock#System_Windows_Controls_Dock_Bottom\" data-linktype=\"absolute-path\">Bottom</a>, it positions child elements above or below each other. When&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel.dock\" data-linktype=\"absolute-path\">DockPanel.Dock</a>&nbsp;is set to&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 27,
        "chunk_index": 4,
        "text": "set to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dock#System_Windows_Controls_Dock_Left\" data-linktype=\"absolute-path\">Left</a>&nbsp;or&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dock#System_Windows_Controls_Dock_Right\" data-linktype=\"absolute-path\">Right</a>, it positions child elements to the left or right of each other. The&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 27,
        "chunk_index": 5,
        "text": "or right of each other. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel.lastchildfill\" data-linktype=\"absolute-path\">LastChildFill</a>&nbsp;property determines the position of the final element added as a child of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>.</p>"
    },
    {
        "page_index": 27,
        "chunk_index": 6,
        "text": "<p>You can use&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;to position a group of related controls, such as a set of buttons. Alternately, you can use it to create a \"paned\" UI, similar to that found in Microsoft Outlook.</p>\n<h4 id=\"sizing-to-content\">Sizing to Content</h4>"
    },
    {
        "page_index": 27,
        "chunk_index": 7,
        "text": "<p>If its&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.height\" data-linktype=\"absolute-path\">Height</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.frameworkelement.width\" data-linktype=\"absolute-path\">Width</a>&nbsp;properties are not specified,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\""
    },
    {
        "page_index": 27,
        "chunk_index": 8,
        "text": "data-linktype=\"absolute-path\">DockPanel</a>&nbsp;sizes to its content. The size can increase or decrease to accommodate the size of its child elements. However, when these properties are specified and there is no longer room for the next specified child element,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;does not display that child element or subsequent child elements and does not"
    },
    {
        "page_index": 27,
        "chunk_index": 9,
        "text": "element or subsequent child elements and does not measure subsequent child elements.</p>"
    },
    {
        "page_index": 27,
        "chunk_index": 10,
        "text": "<h4 id=\"lastchildfill\">LastChildFill</h4>"
    },
    {
        "page_index": 27,
        "chunk_index": 11,
        "text": "<p>By default, the last child of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;element will \"fill\" the remaining, unallocated space. If this behavior is not desired, set the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel.lastchildfill\" data-linktype=\"absolute-path\">LastChildFill</a>&nbsp;property to&nbsp;<code>false</code>.</p>"
    },
    {
        "page_index": 27,
        "chunk_index": 12,
        "text": "<h4 id=\"defining-and-using-a-dockpanel\">Defining and Using a DockPanel</h4>"
    },
    {
        "page_index": 27,
        "chunk_index": 13,
        "text": "<p>The following example demonstrates how to partition space using a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>. Five&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.border\" data-linktype=\"absolute-path\">Border</a>&nbsp;elements are added as children of a parent&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 27,
        "chunk_index": 14,
        "text": "as children of a parent&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>. Each uses a different positioning property of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;to partition space. The final element \"fills\" the remaining, unallocated space.</p>"
    },
    {
        "page_index": 27,
        "chunk_index": 15,
        "text": "<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"\n// Create the application's main window\nmainWindow = new Window ();\nmainWindow.Title = &quot;DockPanel Sample&quot;;"
    },
    {
        "page_index": 27,
        "chunk_index": 16,
        "text": "// Create the DockPanel\nDockPanel myDockPanel = new DockPanel();\nmyDockPanel.LastChildFill = true;"
    },
    {
        "page_index": 27,
        "chunk_index": 17,
        "text": "// Define the child content\nBorder myBorder1 = new Border();\nmyBorder1.Height = 25;\nmyBorder1.Background = Brushes.SkyBlue;\nmyBorder1.BorderBrush = Brushes.Black;\nmyBorder1.BorderThickness = new Thickness(1);\nDockPanel.SetDock(myBorder1, Dock.Top);\nTextBlock myTextBlock1 = new TextBlock();\nmyTextBlock1.Foreground = Brushes.Black;\nmyTextBlock1.Text = &quot;Dock = Top&quot;;\nmyBorder1.Child = myTextBlock1;"
    },
    {
        "page_index": 27,
        "chunk_index": 18,
        "text": "Border myBorder2 = new Border();\nmyBorder2.Height = 25;\nmyBorder2.Background = Brushes.SkyBlue;\nmyBorder2.BorderBrush = Brushes.Black;\nmyBorder2.BorderThickness = new Thickness(1);\nDockPanel.SetDock(myBorder2, Dock.Top);\nTextBlock myTextBlock2 = new TextBlock();\nmyTextBlock2.Foreground = Brushes.Black;\nmyTextBlock2.Text = &quot;Dock = Top&quot;;\nmyBorder2.Child = myTextBlock2;"
    },
    {
        "page_index": 27,
        "chunk_index": 19,
        "text": "Border myBorder3 = new Border();\nmyBorder3.Height = 25;\nmyBorder3.Background = Brushes.LemonChiffon;\nmyBorder3.BorderBrush = Brushes.Black;\nmyBorder3.BorderThickness = new Thickness(1);\nDockPanel.SetDock(myBorder3, Dock.Bottom);\nTextBlock myTextBlock3 = new TextBlock();\nmyTextBlock3.Foreground = Brushes.Black;\nmyTextBlock3.Text = &quot;Dock = Bottom&quot;;\nmyBorder3.Child = myTextBlock3;"
    },
    {
        "page_index": 27,
        "chunk_index": 20,
        "text": "Border myBorder4 = new Border();\nmyBorder4.Width = 200;\nmyBorder4.Background = Brushes.PaleGreen;\nmyBorder4.BorderBrush = Brushes.Black;\nmyBorder4.BorderThickness = new Thickness(1);\nDockPanel.SetDock(myBorder4, Dock.Left);\nTextBlock myTextBlock4 = new TextBlock();\nmyTextBlock4.Foreground = Brushes.Black;\nmyTextBlock4.Text = &quot;Dock = Left&quot;;\nmyBorder4.Child = myTextBlock4;"
    },
    {
        "page_index": 27,
        "chunk_index": 21,
        "text": "Border myBorder5 = new Border();\nmyBorder5.Background = Brushes.White;\nmyBorder5.BorderBrush = Brushes.Black;\nmyBorder5.BorderThickness = new Thickness(1);\nTextBlock myTextBlock5 = new TextBlock();\nmyTextBlock5.Foreground = Brushes.Black;\nmyTextBlock5.Text = &quot;This content will Fill the remaining space&quot;;\nmyBorder5.Child = myTextBlock5;"
    },
    {
        "page_index": 27,
        "chunk_index": 22,
        "text": "// Add child elements to the DockPanel Children collection\nmyDockPanel.Children.Add(myBorder1);\nmyDockPanel.Children.Add(myBorder2);\nmyDockPanel.Children.Add(myBorder3);\nmyDockPanel.Children.Add(myBorder4);\nmyDockPanel.Children.Add(myBorder5);\n           \n// Add the parent Canvas as the Content of the Window Object\nmainWindow.Content = myDockPanel;\nmainWindow.Show ();"
    },
    {
        "page_index": 27,
        "chunk_index": 23,
        "text": "\">\n<span class=\"hljs-comment\">// Create the application's main window</span>\nmainWindow = <span class=\"hljs-keyword\">new</span> Window ();\nmainWindow.Title = <span class=\"hljs-string\">\"DockPanel Sample\"</span>;\n\n<span class=\"hljs-comment\">// Create the DockPanel</span>\nDockPanel myDockPanel = <span class=\"hljs-keyword\">new</span> DockPanel();\nmyDockPanel.LastChildFill = <span class=\"hljs-literal\">true</span>;"
    },
    {
        "page_index": 27,
        "chunk_index": 24,
        "text": "<span class=\"hljs-comment\">// Define the child content</span>\nBorder myBorder1 = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder1.Height = <span class=\"hljs-number\">25</span>;\nmyBorder1.Background = Brushes.SkyBlue;\nmyBorder1.BorderBrush = Brushes.Black;\nmyBorder1.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">1</span>);\nDockPanel.SetDock(myBorder1, Dock.Top);\nTextBlock myTextBlock1 = <span class=\"hljs-keyword\">new</span> TextBlock();"
    },
    {
        "page_index": 27,
        "chunk_index": 25,
        "text": "myTextBlock1.Foreground = Brushes.Black;\nmyTextBlock1.Text = <span class=\"hljs-string\">\"Dock = Top\"</span>;\nmyBorder1.Child = myTextBlock1;"
    },
    {
        "page_index": 27,
        "chunk_index": 26,
        "text": "Border myBorder2 = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder2.Height = <span class=\"hljs-number\">25</span>;\nmyBorder2.Background = Brushes.SkyBlue;\nmyBorder2.BorderBrush = Brushes.Black;\nmyBorder2.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">1</span>);\nDockPanel.SetDock(myBorder2, Dock.Top);\nTextBlock myTextBlock2 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock2.Foreground = Brushes.Black;"
    },
    {
        "page_index": 27,
        "chunk_index": 27,
        "text": "myTextBlock2.Foreground = Brushes.Black;\nmyTextBlock2.Text = <span class=\"hljs-string\">\"Dock = Top\"</span>;\nmyBorder2.Child = myTextBlock2;"
    },
    {
        "page_index": 27,
        "chunk_index": 28,
        "text": "Border myBorder3 = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder3.Height = <span class=\"hljs-number\">25</span>;\nmyBorder3.Background = Brushes.LemonChiffon;\nmyBorder3.BorderBrush = Brushes.Black;\nmyBorder3.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">1</span>);\nDockPanel.SetDock(myBorder3, Dock.Bottom);\nTextBlock myTextBlock3 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock3.Foreground = Brushes.Black;"
    },
    {
        "page_index": 27,
        "chunk_index": 29,
        "text": "myTextBlock3.Foreground = Brushes.Black;\nmyTextBlock3.Text = <span class=\"hljs-string\">\"Dock = Bottom\"</span>;\nmyBorder3.Child = myTextBlock3;"
    },
    {
        "page_index": 27,
        "chunk_index": 30,
        "text": "Border myBorder4 = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder4.Width = <span class=\"hljs-number\">200</span>;\nmyBorder4.Background = Brushes.PaleGreen;\nmyBorder4.BorderBrush = Brushes.Black;\nmyBorder4.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">1</span>);\nDockPanel.SetDock(myBorder4, Dock.Left);\nTextBlock myTextBlock4 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock4.Foreground = Brushes.Black;"
    },
    {
        "page_index": 27,
        "chunk_index": 31,
        "text": "myTextBlock4.Foreground = Brushes.Black;\nmyTextBlock4.Text = <span class=\"hljs-string\">\"Dock = Left\"</span>;\nmyBorder4.Child = myTextBlock4;"
    },
    {
        "page_index": 27,
        "chunk_index": 32,
        "text": "Border myBorder5 = <span class=\"hljs-keyword\">new</span> Border();\nmyBorder5.Background = Brushes.White;\nmyBorder5.BorderBrush = Brushes.Black;\nmyBorder5.BorderThickness = <span class=\"hljs-keyword\">new</span> Thickness(<span class=\"hljs-number\">1</span>);\nTextBlock myTextBlock5 = <span class=\"hljs-keyword\">new</span> TextBlock();\nmyTextBlock5.Foreground = Brushes.Black;\nmyTextBlock5.Text = <span class=\"hljs-string\">\"This content will Fill the remaining space\"</span>;"
    },
    {
        "page_index": 27,
        "chunk_index": 33,
        "text": "myBorder5.Child = myTextBlock5;"
    },
    {
        "page_index": 27,
        "chunk_index": 34,
        "text": "<span class=\"hljs-comment\">// Add child elements to the DockPanel Children collection</span>\nmyDockPanel.Children.Add(myBorder1);\nmyDockPanel.Children.Add(myBorder2);\nmyDockPanel.Children.Add(myBorder3);\nmyDockPanel.Children.Add(myBorder4);\nmyDockPanel.Children.Add(myBorder5);\n           \n<span class=\"hljs-comment\">// Add the parent Canvas as the Content of the Window Object</span>\nmainWindow.Content = myDockPanel;\nmainWindow.Show ();"
    },
    {
        "page_index": 27,
        "chunk_index": 35,
        "text": "</code></pre>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">XAML</span></div>"
    },
    {
        "page_index": 27,
        "chunk_index": 36,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Page xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; WindowTitle=&quot;DockPanel Sample&quot;>\n  <DockPanel LastChildFill=&quot;True&quot;>"
    },
    {
        "page_index": 27,
        "chunk_index": 37,
        "text": "<DockPanel LastChildFill=&quot;True&quot;>\n    <Border Height=&quot;25&quot; Background=&quot;SkyBlue&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;1&quot; DockPanel.Dock=&quot;Top&quot;>\n      <TextBlock Foreground=&quot;Black&quot;>Dock = &quot;Top&quot;</TextBlock>\n    </Border>\n    <Border Height=&quot;25&quot; Background=&quot;SkyBlue&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;1&quot; DockPanel.Dock=&quot;Top&quot;>"
    },
    {
        "page_index": 27,
        "chunk_index": 38,
        "text": "<TextBlock Foreground=&quot;Black&quot;>Dock = &quot;Top&quot;</TextBlock>\n    </Border>\n    <Border Height=&quot;25&quot; Background=&quot;LemonChiffon&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;1&quot; DockPanel.Dock=&quot;Bottom&quot;>\n      <TextBlock Foreground=&quot;Black&quot;>Dock = &quot;Bottom&quot;</TextBlock>\n    </Border>"
    },
    {
        "page_index": 27,
        "chunk_index": 39,
        "text": "</Border>\n    <Border Width=&quot;200&quot; Background=&quot;PaleGreen&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;1&quot; DockPanel.Dock=&quot;Left&quot;>\n      <TextBlock Foreground=&quot;Black&quot;>Dock = &quot;Left&quot;</TextBlock>\n    </Border>\n    <Border Background=&quot;White&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;1&quot;>\n      <TextBlock Foreground=&quot;Black&quot;>This content will &quot;Fill&quot; the remaining space</TextBlock>\n    </Border>"
    },
    {
        "page_index": 27,
        "chunk_index": 40,
        "text": "</Border>\n  </DockPanel>\n</Page>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span> <span class=\"hljs-attr\">WindowTitle</span>=<span class=\"hljs-string\">\"DockPanel Sample\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 41,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DockPanel</span> <span class=\"hljs-attr\">LastChildFill</span>=<span class=\"hljs-string\">\"True\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 42,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"25\"</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"SkyBlue\"</span> <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">DockPanel.Dock</span>=<span class=\"hljs-string\">\"Top\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 43,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">Foreground</span>=<span class=\"hljs-string\">\"Black\"</span>&gt;</span>Dock = \"Top\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 44,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"25\"</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"SkyBlue\"</span> <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">DockPanel.Dock</span>=<span class=\"hljs-string\">\"Top\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 45,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">Foreground</span>=<span class=\"hljs-string\">\"Black\"</span>&gt;</span>Dock = \"Top\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 46,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"25\"</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"LemonChiffon\"</span> <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">DockPanel.Dock</span>=<span"
    },
    {
        "page_index": 27,
        "chunk_index": 47,
        "text": "class=\"hljs-attr\">DockPanel.Dock</span>=<span class=\"hljs-string\">\"Bottom\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 48,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">Foreground</span>=<span class=\"hljs-string\">\"Black\"</span>&gt;</span>Dock = \"Bottom\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 49,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"200\"</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"PaleGreen\"</span> <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"1\"</span> <span class=\"hljs-attr\">DockPanel.Dock</span>=<span class=\"hljs-string\">\"Left\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 50,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">Foreground</span>=<span class=\"hljs-string\">\"Black\"</span>&gt;</span>Dock = \"Left\"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 51,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Border</span> <span class=\"hljs-attr\">Background</span>=<span class=\"hljs-string\">\"White\"</span> <span class=\"hljs-attr\">BorderBrush</span>=<span class=\"hljs-string\">\"Black\"</span> <span class=\"hljs-attr\">BorderThickness</span>=<span class=\"hljs-string\">\"1\"</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 52,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TextBlock</span> <span class=\"hljs-attr\">Foreground</span>=<span class=\"hljs-string\">\"Black\"</span>&gt;</span>This content will \"Fill\" the remaining space<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TextBlock</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Border</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DockPanel</span>&gt;</span>"
    },
    {
        "page_index": 27,
        "chunk_index": 53,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>\n</code></pre>\n<p>The compiled application yields a new UI that looks like this.</p>\n<p><img title=\"panel_intro_dockpanel\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/media/panel-intro-dockpanel.png\" alt=\"A typical DockPanel scenario.\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 28,
        "chunk_index": 0,
        "text": "<h3 id=\"stackpanel\">StackPanel</h3>"
    },
    {
        "page_index": 28,
        "chunk_index": 1,
        "text": "<p>A&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>&nbsp;enables you to \"stack\" elements in an assigned direction. The default stack direction is vertical. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel.orientation\" data-linktype=\"absolute-path\">Orientation</a>&nbsp;property can be used to control content flow.</p>"
    },
    {
        "page_index": 28,
        "chunk_index": 2,
        "text": "<h4 id=\"stackpanel-vs-dockpanel\">StackPanel vs. DockPanel</h4>"
    },
    {
        "page_index": 28,
        "chunk_index": 3,
        "text": "<p>Although&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;can also \"stack\" child elements,&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\""
    },
    {
        "page_index": 28,
        "chunk_index": 4,
        "text": "data-linktype=\"absolute-path\">StackPanel</a>&nbsp;do not produce analogous results in some usage scenarios. For example, the order of child elements can affect their size in a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;but not in a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>."
    },
    {
        "page_index": 28,
        "chunk_index": 5,
        "text": "data-linktype=\"absolute-path\">StackPanel</a>. This is because&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>&nbsp;measures in the direction of stacking at&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.double.positiveinfinity\" data-linktype=\"absolute-path\">PositiveInfinity</a>, whereas&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 28,
        "chunk_index": 6,
        "text": "whereas&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.dockpanel\" data-linktype=\"absolute-path\">DockPanel</a>&nbsp;measures only the available size.</p>"
    },
    {
        "page_index": 28,
        "chunk_index": 7,
        "text": "<p>The following example demonstrates this key difference.</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"\n// Create the application's main window\nmainWindow = new Window ();\nmainWindow.Title = &quot;StackPanel vs. DockPanel&quot;;"
    },
    {
        "page_index": 28,
        "chunk_index": 8,
        "text": "// Add root Grid\nmyGrid = new Grid();\nmyGrid.Width = 175;\nmyGrid.Height = 150;\nRowDefinition myRowDef1 = new RowDefinition();\nRowDefinition myRowDef2 = new RowDefinition();\nmyGrid.RowDefinitions.Add(myRowDef1);\nmyGrid.RowDefinitions.Add(myRowDef2);\n\n// Define the DockPanel\nmyDockPanel = new DockPanel();\nGrid.SetRow(myDockPanel, 0);"
    },
    {
        "page_index": 28,
        "chunk_index": 9,
        "text": "//Define an Image and Source\nImage myImage = new Image();\nBitmapImage bi = new BitmapImage();\nbi.BeginInit();\nbi.UriSource = new Uri(&quot;smiley_stackpanel.png&quot;, UriKind.Relative);\nbi.EndInit();\nmyImage.Source = bi;\n\nImage myImage2 = new Image();\nBitmapImage bi2 = new BitmapImage();\nbi2.BeginInit();\nbi2.UriSource = new Uri(&quot;smiley_stackpanel.png&quot;, UriKind.Relative);\nbi2.EndInit();\nmyImage2.Source = bi2;"
    },
    {
        "page_index": 28,
        "chunk_index": 10,
        "text": "Image myImage3 = new Image();\nBitmapImage bi3 = new BitmapImage();\nbi3.BeginInit();\nbi3.UriSource = new Uri(&quot;smiley_stackpanel.PNG&quot;, UriKind.Relative);\nbi3.EndInit();\nmyImage3.Stretch = Stretch.Fill;\nmyImage3.Source = bi3;\n\n// Add the images to the parent DockPanel\nmyDockPanel.Children.Add(myImage);\nmyDockPanel.Children.Add(myImage2);\nmyDockPanel.Children.Add(myImage3);"
    },
    {
        "page_index": 28,
        "chunk_index": 11,
        "text": "//Define a StackPanel\nmyStackPanel = new StackPanel();\nmyStackPanel.Orientation = Orientation.Horizontal;\nGrid.SetRow(myStackPanel, 1);\n\nImage myImage4 = new Image();\nBitmapImage bi4 = new BitmapImage();\nbi4.BeginInit();\nbi4.UriSource = new Uri(&quot;smiley_stackpanel.png&quot;, UriKind.Relative);\nbi4.EndInit();\nmyImage4.Source = bi4;"
    },
    {
        "page_index": 28,
        "chunk_index": 12,
        "text": "Image myImage5 = new Image();\nBitmapImage bi5 = new BitmapImage();\nbi5.BeginInit();\nbi5.UriSource = new Uri(&quot;smiley_stackpanel.png&quot;, UriKind.Relative);\nbi5.EndInit();\nmyImage5.Source = bi5;\n\nImage myImage6 = new Image();\nBitmapImage bi6 = new BitmapImage();\nbi6.BeginInit();\nbi6.UriSource = new Uri(&quot;smiley_stackpanel.PNG&quot;, UriKind.Relative);\nbi6.EndInit();\nmyImage6.Stretch = Stretch.Fill;\nmyImage6.Source = bi6;"
    },
    {
        "page_index": 28,
        "chunk_index": 13,
        "text": "// Add the images to the parent StackPanel\nmyStackPanel.Children.Add(myImage4);\nmyStackPanel.Children.Add(myImage5);\nmyStackPanel.Children.Add(myImage6);\n\n// Add the layout panels as children of the Grid\nmyGrid.Children.Add(myDockPanel);\nmyGrid.Children.Add(myStackPanel);\n\n// Add the Grid as the Content of the Parent Window Object\nmainWindow.Content = myGrid;\nmainWindow.Show ();"
    },
    {
        "page_index": 28,
        "chunk_index": 14,
        "text": "\">\n<span class=\"hljs-comment\">// Create the application's main window</span>\nmainWindow = <span class=\"hljs-keyword\">new</span> Window ();\nmainWindow.Title = <span class=\"hljs-string\">\"StackPanel vs. DockPanel\"</span>;"
    },
    {
        "page_index": 28,
        "chunk_index": 15,
        "text": "<span class=\"hljs-comment\">// Add root Grid</span>\nmyGrid = <span class=\"hljs-keyword\">new</span> Grid();\nmyGrid.Width = <span class=\"hljs-number\">175</span>;\nmyGrid.Height = <span class=\"hljs-number\">150</span>;\nRowDefinition myRowDef1 = <span class=\"hljs-keyword\">new</span> RowDefinition();\nRowDefinition myRowDef2 = <span class=\"hljs-keyword\">new</span> RowDefinition();\nmyGrid.RowDefinitions.Add(myRowDef1);\nmyGrid.RowDefinitions.Add(myRowDef2);"
    },
    {
        "page_index": 28,
        "chunk_index": 16,
        "text": "<span class=\"hljs-comment\">// Define the DockPanel</span>\nmyDockPanel = <span class=\"hljs-keyword\">new</span> DockPanel();\nGrid.SetRow(myDockPanel, <span class=\"hljs-number\">0</span>);"
    },
    {
        "page_index": 28,
        "chunk_index": 17,
        "text": "<span class=\"hljs-comment\">//Define an Image and Source</span>\nImage myImage = <span class=\"hljs-keyword\">new</span> Image();\nBitmapImage bi = <span class=\"hljs-keyword\">new</span> BitmapImage();\nbi.BeginInit();\nbi.UriSource = <span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span>, UriKind.Relative);\nbi.EndInit();\nmyImage.Source = bi;"
    },
    {
        "page_index": 28,
        "chunk_index": 18,
        "text": "Image myImage2 = <span class=\"hljs-keyword\">new</span> Image();\nBitmapImage bi2 = <span class=\"hljs-keyword\">new</span> BitmapImage();\nbi2.BeginInit();\nbi2.UriSource = <span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span>, UriKind.Relative);\nbi2.EndInit();\nmyImage2.Source = bi2;"
    },
    {
        "page_index": 28,
        "chunk_index": 19,
        "text": "Image myImage3 = <span class=\"hljs-keyword\">new</span> Image();\nBitmapImage bi3 = <span class=\"hljs-keyword\">new</span> BitmapImage();\nbi3.BeginInit();\nbi3.UriSource = <span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"smiley_stackpanel.PNG\"</span>, UriKind.Relative);\nbi3.EndInit();\nmyImage3.Stretch = Stretch.Fill;\nmyImage3.Source = bi3;"
    },
    {
        "page_index": 28,
        "chunk_index": 20,
        "text": "<span class=\"hljs-comment\">// Add the images to the parent DockPanel</span>\nmyDockPanel.Children.Add(myImage);\nmyDockPanel.Children.Add(myImage2);\nmyDockPanel.Children.Add(myImage3);\n\n<span class=\"hljs-comment\">//Define a StackPanel</span>\nmyStackPanel = <span class=\"hljs-keyword\">new</span> StackPanel();\nmyStackPanel.Orientation = Orientation.Horizontal;\nGrid.SetRow(myStackPanel, <span class=\"hljs-number\">1</span>);"
    },
    {
        "page_index": 28,
        "chunk_index": 21,
        "text": "Image myImage4 = <span class=\"hljs-keyword\">new</span> Image();\nBitmapImage bi4 = <span class=\"hljs-keyword\">new</span> BitmapImage();\nbi4.BeginInit();\nbi4.UriSource = <span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span>, UriKind.Relative);\nbi4.EndInit();\nmyImage4.Source = bi4;"
    },
    {
        "page_index": 28,
        "chunk_index": 22,
        "text": "Image myImage5 = <span class=\"hljs-keyword\">new</span> Image();\nBitmapImage bi5 = <span class=\"hljs-keyword\">new</span> BitmapImage();\nbi5.BeginInit();\nbi5.UriSource = <span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span>, UriKind.Relative);\nbi5.EndInit();\nmyImage5.Source = bi5;"
    },
    {
        "page_index": 28,
        "chunk_index": 23,
        "text": "Image myImage6 = <span class=\"hljs-keyword\">new</span> Image();\nBitmapImage bi6 = <span class=\"hljs-keyword\">new</span> BitmapImage();\nbi6.BeginInit();\nbi6.UriSource = <span class=\"hljs-keyword\">new</span> Uri(<span class=\"hljs-string\">\"smiley_stackpanel.PNG\"</span>, UriKind.Relative);\nbi6.EndInit();\nmyImage6.Stretch = Stretch.Fill;\nmyImage6.Source = bi6;"
    },
    {
        "page_index": 28,
        "chunk_index": 24,
        "text": "<span class=\"hljs-comment\">// Add the images to the parent StackPanel</span>\nmyStackPanel.Children.Add(myImage4);\nmyStackPanel.Children.Add(myImage5);\nmyStackPanel.Children.Add(myImage6);\n\n<span class=\"hljs-comment\">// Add the layout panels as children of the Grid</span>\nmyGrid.Children.Add(myDockPanel);\nmyGrid.Children.Add(myStackPanel);\n\n<span class=\"hljs-comment\">// Add the Grid as the Content of the Parent Window Object</span>\nmainWindow.Content = myGrid;\nmainWindow.Show ();"
    },
    {
        "page_index": 28,
        "chunk_index": 25,
        "text": "</code></pre>\n<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">XAML</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-xaml\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"<Page xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;"
    },
    {
        "page_index": 28,
        "chunk_index": 26,
        "text": "WindowTitle=&quot;StackPanel vs. DockPanel&quot;>\n  <Grid Width=&quot;175&quot; Height=&quot;150&quot;>\n    <Grid.ColumnDefinitions>\n      <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <Grid.RowDefinitions>\n      <RowDefinition />\n      <RowDefinition />\n    </Grid.RowDefinitions>\n    \n    <DockPanel Grid.Column=&quot;0&quot; Grid.Row=&quot;0&quot;>\n      <Image Source=&quot;smiley_stackpanel.png&quot; />\n      <Image Source=&quot;smiley_stackpanel.png&quot; />"
    },
    {
        "page_index": 28,
        "chunk_index": 27,
        "text": "<Image Source=&quot;smiley_stackpanel.png&quot; Stretch=&quot;Fill&quot;/>\n    </DockPanel>"
    },
    {
        "page_index": 28,
        "chunk_index": 28,
        "text": "<StackPanel Grid.Column=&quot;0&quot; Grid.Row=&quot;1&quot;  Orientation=&quot;Horizontal&quot;>\n      <Image Source=&quot;smiley_stackpanel.png&quot; />\n      <Image Source=&quot;smiley_stackpanel.png&quot; />\n      <Image Source=&quot;smiley_stackpanel.png&quot; Stretch=&quot;Fill&quot;/>\n    </StackPanel>\n    </Grid>\n</Page>"
    },
    {
        "page_index": 28,
        "chunk_index": 29,
        "text": "</StackPanel>\n    </Grid>\n</Page>\n\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Page</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"</span>\n      <span class=\"hljs-attr\">WindowTitle</span>=<span class=\"hljs-string\">\"StackPanel vs. DockPanel\"</span>&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 30,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid</span> <span class=\"hljs-attr\">Width</span>=<span class=\"hljs-string\">\"175\"</span> <span class=\"hljs-attr\">Height</span>=<span class=\"hljs-string\">\"150\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid.ColumnDefinitions</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ColumnDefinition</span> /&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 31,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid.ColumnDefinitions</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Grid.RowDefinitions</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">RowDefinition</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid.RowDefinitions</span>&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 32,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DockPanel</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"0\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">Source</span>=<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span> /&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 33,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">Source</span>=<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">Source</span>=<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span> <span class=\"hljs-attr\">Stretch</span>=<span class=\"hljs-string\">\"Fill\"</span>/&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 34,
        "text": "<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DockPanel</span>&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 35,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StackPanel</span> <span class=\"hljs-attr\">Grid.Column</span>=<span class=\"hljs-string\">\"0\"</span> <span class=\"hljs-attr\">Grid.Row</span>=<span class=\"hljs-string\">\"1\"</span>  <span class=\"hljs-attr\">Orientation</span>=<span class=\"hljs-string\">\"Horizontal\"</span>&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 36,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">Source</span>=<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">Source</span>=<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span> /&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 37,
        "text": "<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Image</span> <span class=\"hljs-attr\">Source</span>=<span class=\"hljs-string\">\"smiley_stackpanel.png\"</span> <span class=\"hljs-attr\">Stretch</span>=<span class=\"hljs-string\">\"Fill\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StackPanel</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Grid</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Page</span>&gt;</span>"
    },
    {
        "page_index": 28,
        "chunk_index": 38,
        "text": "</code></pre>\n<p>The difference in rendering behavior can be seen in this image.</p>\n<p><img title=\"layout_smiley_stackpanel\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/media/layout-smiley-stackpanel.png\" alt=\"Screenshot: StackPanel vs. DockPanel screenshot\" data-linktype=\"relative-path\" loading=\"lazy\"></p>\n<h4 id=\"defining-and-using-a-stackpanel\">Defining and Using a StackPanel</h4>"
    },
    {
        "page_index": 28,
        "chunk_index": 39,
        "text": "<p>The following example demonstrates how to use a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel\" data-linktype=\"absolute-path\">StackPanel</a>&nbsp;to create a set of vertically-positioned buttons. For horizontal positioning, set the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.stackpanel.orientation\" data-linktype=\"absolute-path\">Orientation</a>&nbsp;property to&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 28,
        "chunk_index": 40,
        "text": "to&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.windows.controls.orientation#System_Windows_Controls_Orientation_Horizontal\" data-linktype=\"absolute-path\">Horizontal</a>.</p>"
    },
    {
        "page_index": 28,
        "chunk_index": 41,
        "text": "<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"\n  // Create the application's main window\n  mainWindow = new Window ();\n  mainWindow.Title = &quot;StackPanel Sample&quot;;"
    },
    {
        "page_index": 28,
        "chunk_index": 42,
        "text": "// Define the StackPanel\n  myStackPanel = new StackPanel();\n  myStackPanel.HorizontalAlignment = HorizontalAlignment.Left;\n  myStackPanel.VerticalAlignment = VerticalAlignment.Top;\n\n  // Define child content\n  Button myButton1 = new Button();\n  myButton1.Content = &quot;Button 1&quot;;\n  Button myButton2 = new Button();\n  myButton2.Content = &quot;Button 2&quot;;\n  Button myButton3 = new Button();\n  myButton3.Content = &quot;Button 3&quot;;"
    },
    {
        "page_index": 28,
        "chunk_index": 43,
        "text": "// Add child elements to the parent StackPanel\n  myStackPanel.Children.Add(myButton1);\n  myStackPanel.Children.Add(myButton2);\n  myStackPanel.Children.Add(myButton3);           \n\n  // Add the StackPanel as the Content of the Parent Window Object\n  mainWindow.Content = myStackPanel;\n  mainWindow.Show ();"
    },
    {
        "page_index": 28,
        "chunk_index": 44,
        "text": "\">\n  <span class=\"hljs-comment\">// Create the application's main window</span>\n  mainWindow = <span class=\"hljs-keyword\">new</span> Window ();\n  mainWindow.Title = <span class=\"hljs-string\">\"StackPanel Sample\"</span>;\n\n  <span class=\"hljs-comment\">// Define the StackPanel</span>\n  myStackPanel = <span class=\"hljs-keyword\">new</span> StackPanel();\n  myStackPanel.HorizontalAlignment = HorizontalAlignment.Left;\n  myStackPanel.VerticalAlignment = VerticalAlignment.Top;"
    },
    {
        "page_index": 28,
        "chunk_index": 45,
        "text": "<span class=\"hljs-comment\">// Define child content</span>\n  Button myButton1 = <span class=\"hljs-keyword\">new</span> Button();\n  myButton1.Content = <span class=\"hljs-string\">\"Button 1\"</span>;\n  Button myButton2 = <span class=\"hljs-keyword\">new</span> Button();\n  myButton2.Content = <span class=\"hljs-string\">\"Button 2\"</span>;\n  Button myButton3 = <span class=\"hljs-keyword\">new</span> Button();\n  myButton3.Content = <span class=\"hljs-string\">\"Button 3\"</span>;"
    },
    {
        "page_index": 28,
        "chunk_index": 46,
        "text": "<span class=\"hljs-comment\">// Add child elements to the parent StackPanel</span>\n  myStackPanel.Children.Add(myButton1);\n  myStackPanel.Children.Add(myButton2);\n  myStackPanel.Children.Add(myButton3);           \n\n  <span class=\"hljs-comment\">// Add the StackPanel as the Content of the Parent Window Object</span>\n  mainWindow.Content = myStackPanel;\n  mainWindow.Show ();"
    },
    {
        "page_index": 28,
        "chunk_index": 47,
        "text": "</code></pre>\n<p>The compiled application yields a new UI that looks like this.</p>\n<p><img title=\"panel_intro_stackpanel\" src=\"https://docs.microsoft.com/en-us/dotnet/framework/wpf/controls/media/panel-intro-stackpanel.png\" alt=\"A typical StackPanel element.\" data-linktype=\"relative-path\" loading=\"lazy\"></p>"
    },
    {
        "page_index": 29,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"Controls.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026373/download?verifier=QpcCEUCfxDhPtd3UiA1um0xyTqYqhGPshNh0Q76r&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026373\" data-api-returntype=\"File\">Controls.pdf</a></p>\n<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: </strong><a class=\"instructure_file_link\" title=\"Example Set 1.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026338/download?verifier=IdOSBNuCZDOr68JRBn0TIE7s0Yqs6YtSZbz4vJlA&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026338\" data-api-returntype=\"File\">Example Set 1.zip</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/19eY9Zk5M7g\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 30,
        "chunk_index": 0,
        "text": "<h4>\n<i class=\"icon-outcomes\"></i>&nbsp;<strong>M4</strong> <strong>Objectives</strong>\n</h4>\n<p>After completing this week's work, you will be able to:</p>\n<ol>\n<li>Declare an enumeration type.</li>\n<li>Create and use an enumeration type.</li>\n<li>Declare a structure type.</li>\n<li>Create and use a structure type.</li>\n<li>Explain the differences in behavior between a structure and a class.</li>\n<li>Create and modify strings</li>\n<li>Explain the difference between a value type and a reference type</li>\n<li>Modify the way in which arguments are passed as method parameters by using the <em>ref</em> and <em>out</em> keywords&nbsp;</li>\n</ol>\n<p>&nbsp;</p>\n<h4>\n<i class=\"icon-info\"></i>&nbsp;<strong>M4 Activities&nbsp;</strong>\n</h4>\n<ol>\n<li>Watch Video Lectures</li>\n<li>Read Lecture Slides &amp; Programming Guide,</li>\n<li>Practice with Sample Code</li>\n<li>Complete M4 Quiz and Assignment</li>\n</ol>"
    },
    {
        "page_index": 31,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"Enum_Struct.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026325/download?verifier=FJ39y4vVc15qoMjFX0Zpw5LNj223ac6hiCtc4ngC&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026325\" data-api-returntype=\"File\">Enum_Struct.pdf</a></p>\n<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code:&nbsp;</strong>: <a class=\"instructure_file_link\" title=\"StructsAndEnums.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026358/download?verifier=IWkZc2A2g0E3QiXyVwKYDLQvObtnHz3Mi5yKj0jD&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026358\" data-api-returntype=\"File\">StructsAndEnums.zip</a></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<ol>\n<li>Channel 9 - <i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Enumerations-and-the-Switch-Decision-Statement\"> Enumerations and the Switch Decision Statement</a></i>\n</li>\n<li><i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/Twenty-C-Questions-Explained/01\">&nbsp;When do you use structs vs classes?</a> (starts at around 4')</i></li>\n</ol>"
    },
    {
        "page_index": 32,
        "chunk_index": 0,
        "text": "<h1 id=\"struct-c-reference\">struct&nbsp;</h1>\n<p>A&nbsp;<code>struct</code>&nbsp;type is a value type that is typically used to encapsulate small groups of related variables, such as the coordinates of a rectangle or the characteristics of an item in an inventory. The following example shows a simple struct declaration:</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 32,
        "chunk_index": 1,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public struct Book\n{\n    public decimal price;\n    public string title;\n    public string author;\n}\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">struct</span> Book\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">decimal</span> price;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">string</span> title;"
    },
    {
        "page_index": 32,
        "chunk_index": 2,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">string</span> author;\n}\n</code></pre>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 3,
        "text": "<p>Structs can also contain&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors\" data-linktype=\"relative-path\">constructors</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constants\" data-linktype=\"relative-path\">constants</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\""
    },
    {
        "page_index": 32,
        "chunk_index": 4,
        "text": "data-linktype=\"relative-path\">fields</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods\" data-linktype=\"relative-path\">methods</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\" data-linktype=\"relative-path\">properties</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/index\" data-linktype=\"relative-path\">indexers</a>,&nbsp;<a"
    },
    {
        "page_index": 32,
        "chunk_index": 5,
        "text": "href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/index\" data-linktype=\"relative-path\">operators</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/index\" data-linktype=\"relative-path\">events</a>, and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/nested-types\" data-linktype=\"relative-path\">nested types</a>, although if several such members are required, you should"
    },
    {
        "page_index": 32,
        "chunk_index": 6,
        "text": "if several such members are required, you should consider making your type a class instead.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 7,
        "text": "<h1 id=\"struct-c-reference\">struct vs. class</h1>"
    },
    {
        "page_index": 32,
        "chunk_index": 8,
        "text": "<p>The&nbsp;<code>struct</code>&nbsp;type is suitable for representing lightweight objects such as&nbsp;<code>Point</code>,&nbsp;<code>Rectangle</code>, and&nbsp;<code>Color</code>. Although it is just as convenient to represent a point as a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/class\" data-linktype=\"relative-path\">class</a>&nbsp;with&nbsp;<a"
    },
    {
        "page_index": 32,
        "chunk_index": 9,
        "text": "href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/auto-implemented-properties\" data-linktype=\"relative-path\">Auto-Implemented Properties</a>, a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/struct\" data-linktype=\"relative-path\">struct</a>&nbsp;might be more efficient in some scenarios. For example, if you declare an array of 1000&nbsp;<code>Point</code>&nbsp;objects, you will allocate additional memory for"
    },
    {
        "page_index": 32,
        "chunk_index": 10,
        "text": "you will allocate additional memory for referencing each object; in this case, a struct would be less expensive. Because .NET already contains an object called&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.point\" data-linktype=\"absolute-path\">Point</a>, the struct in this example is named&nbsp;<code>Coords</code>&nbsp;instead.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 11,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public struct Coords\n{\n    public int x, y;"
    },
    {
        "page_index": 32,
        "chunk_index": 12,
        "text": "public Coords(int p1, int p2)\n    {\n        x = p1;\n        y = p2;\n    }\n}\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">struct</span> Coords\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> x, y;"
    },
    {
        "page_index": 32,
        "chunk_index": 13,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Coords</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> p1, <span class=\"hljs-keyword\">int</span> p2</span>)</span>\n    {\n        x = p1;\n        y = p2;\n    }\n}\n</code></pre>"
    },
    {
        "page_index": 32,
        "chunk_index": 14,
        "text": "<p>It is an error to define a parameterless constructor for a struct. It is also an error to initialize an instance field in a struct body. You can initialize externally accessible struct members only by using a parameterized constructor, the implicit, parameterless constructor, an&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">object initializer</a>, or by accessing the members"
    },
    {
        "page_index": 32,
        "chunk_index": 15,
        "text": "initializer</a>, or by accessing the members individually after the struct is declared. Any private or otherwise inaccessible members require the use of constructors exclusively.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 16,
        "text": "<p>When you create a struct object using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>&nbsp;operator, it gets created and the appropriate constructor is called according to the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors#constructor-syntax\" data-linktype=\"relative-path\">constructor's signature</a>. Unlike classes, structs can be"
    },
    {
        "page_index": 32,
        "chunk_index": 17,
        "text": "signature</a>. Unlike classes, structs can be instantiated without using the&nbsp;<code>new</code>&nbsp;operator. In such a case, there is no constructor call, which makes the allocation more efficient. However, the fields will remain unassigned and the object cannot be used until all of the fields are initialized. This includes the inability to get or set values through properties.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 18,
        "text": "<p>If you instantiate a struct object using the parameterless constructor, all members are assigned according to their&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/default-values-table\" data-linktype=\"relative-path\">default values</a>.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 19,
        "text": "<p>When writing a constructor with parameters for a struct, you must explicitly initialize all members; otherwise one or more members remain unassigned and the struct cannot be used, producing compiler error&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs0171\" data-linktype=\"relative-path\">CS0171</a>.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 20,
        "text": "<p>There is no inheritance for structs as there is for classes. A struct cannot inherit from another struct or class, and it cannot be the base of a class. Structs, however, inherit from the base class&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.object\" data-linktype=\"absolute-path\">Object</a>. A struct can implement interfaces, and it does that exactly as classes do.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 21,
        "text": "<p>You cannot declare a class using the keyword&nbsp;<code>struct</code>. In C#, classes and structs are semantically different. A struct is a value type, while a class is a reference type. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value-types\" data-linktype=\"relative-path\">Value types</a>&nbsp;and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\""
    },
    {
        "page_index": 32,
        "chunk_index": 22,
        "text": "data-linktype=\"relative-path\">Reference types</a>.</p>"
    },
    {
        "page_index": 32,
        "chunk_index": 23,
        "text": "<p>Unless you need reference-type semantics, a small class may be more efficiently handled by the system if you declare it as a struct instead.</p>\n<h2 id=\"example-1\">Example 1</h2>\n<p>This example demonstrates&nbsp;<code>struct</code>&nbsp;initialization using both parameterless and parameterized constructors.</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 32,
        "chunk_index": 24,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public struct Coords\n{\n    public int x, y;"
    },
    {
        "page_index": 32,
        "chunk_index": 25,
        "text": "public Coords(int p1, int p2)\n    {\n        x = p1;\n        y = p2;\n    }\n}\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">struct</span> Coords\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> x, y;"
    },
    {
        "page_index": 32,
        "chunk_index": 26,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Coords</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> p1, <span class=\"hljs-keyword\">int</span> p2</span>)</span>\n    {\n        x = p1;\n        y = p2;\n    }\n}\n</code></pre>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>"
    },
    {
        "page_index": 32,
        "chunk_index": 27,
        "text": "<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Declare and initialize struct objects.\nclass TestCoords\n{\n    static void Main()\n    {\n        // Initialize.\n        var coords1 = new Coords();\n        var coords2 = new Coords(10, 10);"
    },
    {
        "page_index": 32,
        "chunk_index": 28,
        "text": "// Display results.\n        Console.Write(&quot;Coords 1: &quot;);\n        Console.WriteLine($&quot;x = {coords1.x}, y = {coords1.y}&quot;);\n\n        Console.Write(&quot;Coords 2: &quot;);\n        Console.WriteLine($&quot;x = {coords2.x}, y = {coords2.y}&quot;);"
    },
    {
        "page_index": 32,
        "chunk_index": 29,
        "text": "// Keep the console window open in debug mode.\n        Console.WriteLine(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n}\n/* Output:\n    Coords 1: x = 0, y = 0\n    Coords 2: x = 10, y = 10\n*/\n\"><span class=\"hljs-comment\">// Declare and initialize struct objects.</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestCoords</span>\n{"
    },
    {
        "page_index": 32,
        "chunk_index": 30,
        "text": "{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-comment\">// Initialize.</span>\n        <span class=\"hljs-keyword\">var</span> coords1 = <span class=\"hljs-keyword\">new</span> Coords();"
    },
    {
        "page_index": 32,
        "chunk_index": 31,
        "text": "<span class=\"hljs-keyword\">var</span> coords2 = <span class=\"hljs-keyword\">new</span> Coords(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>);"
    },
    {
        "page_index": 32,
        "chunk_index": 32,
        "text": "<span class=\"hljs-comment\">// Display results.</span>\n        Console.Write(<span class=\"hljs-string\">\"Coords 1: \"</span>);\n        Console.WriteLine(<span class=\"hljs-string\">$\"x = <span class=\"hljs-subst\">{coords1.x}</span>, y = <span class=\"hljs-subst\">{coords1.y}</span>\"</span>);"
    },
    {
        "page_index": 32,
        "chunk_index": 33,
        "text": "Console.Write(<span class=\"hljs-string\">\"Coords 2: \"</span>);\n        Console.WriteLine(<span class=\"hljs-string\">$\"x = <span class=\"hljs-subst\">{coords2.x}</span>, y = <span class=\"hljs-subst\">{coords2.y}</span>\"</span>);"
    },
    {
        "page_index": 32,
        "chunk_index": 34,
        "text": "<span class=\"hljs-comment\">// Keep the console window open in debug mode.</span>\n        Console.WriteLine(<span class=\"hljs-string\">\"Press any key to exit.\"</span>);\n        Console.ReadKey();\n    }\n}\n<span class=\"hljs-comment\">/* Output:\n    Coords 1: x = 0, y = 0\n    Coords 2: x = 10, y = 10\n*/</span>\n</code></pre>\n<h2 id=\"example-2\">Example 2</h2>"
    },
    {
        "page_index": 32,
        "chunk_index": 35,
        "text": "</code></pre>\n<h2 id=\"example-2\">Example 2</h2>\n<p>This example demonstrates a feature that is unique to structs. It creates a Coords object without using the&nbsp;<code>new</code>&nbsp;operator. If you replace the word&nbsp;<code>struct</code>&nbsp;with the word&nbsp;<code>class</code>, the program will not compile.</p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 32,
        "chunk_index": 36,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public struct Coords\n{\n    public int x, y;"
    },
    {
        "page_index": 32,
        "chunk_index": 37,
        "text": "public Coords(int p1, int p2)\n    {\n        x = p1;\n        y = p2;\n    }\n}\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">struct</span> Coords\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> x, y;"
    },
    {
        "page_index": 32,
        "chunk_index": 38,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Coords</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> p1, <span class=\"hljs-keyword\">int</span> p2</span>)</span>\n    {\n        x = p1;\n        y = p2;\n    }\n}\n</code></pre>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>"
    },
    {
        "page_index": 32,
        "chunk_index": 39,
        "text": "<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Declare a struct object without &quot;new&quot;.\nclass TestCoordsNoNew\n{\n    static void Main()\n    {\n        // Declare an object.\n        Coords coords1;"
    },
    {
        "page_index": 32,
        "chunk_index": 40,
        "text": "// Initialize.\n        coords1.x = 10;\n        coords1.y = 20;\n\n        // Display results.\n        Console.Write(&quot;Coords 1: &quot;);\n        Console.WriteLine($&quot;x = {coords1.x}, y = {coords1.y}&quot;);"
    },
    {
        "page_index": 32,
        "chunk_index": 41,
        "text": "// Keep the console window open in debug mode.\n        Console.WriteLine(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n}\n// Output: Coords 1: x = 10, y = 20\n\"><span class=\"hljs-comment\">// Declare a struct object without \"new\".</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestCoordsNoNew</span>\n{"
    },
    {
        "page_index": 32,
        "chunk_index": 42,
        "text": "{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-comment\">// Declare an object.</span>\n        Coords coords1;"
    },
    {
        "page_index": 32,
        "chunk_index": 43,
        "text": "<span class=\"hljs-comment\">// Initialize.</span>\n        coords1.x = <span class=\"hljs-number\">10</span>;\n        coords1.y = <span class=\"hljs-number\">20</span>;\n\n        <span class=\"hljs-comment\">// Display results.</span>\n        Console.Write(<span class=\"hljs-string\">\"Coords 1: \"</span>);\n        Console.WriteLine(<span class=\"hljs-string\">$\"x = <span class=\"hljs-subst\">{coords1.x}</span>, y = <span class=\"hljs-subst\">{coords1.y}</span>\"</span>);"
    },
    {
        "page_index": 32,
        "chunk_index": 44,
        "text": "<span class=\"hljs-comment\">// Keep the console window open in debug mode.</span>\n        Console.WriteLine(<span class=\"hljs-string\">\"Press any key to exit.\"</span>);\n        Console.ReadKey();\n    }\n}\n<span class=\"hljs-comment\">// Output: Coords 1: x = 10, y = 20</span>\n</code></pre>"
    },
    {
        "page_index": 33,
        "chunk_index": 0,
        "text": "<h1 id=\"enum-c-reference\">enum&nbsp;</h1>\n<p>The&nbsp;<code>enum</code>&nbsp;keyword is used to declare an enumeration, a distinct type that consists of a set of named constants called the enumerator list.</p>\n<p>Usually it is best to define an enum directly within a namespace so that all classes in the namespace can access it with equal convenience. However, an enum can also be nested within a class or struct.</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 1,
        "text": "<p>By default, the first enumerator has the value 0, and the value of each successive enumerator is increased by 1. For example, in the following enumeration,&nbsp;<code>Sat</code>&nbsp;is&nbsp;<code>0</code>,&nbsp;<code>Sun</code>&nbsp;is&nbsp;<code>1</code>,&nbsp;<code>Mon</code>&nbsp;is&nbsp;<code>2</code>, and so forth.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 33,
        "chunk_index": 2,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"enum Day {Sat, Sun, Mon, Tue, Wed, Thu, Fri};\n\"><span class=\"hljs-keyword\">enum</span> Day {Sat, Sun, Mon, Tue, Wed, Thu, Fri};\n</code></pre>\n<p>Enumerators can use initializers to override the default values, as shown in the following example.</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 33,
        "chunk_index": 3,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"enum Day {Sat=1, Sun, Mon, Tue, Wed, Thu, Fri};\n\"><span class=\"hljs-keyword\">enum</span> Day {Sat=<span class=\"hljs-number\">1</span>, Sun, Mon, Tue, Wed, Thu, Fri};\n</code></pre>"
    },
    {
        "page_index": 33,
        "chunk_index": 4,
        "text": "</code></pre>\n<p>In this enumeration, the sequence of elements is forced to start from&nbsp;<code>1</code>&nbsp;instead of&nbsp;<code>0</code>. However, including a constant that has the value of 0 is recommended. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/enumeration-types\" data-linktype=\"relative-path\">Enumeration Types</a>.</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 5,
        "text": "<p>Every enumeration type has an underlying type, which can be any&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">integral numeric type</a>. The&nbsp; <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/char\" data-linktype=\"relative-path\">char</a>&nbsp;type cannot be an underlying type of an enum. The default underlying type of enumeration elements is&nbsp;<a"
    },
    {
        "page_index": 33,
        "chunk_index": 6,
        "text": "type of enumeration elements is&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">int</a>. To declare an enum of another integral type, such as&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">byte</a>, use a colon after the identifier followed by the type, as shown in the following example.</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 7,
        "text": "<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"enum Day : byte {Sat=1, Sun, Mon, Tue, Wed, Thu, Fri};\n\"><span class=\"hljs-keyword\">enum</span> Day : <span class=\"hljs-keyword\">byte</span> {Sat=<span class=\"hljs-number\">1</span>, Sun, Mon, Tue, Wed, Thu, Fri};\n</code></pre>"
    },
    {
        "page_index": 33,
        "chunk_index": 8,
        "text": "</code></pre>\n<p>A variable of an enumeration type can be assigned any value in the range of the underlying type; the values are not limited to the named constants.</p>\n<p>The default value of an&nbsp;<code>enum E</code>&nbsp;is the value produced by the expression&nbsp;<code>(E)0</code>.</p>\n<div class=\"alert is-info\">\n<p class=\"alert-title\">&nbsp;Note</p>\n<p>An enumerator cannot contain white space in its name.</p>\n</div>"
    },
    {
        "page_index": 33,
        "chunk_index": 9,
        "text": "<p>The underlying type specifies how much storage is allocated for each enumerator. However, an explicit cast is necessary to convert from&nbsp;<code>enum</code>&nbsp;type to an integral type. For example, the following statement assigns the enumerator&nbsp;<code>Sun</code>&nbsp;to a variable of the type&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">int</a>&nbsp;by using a cast to convert"
    },
    {
        "page_index": 33,
        "chunk_index": 10,
        "text": "using a cast to convert from&nbsp;<code>enum</code>&nbsp;to&nbsp;<code>int</code>.</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 11,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>Copy</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int x = (int)Day.Sun;\n\"><span class=\"hljs-keyword\">int</span> x = (<span class=\"hljs-keyword\">int</span>)Day.Sun;\n</code></pre>"
    },
    {
        "page_index": 33,
        "chunk_index": 12,
        "text": "<p>When you apply&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.flagsattribute\" data-linktype=\"absolute-path\">System.FlagsAttribute</a>&nbsp;to an enumeration that contains elements that can be combined with a bitwise&nbsp;<code>OR</code>&nbsp;operation, the attribute affects the behavior of the&nbsp;<code>enum</code>&nbsp;when it is used with some tools. You can notice these changes when you use tools such as the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 33,
        "chunk_index": 13,
        "text": "you use tools such as the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.console\" data-linktype=\"absolute-path\">Console</a>&nbsp;class methods and the Expression Evaluator. (See the third example.)</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 14,
        "text": "<h2 id=\"robust-programming\">Robust programming</h2>\n<p>Just as with any constant, all references to the individual values of an enum are converted to numeric literals at compile time. This can create potential versioning issues as described in&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constants\" data-linktype=\"relative-path\">Constants</a>.</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 15,
        "text": "<p>Assigning additional values to new versions of enums, or changing the values of the enum members in a new version, can cause problems for dependent source code. Enum values often are used in&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/switch\" data-linktype=\"relative-path\">switch</a>&nbsp;statements. If additional elements have been added to the&nbsp;<code>enum</code>&nbsp;type, the default section of the switch statement can be selected"
    },
    {
        "page_index": 33,
        "chunk_index": 16,
        "text": "section of the switch statement can be selected unexpectedly.</p>"
    },
    {
        "page_index": 33,
        "chunk_index": 17,
        "text": "<p>If other developers use your code, you should provide guidelines about how their code should react if new elements are added to any&nbsp;<code>enum</code>&nbsp;types.</p>\n<h2 id=\"example\">Example</h2>\n<p>In the following example, an enumeration,&nbsp;<code>Day</code>, is declared. Two enumerators are explicitly converted to integer and assigned to integer variables.</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 33,
        "chunk_index": 18,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public class EnumTest\n{\n    enum Day { Sun, Mon, Tue, Wed, Thu, Fri, Sat };"
    },
    {
        "page_index": 33,
        "chunk_index": 19,
        "text": "static void Main()\n    {\n        int x = (int)Day.Sun;\n        int y = (int)Day.Fri;\n        Console.WriteLine(&quot;Sun = {0}&quot;, x);\n        Console.WriteLine(&quot;Fri = {0}&quot;, y);\n    }\n}\n/* Output:\n   Sun = 0\n   Fri = 5\n*/\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EnumTest</span>\n{\n    <span class=\"hljs-keyword\">enum</span> Day { Sun, Mon, Tue, Wed, Thu, Fri, Sat };"
    },
    {
        "page_index": 33,
        "chunk_index": 20,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-keyword\">int</span> x = (<span class=\"hljs-keyword\">int</span>)Day.Sun;\n        <span class=\"hljs-keyword\">int</span> y = (<span class=\"hljs-keyword\">int</span>)Day.Fri;\n        Console.WriteLine(<span class=\"hljs-string\">\"Sun = {0}\"</span>, x);"
    },
    {
        "page_index": 33,
        "chunk_index": 21,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"Fri = {0}\"</span>, y);\n    }\n}\n<span class=\"hljs-comment\">/* Output:\n   Sun = 0\n   Fri = 5\n*/</span>\n</code></pre>\n<h2 id=\"example-1\">Example<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"example-1\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum#example-1\"></a>\n</h2>"
    },
    {
        "page_index": 33,
        "chunk_index": 22,
        "text": "</h2>\n<p>In the following example, the base-type option is used to declare an&nbsp;<code>enum</code>&nbsp;whose members are of type&nbsp;<code>long</code>. Notice that even though the underlying type of the enumeration is&nbsp;<code>long</code>, the enumeration members still must be explicitly converted to type&nbsp;<code>long</code>&nbsp;by using a cast.</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 33,
        "chunk_index": 23,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public class EnumTest2\n{\n    enum Range : long { Max = 2147483648L, Min = 255L };\n    static void Main()\n    {\n        long x = (long)Range.Max;\n        long y = (long)Range.Min;\n        Console.WriteLine(&quot;Max = {0}&quot;, x);\n        Console.WriteLine(&quot;Min = {0}&quot;, y);\n    }\n}\n/* Output:\n   Max = 2147483648\n   Min = 255\n*/"
    },
    {
        "page_index": 33,
        "chunk_index": 24,
        "text": "}\n/* Output:\n   Max = 2147483648\n   Min = 255\n*/\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EnumTest2</span>\n{\n    <span class=\"hljs-keyword\">enum</span> Range : <span class=\"hljs-keyword\">long</span> { Max = <span class=\"hljs-number\">2147483648L</span>, Min = <span class=\"hljs-number\">255L</span> };"
    },
    {
        "page_index": 33,
        "chunk_index": 25,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-keyword\">long</span> x = (<span class=\"hljs-keyword\">long</span>)Range.Max;\n        <span class=\"hljs-keyword\">long</span> y = (<span class=\"hljs-keyword\">long</span>)Range.Min;\n        Console.WriteLine(<span class=\"hljs-string\">\"Max = {0}\"</span>, x);"
    },
    {
        "page_index": 33,
        "chunk_index": 26,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"Min = {0}\"</span>, y);\n    }\n}\n<span class=\"hljs-comment\">/* Output:\n   Max = 2147483648\n   Min = 255\n*/</span>\n</code></pre>\n<h2 id=\"example-2\">Example<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"example-2\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum#example-2\"></a>\n</h2>"
    },
    {
        "page_index": 33,
        "chunk_index": 27,
        "text": "</h2>\n<p>The following code example illustrates the use and effect of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.flagsattribute\" data-linktype=\"absolute-path\">System.FlagsAttribute</a>&nbsp;attribute on an&nbsp;<code>enum</code>&nbsp;declaration.</p>\n<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 33,
        "chunk_index": 28,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Add the attribute Flags or FlagsAttribute.\n[Flags]\npublic enum CarOptions\n{\n    // The flag for SunRoof is 0001.\n    SunRoof = 0x01,\n    // The flag for Spoiler is 0010.\n    Spoiler = 0x02,\n    // The flag for FogLights is 0100.\n    FogLights = 0x04,\n    // The flag for TintedWindows is 1000.\n    TintedWindows = 0x08,\n}"
    },
    {
        "page_index": 33,
        "chunk_index": 29,
        "text": "class FlagTest\n{\n    static void Main()\n    {\n        // The bitwise OR of 0001 and 0100 is 0101.\n        CarOptions options = CarOptions.SunRoof | CarOptions.FogLights;"
    },
    {
        "page_index": 33,
        "chunk_index": 30,
        "text": "// Because the Flags attribute is specified, Console.WriteLine displays\n        // the name of each enum element that corresponds to a flag that has\n        // the value 1 in variable options.\n        Console.WriteLine(options);\n        // The integer value of 0101 is 5.\n        Console.WriteLine((int)options);\n    }\n}\n/* Output:\n   SunRoof, FogLights\n   5\n*/\n\"><span class=\"hljs-comment\">// Add the attribute Flags or FlagsAttribute.</span>\n[<span class=\"hljs-meta\">Flags</span>]"
    },
    {
        "page_index": 33,
        "chunk_index": 31,
        "text": "[<span class=\"hljs-meta\">Flags</span>]\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> CarOptions\n{\n    <span class=\"hljs-comment\">// The flag for SunRoof is 0001.</span>\n    SunRoof = <span class=\"hljs-number\">0x01</span>,\n    <span class=\"hljs-comment\">// The flag for Spoiler is 0010.</span>\n    Spoiler = <span class=\"hljs-number\">0x02</span>,\n    <span class=\"hljs-comment\">// The flag for FogLights is 0100.</span>"
    },
    {
        "page_index": 33,
        "chunk_index": 32,
        "text": "FogLights = <span class=\"hljs-number\">0x04</span>,\n    <span class=\"hljs-comment\">// The flag for TintedWindows is 1000.</span>\n    TintedWindows = <span class=\"hljs-number\">0x08</span>,\n}"
    },
    {
        "page_index": 33,
        "chunk_index": 33,
        "text": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FlagTest</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-comment\">// The bitwise OR of 0001 and 0100 is 0101.</span>\n        CarOptions options = CarOptions.SunRoof | CarOptions.FogLights;"
    },
    {
        "page_index": 33,
        "chunk_index": 34,
        "text": "<span class=\"hljs-comment\">// Because the Flags attribute is specified, Console.WriteLine displays</span>\n        <span class=\"hljs-comment\">// the name of each enum element that corresponds to a flag that has</span>\n        <span class=\"hljs-comment\">// the value 1 in variable options.</span>\n        Console.WriteLine(options);\n        <span class=\"hljs-comment\">// The integer value of 0101 is 5.</span>\n        Console.WriteLine((<span class=\"hljs-keyword\">int</span>)options);\n    }\n}"
    },
    {
        "page_index": 33,
        "chunk_index": 35,
        "text": "}\n}\n<span class=\"hljs-comment\">/* Output:\n   SunRoof, FogLights\n   5\n*/</span>\n</code></pre>\n<h2 id=\"comments\">Comments<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"comments\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum#comments\"></a>\n</h2>\n<p>If you remove&nbsp;<code>Flags</code>, the example displays the following values:</p>\n<p><code>5</code></p>\n<p><code>5</code></p>"
    },
    {
        "page_index": 34,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"ValueRefType.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026262/download?verifier=jYBGrWwoxrquF16EmE6rSsNUWRafsyLBFOnw89WL&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026262\" data-api-returntype=\"File\">ValueRefType.pdf</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/y5wqjutUUyM\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 35,
        "chunk_index": 0,
        "text": "<h1 id=\"value-types-c-reference\">Value types&nbsp;</h1>\n<p>There are two kinds of value types:</p>\n<ul>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/struct\" data-linktype=\"relative-path\">Structs</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum\" data-linktype=\"relative-path\">Enumerations</a></p>\n</li>\n</ul>\n<h2 id=\"main-features-of-value-types\">Main features of value types</h2>"
    },
    {
        "page_index": 35,
        "chunk_index": 1,
        "text": "<p>A variable of a value type contains a value of the type. For example, a variable of the&nbsp;<code>int</code>&nbsp;type might contain the value&nbsp;<code>42</code>. This differs from a variable of a reference type, which contains a reference to an instance of the type, also known as an object. When you assign a new value to a variable of a value type, that value is copied. When you assign a new value to a variable of a reference type, the reference is copied, not the object itself.</p>"
    },
    {
        "page_index": 35,
        "chunk_index": 2,
        "text": "<p>All value types are derived implicitly from the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.valuetype\" data-linktype=\"absolute-path\">System.ValueType</a>.</p>\n<p>Unlike with reference types, you cannot derive a new type from a value type. However, like reference types, structs can implement interfaces.</p>"
    },
    {
        "page_index": 35,
        "chunk_index": 3,
        "text": "<p>Value type variables cannot be&nbsp;<code>null</code>&nbsp;by default. However, variables of the corresponding&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types\" data-linktype=\"relative-path\">nullable value types</a>&nbsp;can be&nbsp;<code>null</code>.</p>"
    },
    {
        "page_index": 35,
        "chunk_index": 4,
        "text": "<p>Each value type has an implicit parameterless constructor that initializes the default value of that type. For information about default values of value types, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/default-values-table\" data-linktype=\"relative-path\">Default values table</a>.</p>\n<h2 id=\"simple-types\">Simple types</h2>"
    },
    {
        "page_index": 35,
        "chunk_index": 5,
        "text": "<h2 id=\"simple-types\">Simple types</h2>\n<p>The&nbsp;<em>simple types</em>&nbsp;are a set of predefined struct types provided by C# and comprise the following types:</p>\n<ul>\n<li>"
    },
    {
        "page_index": 35,
        "chunk_index": 6,
        "text": "<ul>\n<li>\n<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">Integral types</a>: integer numeric types and the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/char\" data-linktype=\"relative-path\">char</a>&nbsp;type</li>"
    },
    {
        "page_index": 35,
        "chunk_index": 7,
        "text": "<li><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types\" data-linktype=\"relative-path\">Floating-point types</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/bool\" data-linktype=\"relative-path\">bool</a></li>\n</ul>"
    },
    {
        "page_index": 35,
        "chunk_index": 8,
        "text": "<p>The simple types are identified through keywords, but these keywords are simply aliases for predefined struct types in the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system\" data-linktype=\"absolute-path\">System</a>&nbsp;namespace. For example,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">int</a>&nbsp;is an alias of&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 35,
        "chunk_index": 9,
        "text": "an alias of&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.int32\" data-linktype=\"absolute-path\">System.Int32</a>. For a complete list of aliases, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/built-in-types-table\" data-linktype=\"relative-path\">Built-in types table</a>.</p>"
    },
    {
        "page_index": 35,
        "chunk_index": 10,
        "text": "<p>The simple types differ from other struct types in that they permit certain additional operations:</p>\n<ul>\n<li>\n<p>Simple types can be initialized by using literals. For example,&nbsp;<code>'A'</code>&nbsp;is a literal of the type&nbsp;<code>char</code>&nbsp;and&nbsp;<code>2001</code>&nbsp;is a literal of the type&nbsp;<code>int</code>.</p>\n</li>\n<li>"
    },
    {
        "page_index": 35,
        "chunk_index": 11,
        "text": "</li>\n<li>\n<p>You can declare constants of the simple types with the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/const\" data-linktype=\"relative-path\">const</a>&nbsp;keyword. It's not possible to have constants of other struct types.</p>\n</li>\n<li>\n<p>Constant expressions, whose operands are all simple type constants, are evaluated at compile time.</p>\n</li>\n</ul>"
    },
    {
        "page_index": 35,
        "chunk_index": 12,
        "text": "</li>\n</ul>\n<p>For more information, see the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/types#simple-types\" data-linktype=\"relative-path\">Simple types</a>&nbsp;section of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/introduction\" data-linktype=\"absolute-path\">C# language specification</a>.</p>\n<h2 id=\"initializing-value-types\">Initializing value types</h2>"
    },
    {
        "page_index": 35,
        "chunk_index": 13,
        "text": "<p>Local variables in C# must be initialized before they are used. For example, you might declare a local variable without initialization as in the following example:</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int myInt;\n\"><span class=\"hljs-keyword\">int</span> myInt;\n</code></pre>"
    },
    {
        "page_index": 35,
        "chunk_index": 14,
        "text": "</code></pre>\n<p>You cannot use it before you initialize it. You can initialize it using the following statement:</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"myInt = new int();  // Invoke parameterless constructor for int type."
    },
    {
        "page_index": 35,
        "chunk_index": 15,
        "text": "\">myInt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>();  <span class=\"hljs-comment\">// Invoke parameterless constructor for int type.</span>\n</code></pre>\n<p>This statement is equivalent to the following statement:</p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"myInt = 0;         // Assign an initial value, 0 in this example."
    },
    {
        "page_index": 35,
        "chunk_index": 16,
        "text": "\">myInt = <span class=\"hljs-number\">0</span>;         <span class=\"hljs-comment\">// Assign an initial value, 0 in this example.</span>\n</code></pre>\n<p>You can, of course, have the declaration and the initialization in the same statement as in the following examples:</p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int myInt = new int();"
    },
    {
        "page_index": 35,
        "chunk_index": 17,
        "text": "\"><span class=\"hljs-keyword\">int</span> myInt = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>();\n</code></pre>\n<p>–or–</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int myInt = 0;\n\"><span class=\"hljs-keyword\">int</span> myInt = <span class=\"hljs-number\">0</span>;\n</code></pre>"
    },
    {
        "page_index": 35,
        "chunk_index": 18,
        "text": "<p>Using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>&nbsp;operator calls the parameterless constructor of the specific type and assigns the default value to the variable. In the preceding example, the parameterless constructor assigned the value&nbsp;<code>0</code>&nbsp;to&nbsp;<code>myInt</code>. For more information about values assigned by calling parameterless constructors, see&nbsp;<a"
    },
    {
        "page_index": 35,
        "chunk_index": 19,
        "text": "calling parameterless constructors, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/default-values-table\" data-linktype=\"relative-path\">Default values table</a>.</p>"
    },
    {
        "page_index": 35,
        "chunk_index": 20,
        "text": "<p>With user-defined types, use&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>&nbsp;to invoke the parameterless constructor. For example, the following statement invokes the parameterless constructor of the&nbsp;<code>Point</code>&nbsp;struct:</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 35,
        "chunk_index": 21,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var p = new Point(); // Invoke parameterless constructor for the struct.\n\"><span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Point(); <span class=\"hljs-comment\">// Invoke parameterless constructor for the struct.</span>\n</code></pre>\n<p>After this call, the struct is considered to be definitely assigned; that is, all its members are initialized to their default values.</p>"
    },
    {
        "page_index": 35,
        "chunk_index": 22,
        "text": "<p>For more information about the&nbsp;<code>new</code>&nbsp;operator, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>.</p>"
    },
    {
        "page_index": 36,
        "chunk_index": 0,
        "text": "<h1 id=\"reference-types-c-reference\">Reference types&nbsp;</h1>"
    },
    {
        "page_index": 36,
        "chunk_index": 1,
        "text": "<p>There are two kinds of types in C#: reference types and value types. Variables of reference types store references to their data (objects), while variables of value types directly contain their data. With reference types, two variables can reference the same object; therefore, operations on one variable can affect the object referenced by the other variable. With value types, each variable has its own copy of the data, and it is not possible for operations on one variable to affect the other"
    },
    {
        "page_index": 36,
        "chunk_index": 2,
        "text": "operations on one variable to affect the other (except in the case of in, ref and out parameter variables; see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/in-parameter-modifier\" data-linktype=\"relative-path\">in</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref\" data-linktype=\"relative-path\">ref</a>&nbsp;and&nbsp;<a"
    },
    {
        "page_index": 36,
        "chunk_index": 3,
        "text": "href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/out-parameter-modifier\" data-linktype=\"relative-path\">out</a>&nbsp;parameter modifier).</p>"
    },
    {
        "page_index": 36,
        "chunk_index": 4,
        "text": "<p>The following keywords are used to declare reference types:</p>\n<ul>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/class\" data-linktype=\"relative-path\">class</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\" data-linktype=\"relative-path\">interface</a></p>\n</li>\n<li>"
    },
    {
        "page_index": 36,
        "chunk_index": 5,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">delegate</a></p>\n</li>\n</ul>\n<p>C# also provides the following built-in reference types:</p>\n<ul>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">dynamic</a></p>\n</li>\n<li>"
    },
    {
        "page_index": 36,
        "chunk_index": 6,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">object</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">string</a></p>\n</li>\n</ul>"
    },
    {
        "page_index": 37,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"><strong>&nbsp;Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"String.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026319/download?verifier=IDxTYbt7iQT36ct2JcLURYbbE1AepB6S7lWazyn6&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026319\" data-api-returntype=\"File\">String.pdf</a></i></p>\n<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: <a class=\"instructure_file_link\" title=\"ILoveDatesandTimes.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026326/download?verifier=kRMsvo51iFOrBltjRHsCSo04GVkaQsBwjzQMBpSn&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026326\" data-api-returntype=\"File\">ILoveDatesandTimes.zip</a></strong></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<p>1. Channel 9 -&nbsp;<i class=\"icon-video\"><a class=\"external\" href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Working-with-Strings\" target=\"_blank\"> Working with Strings</a></i></p>\n<p>2. Channel 9 -&nbsp;<i class=\"icon-video\"></i> <a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Working-with-Dates-and-Times\">Working with Dates and Times</a></p>"
    },
    {
        "page_index": 38,
        "chunk_index": 0,
        "text": "<h1 id=\"strings-c-programming-guide\">Strings&nbsp;</h1>"
    },
    {
        "page_index": 38,
        "chunk_index": 1,
        "text": "<p>A string is an object of type&nbsp;&nbsp;whose value is text. Internally, the text is stored as a sequential read-only collection of&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.char\" data-linktype=\"absolute-path\">Char</a>&nbsp;objects. There is no null-terminating character at the end of a C# string; therefore a C# string can contain any number of embedded null characters ('\\0'). The&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 38,
        "chunk_index": 2,
        "text": "null characters ('\\0'). The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.length\" data-linktype=\"absolute-path\">Length</a>&nbsp;property of a string represents the number of&nbsp;<code>Char</code>&nbsp;objects it contains, not the number of Unicode characters. To access the individual Unicode code points in a string, use the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.globalization.stringinfo\""
    },
    {
        "page_index": 38,
        "chunk_index": 3,
        "text": "data-linktype=\"absolute-path\">StringInfo</a>&nbsp;object.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 4,
        "text": "<h2 id=\"string-vs-systemstring\">string vs. System.String</h2>"
    },
    {
        "page_index": 38,
        "chunk_index": 5,
        "text": "<p>In C#, the&nbsp;<code>string</code>&nbsp;keyword is an alias for&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">String</a>. Therefore,&nbsp;<code>String</code>&nbsp;and&nbsp;<code>string</code>&nbsp;are equivalent, and you can use whichever naming convention you prefer. The&nbsp;<code>String</code>&nbsp;class provides many methods for safely creating, manipulating, and comparing strings. In addition, the C# language"
    },
    {
        "page_index": 38,
        "chunk_index": 6,
        "text": "comparing strings. In addition, the C# language overloads some operators to simplify common string operations. For more information about the keyword, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types\" data-linktype=\"relative-path\">string</a>. For more information about the type and its methods, see&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">String</a>.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 7,
        "text": "<h2 id=\"declaring-and-initializing-strings\">Declaring and Initializing Strings</h2>\n<p>You can declare and initialize strings in various ways, as shown in the following example:</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Declare without initializing.\nstring message1;"
    },
    {
        "page_index": 38,
        "chunk_index": 8,
        "text": "// Initialize to null.\nstring message2 = null;\n\n// Initialize as an empty string.\n// Use the Empty constant instead of the literal &quot;&quot;.\nstring message3 = System.String.Empty;\n\n// Initialize with a regular string literal.\nstring oldPath = &quot;c:\\\\Program Files\\\\Microsoft Visual Studio 8.0&quot;;\n\n// Initialize with a verbatim string literal.\nstring newPath = @&quot;c:\\Program Files\\Microsoft Visual Studio 9.0&quot;;"
    },
    {
        "page_index": 38,
        "chunk_index": 9,
        "text": "// Use System.String if you prefer.\nSystem.String greeting = &quot;Hello World!&quot;;\n\n// In local variables (i.e. within a method body)\n// you can use implicit typing.\nvar temp = &quot;I'm still a strongly-typed System.String!&quot;;\n\n// Use a const string to prevent 'message4' from\n// being used to store another string value.\nconst string message4 = &quot;You can't get rid of me!&quot;;"
    },
    {
        "page_index": 38,
        "chunk_index": 10,
        "text": "// Use the String constructor only when creating\n// a string from a char*, char[], or sbyte*. See\n// System.String documentation for details.\nchar[] letters = { 'A', 'B', 'C' };\nstring alphabet = new string(letters);\n\"><span class=\"hljs-comment\">// Declare without initializing.</span>\n<span class=\"hljs-keyword\">string</span> message1;\n\n<span class=\"hljs-comment\">// Initialize to null.</span>\n<span class=\"hljs-keyword\">string</span> message2 = <span class=\"hljs-literal\">null</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 11,
        "text": "<span class=\"hljs-comment\">// Initialize as an empty string.</span>\n<span class=\"hljs-comment\">// Use the Empty constant instead of the literal \"\".</span>\n<span class=\"hljs-keyword\">string</span> message3 = System.String.Empty;\n\n<span class=\"hljs-comment\">// Initialize with a regular string literal.</span>\n<span class=\"hljs-keyword\">string</span> oldPath = <span class=\"hljs-string\">\"c:\\\\Program Files\\\\Microsoft Visual Studio 8.0\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 12,
        "text": "<span class=\"hljs-comment\">// Initialize with a verbatim string literal.</span>\n<span class=\"hljs-keyword\">string</span> newPath = <span class=\"hljs-string\">@\"c:\\Program Files\\Microsoft Visual Studio 9.0\"</span>;\n\n<span class=\"hljs-comment\">// Use System.String if you prefer.</span>\nSystem.String greeting = <span class=\"hljs-string\">\"Hello World!\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 13,
        "text": "<span class=\"hljs-comment\">// In local variables (i.e. within a method body)</span>\n<span class=\"hljs-comment\">// you can use implicit typing.</span>\n<span class=\"hljs-keyword\">var</span> temp = <span class=\"hljs-string\">\"I'm still a strongly-typed System.String!\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 14,
        "text": "<span class=\"hljs-comment\">// Use a const string to prevent 'message4' from</span>\n<span class=\"hljs-comment\">// being used to store another string value.</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">string</span> message4 = <span class=\"hljs-string\">\"You can't get rid of me!\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 15,
        "text": "<span class=\"hljs-comment\">// Use the String constructor only when creating</span>\n<span class=\"hljs-comment\">// a string from a char*, char[], or sbyte*. See</span>\n<span class=\"hljs-comment\">// System.String documentation for details.</span>\n<span class=\"hljs-keyword\">char</span>[] letters = { <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span> };"
    },
    {
        "page_index": 38,
        "chunk_index": 16,
        "text": "<span class=\"hljs-keyword\">string</span> alphabet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">string</span>(letters);\n</code></pre>\n<p>Note that you do not use the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>&nbsp;operator to create a string object except when initializing the string with an array of chars.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 17,
        "text": "<p>Initialize a string with the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.empty\" data-linktype=\"absolute-path\">Empty</a>&nbsp;constant value to create a new&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">String</a>&nbsp;object whose string is of zero length. The string literal representation of a zero-length string is \"\". By initializing strings with the&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 38,
        "chunk_index": 18,
        "text": "strings with the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.empty\" data-linktype=\"absolute-path\">Empty</a>&nbsp;value instead of&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/null\" data-linktype=\"relative-path\">null</a>, you can reduce the chances of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\""
    },
    {
        "page_index": 38,
        "chunk_index": 19,
        "text": "data-linktype=\"absolute-path\">NullReferenceException</a>&nbsp;occurring. Use the static&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.isnullorempty#System_String_IsNullOrEmpty_System_String_\" data-linktype=\"absolute-path\">IsNullOrEmpty(String)</a>&nbsp;method to verify the value of a string before you try to access it.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 20,
        "text": "<h2 id=\"immutability-of-string-objects\">Immutability of String Objects</h2>"
    },
    {
        "page_index": 38,
        "chunk_index": 21,
        "text": "<p>String objects are&nbsp;<em>immutable</em>: they cannot be changed after they have been created. All of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">String</a>&nbsp;methods and C# operators that appear to modify a string actually return the results in a new string object. In the following example, when the contents of&nbsp;<code>s1</code>&nbsp;and&nbsp;<code>s2</code>&nbsp;are concatenated to form a single string, the"
    },
    {
        "page_index": 38,
        "chunk_index": 22,
        "text": "concatenated to form a single string, the two original strings are unmodified. The&nbsp;<code>+=</code>&nbsp;operator creates a new string that contains the combined contents. That new object is assigned to the variable&nbsp;<code>s1</code>, and the original object that was assigned to&nbsp;<code>s1</code>&nbsp;is released for garbage collection because no other variable holds a reference to it.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 23,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string s1 = &quot;A string is more &quot;;\nstring s2 = &quot;than the sum of its chars.&quot;;"
    },
    {
        "page_index": 38,
        "chunk_index": 24,
        "text": "// Concatenate s1 and s2. This actually creates a new\n// string object and stores it in s1, releasing the\n// reference to the original object.\ns1 += s2;\n\nSystem.Console.WriteLine(s1);\n// Output: A string is more than the sum of its chars.\n\"><span class=\"hljs-keyword\">string</span> s1 = <span class=\"hljs-string\">\"A string is more \"</span>;\n<span class=\"hljs-keyword\">string</span> s2 = <span class=\"hljs-string\">\"than the sum of its chars.\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 25,
        "text": "<span class=\"hljs-comment\">// Concatenate s1 and s2. This actually creates a new</span>\n<span class=\"hljs-comment\">// string object and stores it in s1, releasing the</span>\n<span class=\"hljs-comment\">// reference to the original object.</span>\ns1 += s2;"
    },
    {
        "page_index": 38,
        "chunk_index": 26,
        "text": "System.Console.WriteLine(s1);\n<span class=\"hljs-comment\">// Output: A string is more than the sum of its chars.</span>\n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 27,
        "text": "</code></pre>\n<p>Because a string \"modification\" is actually a new string creation, you must use caution when you create references to strings. If you create a reference to a string, and then \"modify\" the original string, the reference will continue to point to the original object instead of the new object that was created when the string was modified. The following code illustrates this behavior:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 28,
        "text": "<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string s1 = &quot;Hello &quot;;\nstring s2 = s1;\ns1 += &quot;World&quot;;"
    },
    {
        "page_index": 38,
        "chunk_index": 29,
        "text": "System.Console.WriteLine(s2);\n//Output: Hello\n\"><span class=\"hljs-keyword\">string</span> s1 = <span class=\"hljs-string\">\"Hello \"</span>;\n<span class=\"hljs-keyword\">string</span> s2 = s1;\ns1 += <span class=\"hljs-string\">\"World\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 30,
        "text": "System.Console.WriteLine(s2);\n<span class=\"hljs-comment\">//Output: Hello</span>\n</code></pre>\n<p>For more information about how to create new strings that are based on modifications such as search and replace operations on the original string, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/how-to/modify-string-contents\" data-linktype=\"relative-path\">How to modify string contents</a>.</p>\n<h2 id=\"regular-and-verbatim-string-literals\">Regular and Verbatim String Literals</h2>"
    },
    {
        "page_index": 38,
        "chunk_index": 31,
        "text": "<p>Use regular string literals when you must embed escape characters provided by C#, as shown in the following example:</p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string columns = &quot;Column 1\\tColumn 2\\tColumn 3&quot;;\n//Output: Column 1        Column 2        Column 3"
    },
    {
        "page_index": 38,
        "chunk_index": 32,
        "text": "string rows = &quot;Row 1\\r\\nRow 2\\r\\nRow 3&quot;;\n/* Output:\n  Row 1\n  Row 2\n  Row 3\n*/\n\nstring title = &quot;\\&quot;The \\u00C6olean Harp\\&quot;, by Samuel Taylor Coleridge&quot;;\n//Output: &quot;The Æolean Harp&quot;, by Samuel Taylor Coleridge\n\"><span class=\"hljs-keyword\">string</span> columns = <span class=\"hljs-string\">\"Column 1\\tColumn 2\\tColumn 3\"</span>;\n<span class=\"hljs-comment\">//Output: Column 1        Column 2        Column 3</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 33,
        "text": "<span class=\"hljs-keyword\">string</span> rows = <span class=\"hljs-string\">\"Row 1\\r\\nRow 2\\r\\nRow 3\"</span>;\n<span class=\"hljs-comment\">/* Output:\n  Row 1\n  Row 2\n  Row 3\n*/</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 34,
        "text": "<span class=\"hljs-keyword\">string</span> title = <span class=\"hljs-string\">\"\\\"The \\u00C6olean Harp\\\", by Samuel Taylor Coleridge\"</span>;\n<span class=\"hljs-comment\">//Output: \"The Æolean Harp\", by Samuel Taylor Coleridge</span>\n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 35,
        "text": "</code></pre>\n<p>Use verbatim strings for convenience and better readability when the string text contains backslash characters, for example in file paths. Because verbatim strings preserve new line characters as part of the string text, they can be used to initialize multiline strings. Use double quotation marks to embed a quotation mark inside a verbatim string. The following example shows some common uses for verbatim strings:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 36,
        "text": "<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string filePath = @&quot;C:\\Users\\scoleridge\\Documents\\&quot;;\n//Output: C:\\Users\\scoleridge\\Documents\\"
    },
    {
        "page_index": 38,
        "chunk_index": 37,
        "text": "string text = @&quot;My pensive SARA ! thy soft cheek reclined\n    Thus on mine arm, most soothing sweet it is\n    To sit beside our Cot,...&quot;;\n/* Output:\nMy pensive SARA ! thy soft cheek reclined\n   Thus on mine arm, most soothing sweet it is\n   To sit beside our Cot,... \n*/"
    },
    {
        "page_index": 38,
        "chunk_index": 38,
        "text": "string quote = @&quot;Her name was &quot;&quot;Sara.&quot;&quot;&quot;;\n//Output: Her name was &quot;Sara.&quot;\n\"><span class=\"hljs-keyword\">string</span> filePath = <span class=\"hljs-string\">@\"C:\\Users\\scoleridge\\Documents\\\"</span>;\n<span class=\"hljs-comment\">//Output: C:\\Users\\scoleridge\\Documents\\</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 39,
        "text": "<span class=\"hljs-keyword\">string</span> text = <span class=\"hljs-string\">@\"My pensive SARA ! thy soft cheek reclined\n    Thus on mine arm, most soothing sweet it is\n    To sit beside our Cot,...\"</span>;\n<span class=\"hljs-comment\">/* Output:\nMy pensive SARA ! thy soft cheek reclined\n   Thus on mine arm, most soothing sweet it is\n   To sit beside our Cot,... \n*/</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 40,
        "text": "<span class=\"hljs-keyword\">string</span> quote = <span class=\"hljs-string\">@\"Her name was \"\"Sara.\"\"\"</span>;\n<span class=\"hljs-comment\">//Output: Her name was \"Sara.\"</span>\n</code></pre>\n<h2 id=\"string-escape-sequences\">String Escape Sequences</h2>\n<div class=\"table-scroll-wrapper\">\n<table>\n<thead>\n<tr>\n<th>Escape sequence</th>\n<th>Character name</th>\n<th>Unicode encoding</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\'</td>\n<td>Single quote</td>\n<td>0x0027</td>\n</tr>\n<tr>\n<td>\\\"</td>"
    },
    {
        "page_index": 38,
        "chunk_index": 41,
        "text": "<td>0x0027</td>\n</tr>\n<tr>\n<td>\\\"</td>\n<td>Double quote</td>\n<td>0x0022</td>\n</tr>\n<tr>\n<td>\\\\</td>\n<td>Backslash</td>\n<td>0x005C</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>Null</td>\n<td>0x0000</td>\n</tr>\n<tr>\n<td>\\a</td>\n<td>Alert</td>\n<td>0x0007</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>Backspace</td>\n<td>0x0008</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>Form feed</td>\n<td>0x000C</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>New line</td>\n<td>0x000A</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>Carriage return</td>\n<td>0x000D</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 38,
        "chunk_index": 42,
        "text": "<td>0x000D</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>Horizontal tab</td>\n<td>0x0009</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>Vertical tab</td>\n<td>0x000B</td>\n</tr>\n<tr>\n<td>\\u</td>\n<td>Unicode escape sequence (UTF-16)</td>\n<td>\n<code>\\uHHHH</code>&nbsp;(range: 0000 - FFFF; example:&nbsp;<code>\\u00E7</code>&nbsp;= \"ç\")</td>\n</tr>\n<tr>\n<td>\\U</td>\n<td>Unicode escape sequence (UTF-32)</td>\n<td>\n<code>\\U00HHHHHH</code>&nbsp;(range: 000000 - 10FFFF; example:&nbsp;<code>\\U0001F47D</code>&nbsp;= \"👽\")</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 38,
        "chunk_index": 43,
        "text": "</tr>\n<tr>\n<td>\\x</td>\n<td>Unicode escape sequence similar to \"\\u\" except with variable length</td>\n<td>\n<code>\\xH[H][H][H]</code>&nbsp;(range: 0 - FFFF; example:&nbsp;<code>\\x00E7</code>&nbsp;or&nbsp;<code>\\x0E7</code>&nbsp;or&nbsp;<code>\\xE7</code>&nbsp;= \"ç\")</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"alert is-warning\">\n<p><span style=\"font-family: sans-serif; font-size: 1rem;\">&nbsp;Note</span></p>\n</div>\n<div class=\"alert is-info\">"
    },
    {
        "page_index": 38,
        "chunk_index": 44,
        "text": "</div>\n<div class=\"alert is-info\">\n<p>At compile time, verbatim strings are converted to ordinary strings with all the same escape sequences. Therefore, if you view a verbatim string in the debugger watch window, you will see the escape characters that were added by the compiler, not the verbatim version from your source code. For example, the verbatim string&nbsp;<code>@\"C:\\files.txt\"</code>&nbsp;will appear in the watch window as \"C:\\\\files.txt\".</p>\n</div>"
    },
    {
        "page_index": 38,
        "chunk_index": 45,
        "text": "</div>\n<h2 id=\"format-strings\">Format Strings</h2>\n<p>A format string is a string whose contents are determined dynamically at runtime. Format strings are created by embedding&nbsp;<em>interpolated expressions</em>&nbsp;or placeholders inside of braces within a string. Everything inside the braces (<code>{...}</code>) will be resolved to a value and output as a formatted string at runtime. There are two methods to create format strings: string interpolation and composite formatting.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 46,
        "text": "<h3 id=\"string-interpolation\">String Interpolation<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"string-interpolation\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#string-interpolation\"></a>\n</h3>"
    },
    {
        "page_index": 38,
        "chunk_index": 47,
        "text": "<p>Available in C# 6.0 and later,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated\" data-linktype=\"relative-path\"><em>interpolated strings</em></a>&nbsp;are identified by the&nbsp;<code>$</code>&nbsp;special character and include interpolated expressions in braces. If you are new to string interpolation, see the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/exploration/interpolated-strings\""
    },
    {
        "page_index": 38,
        "chunk_index": 48,
        "text": "data-linktype=\"relative-path\">String interpolation - C# interactive tutorial</a>&nbsp;for a quick overview.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 49,
        "text": "<p>Use string interpolation to improve the readability and maintainability of your code. String interpolation achieves the same results as the&nbsp;<code>String.Format</code>&nbsp;method, but improves ease of use and inline clarity.</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 38,
        "chunk_index": 50,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var jh = (firstName: &quot;Jupiter&quot;, lastName: &quot;Hammon&quot;, born: 1711, published: 1761);\nConsole.WriteLine($&quot;{jh.firstName} {jh.lastName} was an African American poet born in {jh.born}.&quot;);\nConsole.WriteLine($&quot;He was first published in {jh.published} at the age of {jh.published - jh.born}.&quot;);"
    },
    {
        "page_index": 38,
        "chunk_index": 51,
        "text": "Console.WriteLine($&quot;He'd be over {Math.Round((2018d - jh.born) / 100d) * 100d} years old today.&quot;);"
    },
    {
        "page_index": 38,
        "chunk_index": 52,
        "text": "// Output:\n// Jupiter Hammon was an African American poet born in 1711.\n// He was first published in 1761 at the age of 50.\n// He'd be over 300 years old today. \n\"><span class=\"hljs-keyword\">var</span> jh = (firstName: <span class=\"hljs-string\">\"Jupiter\"</span>, lastName: <span class=\"hljs-string\">\"Hammon\"</span>, born: <span class=\"hljs-number\">1711</span>, published: <span class=\"hljs-number\">1761</span>);"
    },
    {
        "page_index": 38,
        "chunk_index": 53,
        "text": "Console.WriteLine(<span class=\"hljs-string\">$\"<span class=\"hljs-subst\">{jh.firstName}</span> <span class=\"hljs-subst\">{jh.lastName}</span> was an African American poet born in <span class=\"hljs-subst\">{jh.born}</span>.\"</span>);\nConsole.WriteLine(<span class=\"hljs-string\">$\"He was first published in <span class=\"hljs-subst\">{jh.published}</span> at the age of <span class=\"hljs-subst\">{jh.published - jh.born}</span>.\"</span>);"
    },
    {
        "page_index": 38,
        "chunk_index": 54,
        "text": "Console.WriteLine(<span class=\"hljs-string\">$\"He'd be over <span class=\"hljs-subst\">{Math.Round((<span class=\"hljs-number\">2018</span>d - jh.born) / <span class=\"hljs-number\">100</span>d) * <span class=\"hljs-number\">100</span>d}</span> years old today.\"</span>);"
    },
    {
        "page_index": 38,
        "chunk_index": 55,
        "text": "<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Jupiter Hammon was an African American poet born in 1711.</span>\n<span class=\"hljs-comment\">// He was first published in 1761 at the age of 50.</span>\n<span class=\"hljs-comment\">// He'd be over 300 years old today. </span>\n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 56,
        "text": "</code></pre>\n<h3 id=\"composite-formatting\">Composite Formatting<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"composite-formatting\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/strings/#composite-formatting\"></a>\n</h3>"
    },
    {
        "page_index": 38,
        "chunk_index": 57,
        "text": "</h3>\n<p>The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.format\" data-linktype=\"absolute-path\">String.Format</a>&nbsp;utilizes placeholders in braces to create a format string. This example results in similar output to the string interpolation method used above.</p>\n<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 38,
        "chunk_index": 58,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var pw = (firstName: &quot;Phillis&quot;, lastName: &quot;Wheatley&quot;, born: 1753, published: 1773);\nConsole.WriteLine(&quot;{0} {1} was an African American poet born in {2}.&quot;, pw.firstName, pw.lastName, pw.born);\nConsole.WriteLine(&quot;She was first published in {0} at the age of {1}.&quot;, pw.published, pw.published - pw.born);"
    },
    {
        "page_index": 38,
        "chunk_index": 59,
        "text": "Console.WriteLine(&quot;She'd be over {0} years old today.&quot;, Math.Round((2018d - pw.born) / 100d) * 100d);"
    },
    {
        "page_index": 38,
        "chunk_index": 60,
        "text": "// Output:\n// Phillis Wheatley was an African American poet born in 1753.\n// She was first published in 1773 at the age of 20.\n// She'd be over 300 years old today.\n\"><span class=\"hljs-keyword\">var</span> pw = (firstName: <span class=\"hljs-string\">\"Phillis\"</span>, lastName: <span class=\"hljs-string\">\"Wheatley\"</span>, born: <span class=\"hljs-number\">1753</span>, published: <span class=\"hljs-number\">1773</span>);"
    },
    {
        "page_index": 38,
        "chunk_index": 61,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"{0} {1} was an African American poet born in {2}.\"</span>, pw.firstName, pw.lastName, pw.born);\nConsole.WriteLine(<span class=\"hljs-string\">\"She was first published in {0} at the age of {1}.\"</span>, pw.published, pw.published - pw.born);"
    },
    {
        "page_index": 38,
        "chunk_index": 62,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"She'd be over {0} years old today.\"</span>, Math.Round((<span class=\"hljs-number\">2018</span>d - pw.born) / <span class=\"hljs-number\">100</span>d) * <span class=\"hljs-number\">100</span>d);"
    },
    {
        "page_index": 38,
        "chunk_index": 63,
        "text": "<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Phillis Wheatley was an African American poet born in 1753.</span>\n<span class=\"hljs-comment\">// She was first published in 1773 at the age of 20.</span>\n<span class=\"hljs-comment\">// She'd be over 300 years old today.</span>\n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 64,
        "text": "</code></pre>\n<p>For more information on formatting .NET types see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types\" data-linktype=\"relative-path\">Formatting Types in .NET</a>.</p>\n<h2 id=\"substrings\">Substrings</h2>"
    },
    {
        "page_index": 38,
        "chunk_index": 65,
        "text": "<p>A substring is any sequence of characters that is contained in a string. Use the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.substring\" data-linktype=\"absolute-path\">Substring</a>&nbsp;method to create a new string from a part of the original string. You can search for one or more occurrences of a substring by using the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.indexof\""
    },
    {
        "page_index": 38,
        "chunk_index": 66,
        "text": "data-linktype=\"absolute-path\">IndexOf</a>&nbsp;method. Use the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.replace\" data-linktype=\"absolute-path\">Replace</a>&nbsp;method to replace all occurrences of a specified substring with a new string. Like the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.substring\" data-linktype=\"absolute-path\">Substring</a>&nbsp;method,&nbsp;<a class=\"xref\""
    },
    {
        "page_index": 38,
        "chunk_index": 67,
        "text": "class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.replace\" data-linktype=\"absolute-path\">Replace</a>&nbsp;actually returns a new string and does not modify the original string. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/how-to/search-strings\" data-linktype=\"relative-path\">How to search strings</a>&nbsp;and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/how-to/modify-string-contents\""
    },
    {
        "page_index": 38,
        "chunk_index": 68,
        "text": "data-linktype=\"relative-path\">How to modify string contents</a>.</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 69,
        "text": "<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string s3 = &quot;Visual C# Express&quot;;\nSystem.Console.WriteLine(s3.Substring(7, 2));\n// Output: &quot;C#&quot;"
    },
    {
        "page_index": 38,
        "chunk_index": 70,
        "text": "System.Console.WriteLine(s3.Replace(&quot;C#&quot;, &quot;Basic&quot;));\n// Output: &quot;Visual Basic Express&quot;\n\n// Index values are zero-based\nint index = s3.IndexOf(&quot;C&quot;);\n// index = 7\n\"><span class=\"hljs-keyword\">string</span> s3 = <span class=\"hljs-string\">\"Visual C# Express\"</span>;\nSystem.Console.WriteLine(s3.Substring(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>));\n<span class=\"hljs-comment\">// Output: \"C#\"</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 71,
        "text": "System.Console.WriteLine(s3.Replace(<span class=\"hljs-string\">\"C#\"</span>, <span class=\"hljs-string\">\"Basic\"</span>));\n<span class=\"hljs-comment\">// Output: \"Visual Basic Express\"</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 72,
        "text": "<span class=\"hljs-comment\">// Index values are zero-based</span>\n<span class=\"hljs-keyword\">int</span> index = s3.IndexOf(<span class=\"hljs-string\">\"C\"</span>);\n<span class=\"hljs-comment\">// index = 7</span>\n</code></pre>\n<h2 id=\"accessing-individual-characters\">Accessing Individual Characters</h2>\n<p>You can use array notation with an index value to acquire read-only access to individual characters, as in the following example:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 73,
        "text": "<div id=\"code-try-8\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string s5 = &quot;Printing backwards&quot;;"
    },
    {
        "page_index": 38,
        "chunk_index": 74,
        "text": "for (int i = 0; i < s5.Length; i++)\n{\n    System.Console.Write(s5[s5.Length - i - 1]);\n}\n// Output: &quot;sdrawkcab gnitnirP&quot;\n\"><span class=\"hljs-keyword\">string</span> s5 = <span class=\"hljs-string\">\"Printing backwards\"</span>;"
    },
    {
        "page_index": 38,
        "chunk_index": 75,
        "text": "<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s5.Length; i++)\n{\n    System.Console.Write(s5[s5.Length - i - <span class=\"hljs-number\">1</span>]);\n}\n<span class=\"hljs-comment\">// Output: \"sdrawkcab gnitnirP\"</span>\n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 76,
        "text": "<p>If the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">String</a>&nbsp;methods do not provide the functionality that you must have to modify individual characters in a string, you can use a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder\" data-linktype=\"absolute-path\">StringBuilder</a>&nbsp;object to modify the individual chars \"in-place\", and then create a new string to store"
    },
    {
        "page_index": 38,
        "chunk_index": 77,
        "text": "\"in-place\", and then create a new string to store the results by using the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder\" data-linktype=\"absolute-path\">StringBuilder</a>&nbsp;methods. In the following example, assume that you must modify the original string in a particular way and then store the results for future use:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 78,
        "text": "<div id=\"code-try-9\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string question = &quot;hOW DOES mICROSOFT wORD DEAL WITH THE cAPS lOCK KEY?&quot;;\nSystem.Text.StringBuilder sb = new System.Text.StringBuilder(question);"
    },
    {
        "page_index": 38,
        "chunk_index": 79,
        "text": "for (int j = 0; j < sb.Length; j++)\n{\n    if (System.Char.IsLower(sb[j]) == true)\n        sb[j] = System.Char.ToUpper(sb[j]);\n    else if (System.Char.IsUpper(sb[j]) == true)\n        sb[j] = System.Char.ToLower(sb[j]);\n}\n// Store the new string.\nstring corrected = sb.ToString();\nSystem.Console.WriteLine(corrected);\n// Output: How does Microsoft Word deal with the Caps Lock key?"
    },
    {
        "page_index": 38,
        "chunk_index": 80,
        "text": "\"><span class=\"hljs-keyword\">string</span> question = <span class=\"hljs-string\">\"hOW DOES mICROSOFT wORD DEAL WITH THE cAPS lOCK KEY?\"</span>;\nSystem.Text.StringBuilder sb = <span class=\"hljs-keyword\">new</span> System.Text.StringBuilder(question);"
    },
    {
        "page_index": 38,
        "chunk_index": 81,
        "text": "<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; sb.Length; j++)\n{\n    <span class=\"hljs-keyword\">if</span> (System.Char.IsLower(sb[j]) == <span class=\"hljs-literal\">true</span>)\n        sb[j] = System.Char.ToUpper(sb[j]);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (System.Char.IsUpper(sb[j]) == <span class=\"hljs-literal\">true</span>)\n        sb[j] = System.Char.ToLower(sb[j]);\n}"
    },
    {
        "page_index": 38,
        "chunk_index": 82,
        "text": "sb[j] = System.Char.ToLower(sb[j]);\n}\n<span class=\"hljs-comment\">// Store the new string.</span>\n<span class=\"hljs-keyword\">string</span> corrected = sb.ToString();\nSystem.Console.WriteLine(corrected);\n<span class=\"hljs-comment\">// Output: How does Microsoft Word deal with the Caps Lock key?            </span>\n</code></pre>\n<h2 id=\"null-strings-and-empty-strings\">Null Strings and Empty Strings</h2>"
    },
    {
        "page_index": 38,
        "chunk_index": 83,
        "text": "<p>An empty string is an instance of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">System.String</a>&nbsp;object that contains zero characters. Empty strings are used often in various programming scenarios to represent a blank text field. You can call methods on empty strings because they are valid&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\""
    },
    {
        "page_index": 38,
        "chunk_index": 84,
        "text": "data-linktype=\"absolute-path\">System.String</a>&nbsp;objects. Empty strings are initialized as follows:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 85,
        "text": "<div id=\"code-try-10\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"string s = String.Empty;  \n\"><span class=\"hljs-keyword\">string</span> s = String.Empty;  \n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 86,
        "text": "<p>By contrast, a null string does not refer to an instance of a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" data-linktype=\"absolute-path\">System.String</a>&nbsp;object and any attempt to call a method on a null string causes a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\" data-linktype=\"absolute-path\">NullReferenceException</a>. However, you can use null strings in concatenation and comparison"
    },
    {
        "page_index": 38,
        "chunk_index": 87,
        "text": "use null strings in concatenation and comparison operations with other strings. The following examples illustrate some cases in which a reference to a null string does and does not cause an exception to be thrown:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 88,
        "text": "<div id=\"code-try-11\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"static void Main()\n{\n    string str = &quot;hello&quot;;\n    string nullStr = null;\n    string emptyStr = String.Empty;"
    },
    {
        "page_index": 38,
        "chunk_index": 89,
        "text": "string tempStr = str + nullStr;\n    // Output of the following line: hello\n    Console.WriteLine(tempStr);\n\n    bool b = (emptyStr == nullStr);\n    // Output of the following line: False\n    Console.WriteLine(b);\n\n    // The following line creates a new empty string.\n    string newStr = emptyStr + nullStr;"
    },
    {
        "page_index": 38,
        "chunk_index": 90,
        "text": "// Null strings and empty strings behave differently. The following\n    // two lines display 0.\n    Console.WriteLine(emptyStr.Length);\n    Console.WriteLine(newStr.Length);\n    // The following line raises a NullReferenceException.\n    //Console.WriteLine(nullStr.Length);"
    },
    {
        "page_index": 38,
        "chunk_index": 91,
        "text": "// The null character can be displayed and counted, like other chars.\n    string s1 = &quot;\\x0&quot; + &quot;abc&quot;;\n    string s2 = &quot;abc&quot; + &quot;\\x0&quot;;\n    // Output of the following line: * abc*\n    Console.WriteLine(&quot;*&quot; + s1 + &quot;*&quot;);\n    // Output of the following line: *abc *\n    Console.WriteLine(&quot;*&quot; + s2 + &quot;*&quot;);\n    // Output of the following line: 4\n    Console.WriteLine(s2.Length);\n}"
    },
    {
        "page_index": 38,
        "chunk_index": 92,
        "text": "Console.WriteLine(s2.Length);\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n{\n    <span class=\"hljs-keyword\">string</span> str = <span class=\"hljs-string\">\"hello\"</span>;\n    <span class=\"hljs-keyword\">string</span> nullStr = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">string</span> emptyStr = String.Empty;"
    },
    {
        "page_index": 38,
        "chunk_index": 93,
        "text": "<span class=\"hljs-keyword\">string</span> tempStr = str + nullStr;\n    <span class=\"hljs-comment\">// Output of the following line: hello</span>\n    Console.WriteLine(tempStr);\n\n    <span class=\"hljs-keyword\">bool</span> b = (emptyStr == nullStr);\n    <span class=\"hljs-comment\">// Output of the following line: False</span>\n    Console.WriteLine(b);"
    },
    {
        "page_index": 38,
        "chunk_index": 94,
        "text": "<span class=\"hljs-comment\">// The following line creates a new empty string.</span>\n    <span class=\"hljs-keyword\">string</span> newStr = emptyStr + nullStr;"
    },
    {
        "page_index": 38,
        "chunk_index": 95,
        "text": "<span class=\"hljs-comment\">// Null strings and empty strings behave differently. The following</span>\n    <span class=\"hljs-comment\">// two lines display 0.</span>\n    Console.WriteLine(emptyStr.Length);\n    Console.WriteLine(newStr.Length);\n    <span class=\"hljs-comment\">// The following line raises a NullReferenceException.</span>\n    <span class=\"hljs-comment\">//Console.WriteLine(nullStr.Length);</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 96,
        "text": "<span class=\"hljs-comment\">// The null character can be displayed and counted, like other chars.</span>\n    <span class=\"hljs-keyword\">string</span> s1 = <span class=\"hljs-string\">\"\\x0\"</span> + <span class=\"hljs-string\">\"abc\"</span>;\n    <span class=\"hljs-keyword\">string</span> s2 = <span class=\"hljs-string\">\"abc\"</span> + <span class=\"hljs-string\">\"\\x0\"</span>;\n    <span class=\"hljs-comment\">// Output of the following line: * abc*</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 97,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"*\"</span> + s1 + <span class=\"hljs-string\">\"*\"</span>);\n    <span class=\"hljs-comment\">// Output of the following line: *abc *</span>\n    Console.WriteLine(<span class=\"hljs-string\">\"*\"</span> + s2 + <span class=\"hljs-string\">\"*\"</span>);\n    <span class=\"hljs-comment\">// Output of the following line: 4</span>\n    Console.WriteLine(s2.Length);\n}\n</code></pre>"
    },
    {
        "page_index": 38,
        "chunk_index": 98,
        "text": "Console.WriteLine(s2.Length);\n}\n</code></pre>\n<h2 id=\"using-stringbuilder-for-fast-string-creation\">Using StringBuilder for Fast String Creation</h2>"
    },
    {
        "page_index": 38,
        "chunk_index": 99,
        "text": "<p>String operations in .NET are highly optimized and in most cases do not significantly impact performance. However, in some scenarios such as tight loops that are executing many hundreds or thousands of times, string operations can affect performance. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder\" data-linktype=\"absolute-path\">StringBuilder</a>&nbsp;class creates a string buffer that offers better performance if your program performs many"
    },
    {
        "page_index": 38,
        "chunk_index": 100,
        "text": "better performance if your program performs many string manipulations. The&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder\" data-linktype=\"absolute-path\">StringBuilder</a>&nbsp;string also enables you to reassign individual characters, something the built-in string data type does not support. This code, for example, changes the content of a string without creating a new string:</p>"
    },
    {
        "page_index": 38,
        "chunk_index": 101,
        "text": "<div id=\"code-try-12\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"System.Text.StringBuilder sb = new System.Text.StringBuilder(&quot;Rat: the ideal pet&quot;);\nsb[0] = 'C';\nSystem.Console.WriteLine(sb.ToString());\nSystem.Console.ReadLine();"
    },
    {
        "page_index": 38,
        "chunk_index": 102,
        "text": "//Outputs Cat: the ideal pet\n\">System.Text.StringBuilder sb = <span class=\"hljs-keyword\">new</span> System.Text.StringBuilder(<span class=\"hljs-string\">\"Rat: the ideal pet\"</span>);\nsb[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">'C'</span>;\nSystem.Console.WriteLine(sb.ToString());\nSystem.Console.ReadLine();"
    },
    {
        "page_index": 38,
        "chunk_index": 103,
        "text": "<span class=\"hljs-comment\">//Outputs Cat: the ideal pet</span>\n</code></pre>\n<p>In this example, a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder\" data-linktype=\"absolute-path\">StringBuilder</a>&nbsp;object is used to create a string from a set of numeric types:</p>\n<div id=\"code-try-13\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 38,
        "chunk_index": 104,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;\nusing System.Text;"
    },
    {
        "page_index": 38,
        "chunk_index": 105,
        "text": "namespace CSRefStrings\n{\n    class TestStringBuilder\n    {\n        static void Main()\n        {\n            var sb = new StringBuilder();\n\n            // Create a string composed of numbers 0 - 9\n            for (int i = 0; i < 10; i++)\n            {\n                sb.Append(i.ToString());\n            }\n            Console.WriteLine(sb);  // displays 0123456789\n\n            // Copy one character of the string (not possible with a System.String)\n            sb[0] = sb[9];"
    },
    {
        "page_index": 38,
        "chunk_index": 106,
        "text": "Console.WriteLine(sb);  // displays 9123456789\n            Console.WriteLine();\n        }\n    }\n}\n\"><span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Text;"
    },
    {
        "page_index": 38,
        "chunk_index": 107,
        "text": "<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">CSRefStrings</span>\n{\n    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestStringBuilder</span>\n    {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n        {\n            <span class=\"hljs-keyword\">var</span> sb = <span class=\"hljs-keyword\">new</span> StringBuilder();"
    },
    {
        "page_index": 38,
        "chunk_index": 108,
        "text": "<span class=\"hljs-comment\">// Create a string composed of numbers 0 - 9</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n            {\n                sb.Append(i.ToString());\n            }\n            Console.WriteLine(sb);  <span class=\"hljs-comment\">// displays 0123456789</span>"
    },
    {
        "page_index": 38,
        "chunk_index": 109,
        "text": "<span class=\"hljs-comment\">// Copy one character of the string (not possible with a System.String)</span>\n            sb[<span class=\"hljs-number\">0</span>] = sb[<span class=\"hljs-number\">9</span>];\n\n            Console.WriteLine(sb);  <span class=\"hljs-comment\">// displays 9123456789</span>\n            Console.WriteLine();\n        }\n    }\n}</code></pre>"
    },
    {
        "page_index": 39,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"Exceptions.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026327/download?verifier=c3Y7qmQv513hi0yTIly9TGs1I8gUOj5CqDEXdIiF&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026327\" data-api-returntype=\"File\">Exceptions.pdf</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/pGiuoIppsw8\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 40,
        "chunk_index": 0,
        "text": "<h1 id=\"using-exceptions-c-programming-guide\">Using Exceptions&nbsp;</h1>"
    },
    {
        "page_index": 40,
        "chunk_index": 1,
        "text": "<p>In C#, errors in the program at run time are propagated through the program by using a mechanism called exceptions. Exceptions are thrown by code that encounters an error and caught by code that can correct the error. Exceptions can be thrown by the .NET Framework common language runtime (CLR) or by code in a program. Once an exception is thrown, it propagates up the call stack until a&nbsp;<code>catch</code>&nbsp;statement for the exception is found. Uncaught exceptions are handled by a"
    },
    {
        "page_index": 40,
        "chunk_index": 2,
        "text": "is found. Uncaught exceptions are handled by a generic exception handler provided by the system that displays a dialog box.</p>"
    },
    {
        "page_index": 40,
        "chunk_index": 3,
        "text": "<p>Exceptions are represented by classes derived from&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception\" data-linktype=\"absolute-path\">Exception</a>. This class identifies the type of exception and contains properties that have details about the exception. Throwing an exception involves creating an instance of an exception-derived class, optionally configuring properties of the exception, and then throwing the object by using the&nbsp;<code>throw</code>&nbsp;keyword."
    },
    {
        "page_index": 40,
        "chunk_index": 4,
        "text": "using the&nbsp;<code>throw</code>&nbsp;keyword. For example:</p>"
    },
    {
        "page_index": 40,
        "chunk_index": 5,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"\n       class CustomException : Exception"
    },
    {
        "page_index": 40,
        "chunk_index": 6,
        "text": "class CustomException : Exception\n       {\n           public CustomException(string message)\n           {\n              \n           }"
    },
    {
        "page_index": 40,
        "chunk_index": 7,
        "text": "}\n       private static void TestThrow()\n       {\n           CustomException ex =\n               new CustomException(&quot;Custom exception in TestThrow()&quot;);"
    },
    {
        "page_index": 40,
        "chunk_index": 8,
        "text": "throw ex;\n       }\n\">\n       <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomException</span> : <span class=\"hljs-title\">Exception</span>\n       {\n           <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CustomException</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> message</span>)</span>\n           {\n              \n           }"
    },
    {
        "page_index": 40,
        "chunk_index": 9,
        "text": "}\n       <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">TestThrow</span>()</span>\n       {\n           CustomException ex =\n               <span class=\"hljs-keyword\">new</span> CustomException(<span class=\"hljs-string\">\"Custom exception in TestThrow()\"</span>);"
    },
    {
        "page_index": 40,
        "chunk_index": 10,
        "text": "<span class=\"hljs-keyword\">throw</span> ex;\n       }\n</code></pre>"
    },
    {
        "page_index": 40,
        "chunk_index": 11,
        "text": "<p>After an exception is thrown, the runtime checks the current statement to see whether it is within a&nbsp;<code>try</code>&nbsp;block. If it is, any&nbsp;<code>catch</code>&nbsp;blocks associated with the&nbsp;<code>try</code>&nbsp;block are checked to see whether they can catch the exception.&nbsp;<code>Catch</code>&nbsp;blocks typically specify exception types; if the type of the&nbsp;<code>catch</code>&nbsp;block is the same type as the exception, or a base class of the exception,"
    },
    {
        "page_index": 40,
        "chunk_index": 12,
        "text": "the exception, or a base class of the exception, the&nbsp;<code>catch</code>&nbsp;block can handle the method. For example:</p>"
    },
    {
        "page_index": 40,
        "chunk_index": 13,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"static void TestCatch()\n{\n    try\n    {\n        TestThrow();\n    }\n    catch (CustomException ex)\n    {\n        System.Console.WriteLine(ex.ToString());\n    }\n}"
    },
    {
        "page_index": 40,
        "chunk_index": 14,
        "text": "}\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">TestCatch</span>()</span>\n{\n    <span class=\"hljs-keyword\">try</span>\n    {\n        TestThrow();\n    }\n    <span class=\"hljs-keyword\">catch</span> (CustomException ex)\n    {\n        System.Console.WriteLine(ex.ToString());\n    }\n}\n</code></pre>"
    },
    {
        "page_index": 40,
        "chunk_index": 15,
        "text": "<p>If the statement that throws an exception is not within a&nbsp;<code>try</code>&nbsp;block or if the&nbsp;<code>try</code>&nbsp;block that encloses it has no matching&nbsp;<code>catch</code>&nbsp;block, the runtime checks the calling method for a&nbsp;<code>try</code>&nbsp;statement and&nbsp;<code>catch</code>&nbsp;blocks. The runtime continues up the calling stack, searching for a compatible&nbsp;<code>catch</code>&nbsp;block. After the&nbsp;<code>catch</code>&nbsp;block is found and"
    },
    {
        "page_index": 40,
        "chunk_index": 16,
        "text": "is found and executed, control is passed to the next statement after that&nbsp;<code>catch</code>&nbsp;block.</p>"
    },
    {
        "page_index": 40,
        "chunk_index": 17,
        "text": "<p>A&nbsp;<code>try</code>&nbsp;statement can contain more than one&nbsp;<code>catch</code>&nbsp;block. The first&nbsp;<code>catch</code>&nbsp;statement that can handle the exception is executed; any following&nbsp;<code>catch</code>&nbsp;statements, even if they are compatible, are ignored. Therefore, catch blocks should always be ordered from most specific (or most-derived) to least specific. For example:</p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\">"
    },
    {
        "page_index": 40,
        "chunk_index": 18,
        "text": "<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;\nusing System.IO;"
    },
    {
        "page_index": 40,
        "chunk_index": 19,
        "text": "public class ExceptionExample\n{\n    static void Main()\n    {\n        try\n        {\n            using (var sw = new StreamWriter(@&quot;C:\\test\\test.txt&quot;))\n            {\n                sw.WriteLine(&quot;Hello&quot;);\n            }   \n        }\n        // Put the more specific exceptions first.\n        catch (DirectoryNotFoundException ex)\n        {\n            Console.WriteLine(ex);  \n        }\n        catch (FileNotFoundException ex)\n        {\n            Console.WriteLine(ex);"
    },
    {
        "page_index": 40,
        "chunk_index": 20,
        "text": "{\n            Console.WriteLine(ex);  \n        }\n        // Put the least specific exception last.\n        catch (IOException ex)\n        {\n            Console.WriteLine(ex);  \n        }"
    },
    {
        "page_index": 40,
        "chunk_index": 21,
        "text": "Console.WriteLine(&quot;Done&quot;); \n    }\n}\n\"><span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.IO;"
    },
    {
        "page_index": 40,
        "chunk_index": 22,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExceptionExample</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-keyword\">try</span>\n        {"
    },
    {
        "page_index": 40,
        "chunk_index": 23,
        "text": "{\n            <span class=\"hljs-keyword\">using</span> (<span class=\"hljs-keyword\">var</span> sw = <span class=\"hljs-keyword\">new</span> StreamWriter(<span class=\"hljs-string\">@\"C:\\test\\test.txt\"</span>))\n            {\n                sw.WriteLine(<span class=\"hljs-string\">\"Hello\"</span>);\n            }   \n        }\n        <span class=\"hljs-comment\">// Put the more specific exceptions first.</span>\n        <span class=\"hljs-keyword\">catch</span> (DirectoryNotFoundException ex)\n        {"
    },
    {
        "page_index": 40,
        "chunk_index": 24,
        "text": "{\n            Console.WriteLine(ex);  \n        }\n        <span class=\"hljs-keyword\">catch</span> (FileNotFoundException ex)\n        {\n            Console.WriteLine(ex);  \n        }\n        <span class=\"hljs-comment\">// Put the least specific exception last.</span>\n        <span class=\"hljs-keyword\">catch</span> (IOException ex)\n        {\n            Console.WriteLine(ex);  \n        }"
    },
    {
        "page_index": 40,
        "chunk_index": 25,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"Done\"</span>); \n    }\n}\n</code></pre>"
    },
    {
        "page_index": 40,
        "chunk_index": 26,
        "text": "<p>Before the&nbsp;<code>catch</code>&nbsp;block is executed, the runtime checks for&nbsp;<code>finally</code>&nbsp;blocks.&nbsp;<code>Finally</code>&nbsp;blocks enable the programmer to clean up any ambiguous state that could be left over from an aborted&nbsp;<code>try</code>&nbsp;block, or to release any external resources (such as graphics handles, database connections or file streams) without waiting for the garbage collector in the runtime to finalize the objects. For example:</p>"
    },
    {
        "page_index": 40,
        "chunk_index": 27,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"static void TestFinally()\n{"
    },
    {
        "page_index": 40,
        "chunk_index": 28,
        "text": "{\n    System.IO.FileStream file = null;\n    //Change the path to something that works on your machine.\n    System.IO.FileInfo fileInfo = new System.IO.FileInfo(@&quot;C:\\file.txt&quot;);"
    },
    {
        "page_index": 40,
        "chunk_index": 29,
        "text": "try\n    {\n        file = fileInfo.OpenWrite();\n        file.WriteByte(0xF);\n    }\n    finally\n    {\n        // Closing the file allows you to reopen it immediately - otherwise IOException is thrown.\n        if (file != null)\n        {\n            file.Close();\n        }\n    }"
    },
    {
        "page_index": 40,
        "chunk_index": 30,
        "text": "try\n    {\n        file = fileInfo.OpenWrite();\n        System.Console.WriteLine(&quot;OpenWrite() succeeded&quot;);\n    }\n    catch (System.IO.IOException)\n    {\n        System.Console.WriteLine(&quot;OpenWrite() failed&quot;);\n    }\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">TestFinally</span>()</span>\n{\n    System.IO.FileStream file = <span class=\"hljs-literal\">null</span>;"
    },
    {
        "page_index": 40,
        "chunk_index": 31,
        "text": "<span class=\"hljs-comment\">//Change the path to something that works on your machine.</span>\n    System.IO.FileInfo fileInfo = <span class=\"hljs-keyword\">new</span> System.IO.FileInfo(<span class=\"hljs-string\">@\"C:\\file.txt\"</span>);"
    },
    {
        "page_index": 40,
        "chunk_index": 32,
        "text": "<span class=\"hljs-keyword\">try</span>\n    {\n        file = fileInfo.OpenWrite();\n        file.WriteByte(<span class=\"hljs-number\">0xF</span>);\n    }\n    <span class=\"hljs-keyword\">finally</span>\n    {\n        <span class=\"hljs-comment\">// Closing the file allows you to reopen it immediately - otherwise IOException is thrown.</span>\n        <span class=\"hljs-keyword\">if</span> (file != <span class=\"hljs-literal\">null</span>)\n        {\n            file.Close();\n        }\n    }"
    },
    {
        "page_index": 40,
        "chunk_index": 33,
        "text": "<span class=\"hljs-keyword\">try</span>\n    {\n        file = fileInfo.OpenWrite();\n        System.Console.WriteLine(<span class=\"hljs-string\">\"OpenWrite() succeeded\"</span>);\n    }\n    <span class=\"hljs-keyword\">catch</span> (System.IO.IOException)\n    {\n        System.Console.WriteLine(<span class=\"hljs-string\">\"OpenWrite() failed\"</span>);\n    }\n}\n</code></pre>"
    },
    {
        "page_index": 40,
        "chunk_index": 34,
        "text": "}\n}\n</code></pre>\n<p>If&nbsp;<code>WriteByte()</code>&nbsp;threw an exception, the code in the second&nbsp;<code>try</code>&nbsp;block that tries to reopen the file would fail if&nbsp;<code>file.Close()</code>&nbsp;is not called, and the file would remain locked. Because&nbsp;<code>finally</code>&nbsp;blocks are executed even if an exception is thrown, the&nbsp;<code>finally</code>&nbsp;block in the previous example allows for the file to be closed correctly and helps avoid an error.</p>"
    },
    {
        "page_index": 40,
        "chunk_index": 35,
        "text": "<p>If no compatible&nbsp;<code>catch</code>&nbsp;block is found on the call stack after an exception is thrown, one of three things occurs:</p>\n<ul>\n<li>\n<p>If the exception is within a finalizer, the finalizer is aborted and the base finalizer, if any, is called.</p>\n</li>\n<li>"
    },
    {
        "page_index": 40,
        "chunk_index": 36,
        "text": "</li>\n<li>\n<p>If the call stack contains a static constructor, or a static field initializer, a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.typeinitializationexception\" data-linktype=\"absolute-path\">TypeInitializationException</a>&nbsp;is thrown, with the original exception assigned to the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception.innerexception\" data-linktype=\"absolute-path\">InnerException</a>&nbsp;property of the new exception.</p>\n</li>"
    },
    {
        "page_index": 40,
        "chunk_index": 37,
        "text": "</li>\n<li>\n<p>If the start of the thread is reached, the thread is terminated.</p>\n</li>\n</ul>"
    },
    {
        "page_index": 41,
        "chunk_index": 0,
        "text": "<h2 id=\"catch-blocks\">Try Blocks</h2>"
    },
    {
        "page_index": 41,
        "chunk_index": 1,
        "text": "<p>A&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch\" data-linktype=\"relative-path\">try</a>&nbsp;block is used by C# programmers to partition code that might be affected by an exception. Associated&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-catch\" data-linktype=\"relative-path\">catch</a>&nbsp;blocks are used to handle any resulting exceptions. A&nbsp;<a"
    },
    {
        "page_index": 41,
        "chunk_index": 2,
        "text": "to handle any resulting exceptions. A&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/try-finally\" data-linktype=\"relative-path\">finally</a>&nbsp;block contains code that is run regardless of whether or not an exception is thrown in the&nbsp;<code>try</code>&nbsp;block, such as releasing resources that are allocated in the&nbsp;<code>try</code>&nbsp;block. A&nbsp;<code>try</code>&nbsp;block requires one or more"
    },
    {
        "page_index": 41,
        "chunk_index": 3,
        "text": "requires one or more associated&nbsp;<code>catch</code>&nbsp;blocks, or a&nbsp;<code>finally</code>&nbsp;block, or both.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 4,
        "text": "<p>The following examples show a&nbsp;<code>try-catch</code>&nbsp;statement, a&nbsp;<code>try-finally</code>&nbsp;statement, and a&nbsp;<code>try-catch-finally</code>&nbsp;statement.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>"
    },
    {
        "page_index": 41,
        "chunk_index": 5,
        "text": "<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"try\n{\n    // Code to try goes here.\n}\ncatch (SomeSpecificException ex)\n{"
    },
    {
        "page_index": 41,
        "chunk_index": 6,
        "text": "}\ncatch (SomeSpecificException ex)\n{\n    // Code to handle the exception goes here.\n    // Only catch exceptions that you know how to handle.\n    // Never catch base class System.Exception without\n    // rethrowing it at the end of the catch block.\n}\n\"><span class=\"hljs-keyword\">try</span>\n{\n    <span class=\"hljs-comment\">// Code to try goes here.</span>\n}\n<span class=\"hljs-keyword\">catch</span> (SomeSpecificException ex)\n{"
    },
    {
        "page_index": 41,
        "chunk_index": 7,
        "text": "{\n    <span class=\"hljs-comment\">// Code to handle the exception goes here.</span>\n    <span class=\"hljs-comment\">// Only catch exceptions that you know how to handle.</span>\n    <span class=\"hljs-comment\">// Never catch base class System.Exception without</span>\n    <span class=\"hljs-comment\">// rethrowing it at the end of the catch block.</span>\n}\n</code></pre>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>"
    },
    {
        "page_index": 41,
        "chunk_index": 8,
        "text": "<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"try\n{\n    // Code to try goes here.\n}\nfinally\n{\n    // Code to execute after the try block goes here.\n}"
    },
    {
        "page_index": 41,
        "chunk_index": 9,
        "text": "}\n\"><span class=\"hljs-keyword\">try</span>\n{\n    <span class=\"hljs-comment\">// Code to try goes here.</span>\n}\n<span class=\"hljs-keyword\">finally</span>\n{\n    <span class=\"hljs-comment\">// Code to execute after the try block goes here.</span>\n}\n</code></pre>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>"
    },
    {
        "page_index": 41,
        "chunk_index": 10,
        "text": "<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"try\n{\n    // Code to try goes here.\n}\ncatch (SomeSpecificException ex)\n{"
    },
    {
        "page_index": 41,
        "chunk_index": 11,
        "text": "}\ncatch (SomeSpecificException ex)\n{\n    // Code to handle the exception goes here.\n}\nfinally\n{\n    // Code to execute after the try (and possibly catch) blocks \n    // goes here.\n}\n\"><span class=\"hljs-keyword\">try</span>\n{\n    <span class=\"hljs-comment\">// Code to try goes here.</span>\n}\n<span class=\"hljs-keyword\">catch</span> (SomeSpecificException ex)\n{\n    <span class=\"hljs-comment\">// Code to handle the exception goes here.</span>\n}\n<span class=\"hljs-keyword\">finally</span>\n{"
    },
    {
        "page_index": 41,
        "chunk_index": 12,
        "text": "}\n<span class=\"hljs-keyword\">finally</span>\n{\n    <span class=\"hljs-comment\">// Code to execute after the try (and possibly catch) blocks </span>\n    <span class=\"hljs-comment\">// goes here.</span>\n}\n</code></pre>\n<p>A&nbsp;<code>try</code>&nbsp;block without a&nbsp;<code>catch</code>&nbsp;or&nbsp;<code>finally</code>&nbsp;block causes a compiler error.</p>\n<h2 id=\"catch-blocks\">Catch Blocks</h2>"
    },
    {
        "page_index": 41,
        "chunk_index": 13,
        "text": "<p>A&nbsp;<code>catch</code>&nbsp;block can specify the type of exception to catch. The type specification is called an&nbsp;<em>exception filter</em>. The exception type should be derived from&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception\" data-linktype=\"absolute-path\">Exception</a>. In general, do not specify&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.exception\" data-linktype=\"absolute-path\">Exception</a>&nbsp;as the exception filter unless"
    },
    {
        "page_index": 41,
        "chunk_index": 14,
        "text": "the exception filter unless either you know how to handle all exceptions that might be thrown in the&nbsp;<code>try</code>&nbsp;block, or you have included a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw\" data-linktype=\"relative-path\">throw</a>&nbsp;statement at the end of your&nbsp;<code>catch</code>&nbsp;block.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 15,
        "text": "<p>Multiple&nbsp;<code>catch</code>&nbsp;blocks with different exception filters can be chained together. The&nbsp;<code>catch</code>&nbsp;blocks are evaluated from top to bottom in your code, but only one&nbsp;<code>catch</code>&nbsp;block is executed for each exception that is thrown. The first&nbsp;<code>catch</code>&nbsp;block that specifies the exact type or a base class of the thrown exception is executed. If no&nbsp;<code>catch</code>&nbsp;block specifies a matching exception filter,"
    },
    {
        "page_index": 41,
        "chunk_index": 16,
        "text": "specifies a matching exception filter, a&nbsp;<code>catch</code>&nbsp;block that does not have a filter is selected, if one is present in the statement. It is important to position&nbsp;<code>catch</code>&nbsp;blocks with the most specific (that is, the most derived) exception types first.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 17,
        "text": "<p>You should catch exceptions when the following conditions are true:</p>\n<ul>\n<li>\n<p>You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.io.filenotfoundexception\" data-linktype=\"absolute-path\">FileNotFoundException</a>&nbsp;object.</p>\n</li>\n<li>"
    },
    {
        "page_index": 41,
        "chunk_index": 18,
        "text": "</li>\n<li>\n<p>You can create and throw a new, more specific exception.</p>\n<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>"
    },
    {
        "page_index": 41,
        "chunk_index": 19,
        "text": "</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int GetInt(int[] array, int index)\n{\n    try\n    {\n        return array[index];\n    }\n    catch(System.IndexOutOfRangeException e)\n    {\n        throw new System.ArgumentOutOfRangeException(\n            &quot;Parameter index is out of range.&quot;, e);\n    }\n}"
    },
    {
        "page_index": 41,
        "chunk_index": 20,
        "text": "}\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">GetInt</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span>[] array, <span class=\"hljs-keyword\">int</span> index</span>)</span>\n{\n    <span class=\"hljs-keyword\">try</span>\n    {\n        <span class=\"hljs-keyword\">return</span> array[index];\n    }\n    <span class=\"hljs-keyword\">catch</span>(System.IndexOutOfRangeException e)\n    {"
    },
    {
        "page_index": 41,
        "chunk_index": 21,
        "text": "{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> System.ArgumentOutOfRangeException(\n            <span class=\"hljs-string\">\"Parameter index is out of range.\"</span>, e);\n    }\n}\n</code></pre>\n</li>\n<li>\n<p>You want to partially handle an exception before passing it on for additional handling. In the following example, a&nbsp;<code>catch</code>&nbsp;block is used to add an entry to an error log before re-throwing the exception.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 22,
        "text": "<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"try\n{\n    // Try to access a resource.\n}"
    },
    {
        "page_index": 41,
        "chunk_index": 23,
        "text": "{\n    // Try to access a resource.\n}\ncatch (System.UnauthorizedAccessException e)\n{\n    // Call a custom error logging procedure.\n    LogError(e);\n    // Re-throw the error.\n    throw;     \n}\n\"><span class=\"hljs-keyword\">try</span>\n{\n    <span class=\"hljs-comment\">// Try to access a resource.</span>\n}\n<span class=\"hljs-keyword\">catch</span> (System.UnauthorizedAccessException e)\n{\n    <span class=\"hljs-comment\">// Call a custom error logging procedure.</span>\n    LogError(e);"
    },
    {
        "page_index": 41,
        "chunk_index": 24,
        "text": "LogError(e);\n    <span class=\"hljs-comment\">// Re-throw the error.</span>\n    <span class=\"hljs-keyword\">throw</span>;     \n}\n</code></pre>\n</li>\n</ul>\n<h2 id=\"finally-blocks\">Finally Blocks</h2>"
    },
    {
        "page_index": 41,
        "chunk_index": 25,
        "text": "<p>A&nbsp;<code>finally</code>&nbsp;block enables you to clean up actions that are performed in a&nbsp;<code>try</code>&nbsp;block. If present, the&nbsp;<code>finally</code>&nbsp;block executes last, after the&nbsp;<code>try</code>&nbsp;block and any matched&nbsp;<code>catch</code>&nbsp;block. A&nbsp;<code>finally</code>&nbsp;block always runs, regardless of whether an exception is thrown or a&nbsp;<code>catch</code>&nbsp;block matching the exception type is found.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 26,
        "text": "<p>The&nbsp;<code>finally</code>&nbsp;block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects. See&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-statement\" data-linktype=\"relative-path\">using Statement</a>&nbsp;for more information.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 27,
        "text": "<p>In the following example, the&nbsp;<code>finally</code>&nbsp;block is used to close a file that is opened in the&nbsp;<code>try</code>&nbsp;block. Notice that the state of the file handle is checked before the file is closed. If the&nbsp;<code>try</code>&nbsp;block cannot open the file, the file handle still has the value&nbsp;<code>null</code>&nbsp;and the&nbsp;<code>finally</code>&nbsp;block does not try to close it. Alternatively, if the file is opened successfully in"
    },
    {
        "page_index": 41,
        "chunk_index": 28,
        "text": "if the file is opened successfully in the&nbsp;<code>try</code>&nbsp;block, the&nbsp;<code>finally</code>&nbsp;block closes the open file.</p>"
    },
    {
        "page_index": 41,
        "chunk_index": 29,
        "text": "<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<span class=\"language\">C#</span>\n<div class=\"successful-copy-alert is-absolute has-right-zero has-top-zero has-left-zero has-bottom-zero is-flex has-flex-align-items-center has-flex-justify-content-center has-text-success-invert has-background-success is-transparent\" aria-hidden=\"true\">&nbsp;</div>\n</div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"System.IO.FileStream file = null;"
    },
    {
        "page_index": 41,
        "chunk_index": 30,
        "text": "System.IO.FileInfo fileinfo = new System.IO.FileInfo(&quot;C:\\\\file.txt&quot;);\ntry\n{\n    file = fileinfo.OpenWrite();\n    file.WriteByte(0xF);\n}\nfinally\n{\n    // Check for null because OpenWrite might have failed.\n    if (file != null)\n    {\n        file.Close();\n    }\n}\n\">System.IO.FileStream file = <span class=\"hljs-literal\">null</span>;\nSystem.IO.FileInfo fileinfo = <span class=\"hljs-keyword\">new</span> System.IO.FileInfo(<span class=\"hljs-string\">\"C:\\\\file.txt\"</span>);"
    },
    {
        "page_index": 41,
        "chunk_index": 31,
        "text": "<span class=\"hljs-keyword\">try</span>\n{\n    file = fileinfo.OpenWrite();\n    file.WriteByte(<span class=\"hljs-number\">0xF</span>);\n}\n<span class=\"hljs-keyword\">finally</span>\n{\n    <span class=\"hljs-comment\">// Check for null because OpenWrite might have failed.</span>\n    <span class=\"hljs-keyword\">if</span> (file != <span class=\"hljs-literal\">null</span>)\n    {\n        file.Close();\n    }\n}</code></pre>"
    },
    {
        "page_index": 42,
        "chunk_index": 0,
        "text": "<p>Our readings, materials, and discussion this week are aimed at helping us get started with Object Oriented Programming concept - Class &amp; Object.</p>\n<h4>\n<i class=\"icon-outcomes\"></i>&nbsp;<strong>Objectives</strong>\n</h4>\n<p>After completing this week's work, you will be able to:</p>\n<ol>\n<li>Define a class containing a related set of methods and data items.</li>\n<li>Control the accessibility of members by using the public and private keywords.</li>\n<li>Create objects by using the new keyword to invoke a constructor.</li>\n<li>Write and call your own constructors.</li>\n<li>Create methods and data that can be shared by all instances of the same class by using the static keyword.</li>\n</ol>\n<p>&nbsp;</p>\n<h4>\n<i class=\"icon-info\"></i>&nbsp;<strong>M3 Activities&nbsp;</strong>\n</h4>\n<ol>\n<li>Watch Video Lectures</li>\n<li>Read Lecture Slides &amp; Programming Guide,</li>\n<li>Practice with Sample Code</li>\n<li>Complete M3 Quiz and Assignment</li>\n</ol>"
    },
    {
        "page_index": 43,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"Classes.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026337/download?verifier=rf5D03dYKWlyt4bkHipLZa65mpZM9Zutlnw2q5Df&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026337\" data-api-returntype=\"File\">Classes.pdf</a></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<p>1. Microsoft Learn - <i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Understanding-Classes\">&nbsp;Understanding Classes</a></i></p>\n<p>2. Microsoft Learn -&nbsp; <i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/More-About-Classes-and-Methods\">More About Classes and Methods</a></i></p>\n<p>3. Microsoft Learn -<i class=\"icon-note\"> <a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/classes\" target=\"_blank\">Tutorial: Explore object oriented programming with classes and objects</a>&nbsp; </i><span class=\"icon-note\">with</span><i class=\"icon-note\"> </i>video: <em><a class=\"inline_disabled\" href=\"https://www.youtube.com/watch?v=TzgxcAiHCWA&amp;list=PLdo4fOcmZ0oVxKLQCHpiUWun7vlJJvUiN&amp;index=16\" target=\"_blank\">Object Oriented Programming: Objects and Classes</a></em></p>"
    },
    {
        "page_index": 44,
        "chunk_index": 0,
        "text": "<h1 id=\"classes-and-structs-c-programming-guide\">Classes</h1>\n<p>Classes&nbsp; is essentially a data structure that encapsulates a set of data and behaviors that belong together as a logical unit. The data and behaviors are the <em>members</em> of the class , and they include its methods, properties, and events, and so on.</p>"
    },
    {
        "page_index": 44,
        "chunk_index": 1,
        "text": "<p>A class declaration is like a blueprint that is used to create instances or objects at run time. If you define a class called <code>Person</code>,&nbsp;<code>Person</code>&nbsp;is the name of the type. If you declare and initialize a variable&nbsp;<code>p</code>&nbsp;of type&nbsp;<code>Person</code>,&nbsp;<code>p</code>&nbsp;is said to be an object or instance of&nbsp;<code>Person</code>. Multiple instances of the same&nbsp;<code>Person</code>&nbsp;type can be created, and each instance can"
    },
    {
        "page_index": 44,
        "chunk_index": 2,
        "text": "can be created, and each instance can have different values in its properties and fields.</p>"
    },
    {
        "page_index": 44,
        "chunk_index": 3,
        "text": "<p>A class is a reference type. When an object of the class is created, the variable to which the object is assigned holds only a reference to that memory. When the object reference is assigned to a new variable, the new variable refers to the original object. Changes made through one variable are reflected in the other variable because they both refer to the same data.</p>"
    },
    {
        "page_index": 44,
        "chunk_index": 4,
        "text": "<p>In general, classes are used to model more complex behavior, or data that is intended to be modified after a class object is created.&nbsp;</p>\n<h2 id=\"example\">Example</h2>"
    },
    {
        "page_index": 44,
        "chunk_index": 5,
        "text": "<p>In the following example,&nbsp;<code>CustomClass</code>&nbsp;in the&nbsp;<code>ProgrammingGuide</code>&nbsp;namespace has three members: an instance constructor, a property named&nbsp;<code>Number</code>, and a method named&nbsp;<code>Multiply</code>. The&nbsp;<code>Main</code>&nbsp;method in the&nbsp;<code>Program</code>&nbsp;class creates an instance (object) of&nbsp;<code>CustomClass</code>, and the object’s method and property are accessed by using dot notation.</p>"
    },
    {
        "page_index": 44,
        "chunk_index": 6,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;"
    },
    {
        "page_index": 44,
        "chunk_index": 7,
        "text": "namespace ProgrammingGuide\n{\n   // Class definition.\n   public class CustomClass\n   {\n      // Class members.\n      //\n      // Property.\n      public int Number { get; set; }\n\n      // Method.\n      public int Multiply(int num)\n      {\n          return num * Number;\n      }\n\n      // Instance Constructor.\n      public CustomClass()\n      {\n          Number = 0;\n      }\n   }"
    },
    {
        "page_index": 44,
        "chunk_index": 8,
        "text": "// Another class definition that contains Main, the program entry point.\n   class Program\n   {\n      static void Main(string[] args)\n      {\n         // Create an object of type CustomClass.\n         CustomClass custClass = new CustomClass();\n\n         // Set the value of the public property.\n         custClass.Number = 27;"
    },
    {
        "page_index": 44,
        "chunk_index": 9,
        "text": "// Call the public method.\n         int result = custClass.Multiply(4);\n         Console.WriteLine($&quot;The result is {result}.&quot;);\n      }\n   }\n}\n// The example displays the following output:\n//      The result is 108. \n\"><span class=\"hljs-keyword\">using</span> System;"
    },
    {
        "page_index": 44,
        "chunk_index": 10,
        "text": "<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">ProgrammingGuide</span>\n{\n   <span class=\"hljs-comment\">// Class definition.</span>\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CustomClass</span>\n   {\n      <span class=\"hljs-comment\">// Class members.</span>\n      <span class=\"hljs-comment\">//</span>\n      <span class=\"hljs-comment\">// Property.</span>"
    },
    {
        "page_index": 44,
        "chunk_index": 11,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> Number { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }"
    },
    {
        "page_index": 44,
        "chunk_index": 12,
        "text": "<span class=\"hljs-comment\">// Method.</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Multiply</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> num</span>)</span>\n      {\n          <span class=\"hljs-keyword\">return</span> num * Number;\n      }"
    },
    {
        "page_index": 44,
        "chunk_index": 13,
        "text": "<span class=\"hljs-comment\">// Instance Constructor.</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">CustomClass</span>()</span>\n      {\n          Number = <span class=\"hljs-number\">0</span>;\n      }\n   }"
    },
    {
        "page_index": 44,
        "chunk_index": 14,
        "text": "<span class=\"hljs-comment\">// Another class definition that contains Main, the program entry point.</span>\n   <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Program</span>\n   {\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span>[] args</span>)</span>\n      {"
    },
    {
        "page_index": 44,
        "chunk_index": 15,
        "text": "{\n         <span class=\"hljs-comment\">// Create an object of type CustomClass.</span>\n         CustomClass custClass = <span class=\"hljs-keyword\">new</span> CustomClass();"
    },
    {
        "page_index": 44,
        "chunk_index": 16,
        "text": "<span class=\"hljs-comment\">// Set the value of the public property.</span>\n         custClass.Number = <span class=\"hljs-number\">27</span>;"
    },
    {
        "page_index": 44,
        "chunk_index": 17,
        "text": "<span class=\"hljs-comment\">// Call the public method.</span>\n         <span class=\"hljs-keyword\">int</span> result = custClass.Multiply(<span class=\"hljs-number\">4</span>);\n         Console.WriteLine(<span class=\"hljs-string\">$\"The result is <span class=\"hljs-subst\">{result}</span>.\"</span>);\n      }\n   }\n}\n<span class=\"hljs-comment\">// The example displays the following output:</span>\n<span class=\"hljs-comment\">//      The result is 108. </span>\n</code></pre>"
    },
    {
        "page_index": 44,
        "chunk_index": 18,
        "text": "</code></pre>\n<h2 id=\"encapsulation\">&nbsp;</h2>\n<p><em>Encapsulation</em> is sometimes referred to as the first pillar or principle of object-oriented programming. According to the principle of encapsulation, a class&nbsp; can specify how accessible each of its members is to code outside of the class. Methods and variables that are not intended to be used from outside of the class or assembly can be hidden to limit the potential for coding errors or malicious exploits.</p>"
    },
    {
        "page_index": 44,
        "chunk_index": 19,
        "text": "<p>For more information about classes, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/classes\" data-linktype=\"relative-path\">Classes</a>&nbsp;and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/objects\" data-linktype=\"relative-path\">Objects</a>.</p>\n<h3 id=\"members\">Members</h3>"
    },
    {
        "page_index": 44,
        "chunk_index": 20,
        "text": "<h3 id=\"members\">Members</h3>\n<p>All methods, fields, constants, properties, and events must be declared within a type; these are called the&nbsp;<em>members</em>&nbsp;of the type. In C#, there are no global variables or methods as there are in some other languages. Even a program's entry point, the&nbsp;<code>Main</code> method, must be declared within a class. The following list includes all the various kinds of members that may be declared in a class .</p>\n<ul>\n<li>"
    },
    {
        "page_index": 44,
        "chunk_index": 21,
        "text": "<ul>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\" data-linktype=\"relative-path\">Fields</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constants\" data-linktype=\"relative-path\">Constants</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\" data-linktype=\"relative-path\">Properties</a></p>"
    },
    {
        "page_index": 44,
        "chunk_index": 22,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods\" data-linktype=\"relative-path\">Methods</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors\" data-linktype=\"relative-path\">Constructors</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/events/index\" data-linktype=\"relative-path\">Events</a></p>\n</li>\n<li>"
    },
    {
        "page_index": 44,
        "chunk_index": 23,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/destructors\" data-linktype=\"relative-path\">Finalizers</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/indexers/index\" data-linktype=\"relative-path\">Indexers</a></p>\n</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/index\" data-linktype=\"relative-path\">Operators</a></p>\n</li>\n<li>"
    },
    {
        "page_index": 44,
        "chunk_index": 24,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/nested-types\" data-linktype=\"relative-path\">Nested Types</a></p>\n</li>\n</ul>"
    },
    {
        "page_index": 45,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: <a class=\"instructure_file_link\" title=\"Management - Starting Point.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026307/download?verifier=XLmjiU7X4Yd4lokr2cfYt06WiHKDUkKFwM0zHzmw&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026307\" data-api-returntype=\"File\">Management - Starting Point.zip</a></strong></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/KSLj2yF9W88\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<p>&nbsp;1. Microsoft Doc: <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/constructors\">Constructors</a></p>"
    },
    {
        "page_index": 46,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: <a class=\"instructure_file_link\" title=\"Management - Starting Point.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026307/download?verifier=XLmjiU7X4Yd4lokr2cfYt06WiHKDUkKFwM0zHzmw&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026307\" data-api-returntype=\"File\">Management - Starting Point.zip</a></strong></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/fv4Msn8O1UA\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<p>&nbsp;1. Microsoft Doc: <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/fields\">Fields</a></p>\n<p>2.&nbsp; Microsoft Doc: <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties\">Properties</a></p>"
    },
    {
        "page_index": 47,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: <a class=\"instructure_file_link\" title=\"Management - Starting Point.zip\" href=\"https://umsystem.instructure.com/courses/296958/files/32026307/download?verifier=XLmjiU7X4Yd4lokr2cfYt06WiHKDUkKFwM0zHzmw&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026307\" data-api-returntype=\"File\">Management - Starting Point.zip</a></strong></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/Hqru39rl8kQ\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<p>&nbsp;1. Microsoft Doc: <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/methods\">Methods</a></p>\n<p>&nbsp;2. Microsoft Doc: <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/static-classes-and-static-class-members\">Static Classes and Static Class Members</a></p>"
    },
    {
        "page_index": 48,
        "chunk_index": 0,
        "text": "<p>Our readings, materials, and discussion this week are aimed at helping us&nbsp;learn the C# programming basics.</p>\n<h4>\n<i class=\"icon-outcomes\"></i>&nbsp;<strong>Objectives</strong>\n</h4>\n<p>After completing this week's work, you will be able to:</p>\n<ul>\n<li>Define the concepts of loops.&nbsp;</li>\n<li>Write <em>for</em>,<em> foreach, </em><em>while, </em>and&nbsp;<em>do</em> iteration statements</li>\n<li>Recognize&nbsp; declare and call methods.</li>\n<li>Pass information and return information from a method</li>\n<li>Explain the functionality provided in the different collection classes (array, list) available with the&nbsp;&nbsp;.NET Framework.</li>\n<li>Create type-safe collections, and populate a collection with data.</li>\n<li>Manipulate and access the data items held in a collection.</li>\n<li>Apply loops, methods, array and list operations in programming.</li>\n</ul>\n<p>&nbsp;</p>\n<h4>\n<i class=\"icon-info\"></i>&nbsp;<strong>M2 Activities&nbsp;</strong>\n</h4>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li>Watch video lectures</li>\n<li>Read programming guide</li>\n<li>Work on assessment and read rubric</li>\n</ol>\n</li>\n</ol>"
    },
    {
        "page_index": 49,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"><strong>&nbsp;Lecture Slides</strong>: &nbsp;<a class=\"instructure_file_link instructure_scribd_file\" title=\"Loops.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026355/download?verifier=IuH6q4ABZv09TZTScTC4Uu5Nsm5TlI6H9Q6H2Z98&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026355\" data-api-returntype=\"File\"></a></i><a class=\"instructure_file_link instructure_scribd_file\" title=\"Loops.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026355/download?verifier=IuH6q4ABZv09TZTScTC4Uu5Nsm5TlI6H9Q6H2Z98&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026355\" data-api-returntype=\"File\">Loops.pdf</a></p>\n<p><i class=\"icon-like\"></i><strong>&nbsp;Recommended Online Resources:</strong></p>\n<p>1. Channel 9 - <i class=\"icon-video\"> <a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/for-Iteration-Statement\">for Iteration Statement</a></i></p>\n<p>2. Channel 9 - <i class=\"icon-video\"> <a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/While-Iteration-Statement\">While Iteration Statement</a></i></p>"
    },
    {
        "page_index": 50,
        "chunk_index": 0,
        "text": "<p><strong><span style=\"font-size: 18pt;\">For loop:</span></strong></p>\n<p>The&nbsp;<code>for</code>&nbsp;statement executes a statement or a block of statements while a specified Boolean expression evaluates to&nbsp;<code>true</code>.</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 1,
        "text": "<p>At any point within the&nbsp;<code>for</code>&nbsp;statement block, you can break out of the loop by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/break\" data-linktype=\"relative-path\">break</a>&nbsp;statement, or step to the next iteration in the loop by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/continue\" data-linktype=\"relative-path\">continue</a>&nbsp;statement. You also can exit"
    },
    {
        "page_index": 50,
        "chunk_index": 2,
        "text": "You also can exit a&nbsp;<code>for</code>&nbsp;loop by the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto\" data-linktype=\"relative-path\">goto</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/return\" data-linktype=\"relative-path\">return</a>, or&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw\" data-linktype=\"relative-path\">throw</a>&nbsp;statements.</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 3,
        "text": "<h2 id=\"structure-of-the-for-statement\">Structure of the&nbsp;<code>for</code>&nbsp;statement<a class=\"docon docon-link heading-anchor\" aria-labelledby=\"structure-of-the-for-statement\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for#structure-of-the-for-statement\"></a>\n</h2>\n<p>The&nbsp;<code>for</code>&nbsp;statement defines&nbsp;<em>initializer</em>,&nbsp;<em>condition</em>, and&nbsp;<em>iterator</em>&nbsp;sections:</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 4,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"for (initializer; condition; iterator)\n    body\n\"><span class=\"hljs-keyword\">for</span> (initializer; condition; iterator)\n    body\n</code></pre>\n<p>All three sections are optional. The body of the loop is either a statement or a block of statements.</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 5,
        "text": "<p>The following example shows the&nbsp;<code>for</code>&nbsp;statement with all of the sections defined:</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"for (int i = 0; i < 5; i++)\n{\n    Console.WriteLine(i);\n}"
    },
    {
        "page_index": 50,
        "chunk_index": 6,
        "text": "{\n    Console.WriteLine(i);\n}\n\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++)\n{\n    Console.WriteLine(i);\n}\n</code></pre>\n<h3 id=\"the-initializer-section\">The&nbsp;<em>initializer</em>&nbsp;section</h3>"
    },
    {
        "page_index": 50,
        "chunk_index": 7,
        "text": "<p>The statements in the&nbsp;<em>initializer</em>&nbsp;section are executed only once, before entering the loop. The&nbsp;<em>initializer</em>&nbsp;section is either of the following:</p>\n<ul>\n<li>\n<p>The declaration and initialization of a local loop variable, which can't be accessed from outside the loop.</p>\n</li>\n<li>\n<p>Zero or more statement expressions from the following list, separated by commas:</p>\n<ul>\n<li>"
    },
    {
        "page_index": 50,
        "chunk_index": 8,
        "text": "<ul>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/assignment-operator\" data-linktype=\"relative-path\">assignment</a>&nbsp;statement</p>\n</li>\n<li>\n<p>invocation of a method</p>\n</li>\n<li>"
    },
    {
        "page_index": 50,
        "chunk_index": 9,
        "text": "<li>\n<p>invocation of a method</p>\n</li>\n<li>\n<p>prefix or postfix&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#increment-operator-\" data-linktype=\"relative-path\">increment</a>&nbsp;expression, such as&nbsp;<code>++i</code>&nbsp;or&nbsp;<code>i++</code></p>\n</li>\n<li>"
    },
    {
        "page_index": 50,
        "chunk_index": 10,
        "text": "</li>\n<li>\n<p>prefix or postfix&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#decrement-operator---\" data-linktype=\"relative-path\">decrement</a>&nbsp;expression, such as&nbsp;<code>--i</code>&nbsp;or&nbsp;<code>i--</code></p>\n</li>\n<li>\n<p>creation of an object by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>&nbsp;operator</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 11,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/await\" data-linktype=\"relative-path\">await</a>&nbsp;expression</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>The&nbsp;<em>initializer</em>&nbsp;section in the example above declares and initializes the local loop variable&nbsp;<code>i</code>:</p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 50,
        "chunk_index": 12,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"int i = 0\n\"><span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>\n</code></pre>\n<h3 id=\"the-condition-section\">The&nbsp;<em>condition</em>&nbsp;section</h3>"
    },
    {
        "page_index": 50,
        "chunk_index": 13,
        "text": "<p>The&nbsp;<em>condition</em>&nbsp;section, if present, must be a boolean expression. That expression is evaluated before every loop iteration. If the&nbsp;<em>condition</em>&nbsp;section is not present or the boolean expression evaluates to&nbsp;<code>true</code>, the next loop iteration is executed; otherwise, the loop is exited.</p>\n<p>The&nbsp;<em>condition</em>&nbsp;section in the example above determines if the loop terminates based on the value of the local loop variable:</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 14,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"i < 5\n\">i &lt; <span class=\"hljs-number\">5</span>\n</code></pre>\n<h3 id=\"the-iterator-section\">The&nbsp;<em>iterator</em>&nbsp;section</h3>"
    },
    {
        "page_index": 50,
        "chunk_index": 15,
        "text": "<p>The&nbsp;<em>iterator</em>&nbsp;section defines what happens after each iteration of the body of the loop. The&nbsp;<em>iterator</em>&nbsp;section contains zero or more of the following statement expressions, separated by commas:</p>\n<ul>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/assignment-operator\" data-linktype=\"relative-path\">assignment</a>&nbsp;statement</p>\n</li>\n<li>\n<p>invocation of a method</p>\n</li>\n<li>"
    },
    {
        "page_index": 50,
        "chunk_index": 16,
        "text": "<li>\n<p>invocation of a method</p>\n</li>\n<li>\n<p>prefix or postfix&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#increment-operator-\" data-linktype=\"relative-path\">increment</a>&nbsp;expression, such as&nbsp;<code>++i</code>&nbsp;or&nbsp;<code>i++</code></p>\n</li>\n<li>"
    },
    {
        "page_index": 50,
        "chunk_index": 17,
        "text": "</li>\n<li>\n<p>prefix or postfix&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/arithmetic-operators#decrement-operator---\" data-linktype=\"relative-path\">decrement</a>&nbsp;expression, such as&nbsp;<code>--i</code>&nbsp;or&nbsp;<code>i--</code></p>\n</li>\n<li>\n<p>creation of an object by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/new-operator\" data-linktype=\"relative-path\">new</a>&nbsp;operator</p>"
    },
    {
        "page_index": 50,
        "chunk_index": 18,
        "text": "</li>\n<li>\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/await\" data-linktype=\"relative-path\">await</a>&nbsp;expression</p>\n</li>\n</ul>\n<p>The&nbsp;<em>iterator</em>&nbsp;section in the example above increments the local loop variable:</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"i++\n\">i++\n</code></pre>"
    },
    {
        "page_index": 51,
        "chunk_index": 0,
        "text": "<h1 id=\"foreach-in-c-reference\">foreach</h1>"
    },
    {
        "page_index": 51,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<code>foreach</code>&nbsp;statement executes a statement or a block of statements for each element in an instance of the type that implements the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable\" data-linktype=\"absolute-path\">System.Collections.IEnumerable</a>&nbsp;or&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1\""
    },
    {
        "page_index": 51,
        "chunk_index": 2,
        "text": "data-linktype=\"absolute-path\">System.Collections.Generic.IEnumerable&lt;T&gt;</a>&nbsp;interface. The&nbsp;<code>foreach</code>&nbsp;statement is not limited to those types and can be applied to an instance of any type that satisfies the following conditions:</p>"
    },
    {
        "page_index": 51,
        "chunk_index": 3,
        "text": "<ul>\n<li>has the public parameterless&nbsp;<code>GetEnumerator</code>&nbsp;method whose return type is either class, struct, or interface type,</li>\n<li>the return type of the&nbsp;<code>GetEnumerator</code>&nbsp;method has the public&nbsp;<code>Current</code>&nbsp;property and the public parameterless&nbsp;<code>MoveNext</code>&nbsp;method whose return type is&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.boolean\" data-linktype=\"absolute-path\">Boolean</a>.</li>"
    },
    {
        "page_index": 51,
        "chunk_index": 4,
        "text": "</ul>"
    },
    {
        "page_index": 51,
        "chunk_index": 5,
        "text": "<p>Beginning with C# 7.3, if the enumerator's&nbsp;<code>Current</code>&nbsp;property returns a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/ref#reference-return-values\" data-linktype=\"relative-path\">reference return value</a>&nbsp;(<code>ref T</code>&nbsp;where&nbsp;<code>T</code>&nbsp;is the type of the collection element), you can declare the iteration variable with the&nbsp;<code>ref</code>&nbsp;or&nbsp;<code>ref readonly</code>&nbsp;modifier.</p>"
    },
    {
        "page_index": 51,
        "chunk_index": 6,
        "text": "<p>At any point within the&nbsp;<code>foreach</code>&nbsp;statement block, you can break out of the loop by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/break\" data-linktype=\"relative-path\">break</a>&nbsp;statement, or step to the next iteration in the loop by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/continue\" data-linktype=\"relative-path\">continue</a>&nbsp;statement. You also can"
    },
    {
        "page_index": 51,
        "chunk_index": 7,
        "text": "You also can exit a&nbsp;<code>foreach</code>&nbsp;loop by the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto\" data-linktype=\"relative-path\">goto</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/return\" data-linktype=\"relative-path\">return</a>, or&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw\" data-linktype=\"relative-path\">throw</a>&nbsp;statements.</p>"
    },
    {
        "page_index": 51,
        "chunk_index": 8,
        "text": "<p>If the&nbsp;<code>foreach</code>&nbsp;statement is applied to&nbsp;<code>null</code>, a&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.nullreferenceexception\" data-linktype=\"absolute-path\">NullReferenceException</a>&nbsp;is thrown. If the source collection of the&nbsp;<code>foreach</code>&nbsp;statement is empty, the body of the&nbsp;<code>foreach</code>&nbsp;loop is not executed and skipped.</p>\n<h2 id=\"examples\">Examples</h2>"
    },
    {
        "page_index": 51,
        "chunk_index": 9,
        "text": "<p>The following example shows usage of the&nbsp;<code>foreach</code>&nbsp;statement with an instance of the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\" data-linktype=\"absolute-path\">List&lt;T&gt;</a>&nbsp;type that implements the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1\" data-linktype=\"absolute-path\">IEnumerable&lt;T&gt;</a>&nbsp;interface:</p>"
    },
    {
        "page_index": 51,
        "chunk_index": 10,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-interactive=\"csharp\" data-author-content=\"var fibNumbers = new List<int> { 0, 1, 1, 2, 3, 5, 8, 13 };\nint count = 0;"
    },
    {
        "page_index": 51,
        "chunk_index": 11,
        "text": "int count = 0;\nforeach (int element in fibNumbers)\n{\n    count++;\n    Console.WriteLine($&quot;Element #{count}: {element}&quot;);\n}\nConsole.WriteLine($&quot;Number of elements: {count}&quot;);"
    },
    {
        "page_index": 51,
        "chunk_index": 12,
        "text": "\"><span class=\"hljs-keyword\">var</span> fibNumbers = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-keyword\">int</span>&gt; { <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span> };"
    },
    {
        "page_index": 51,
        "chunk_index": 13,
        "text": "<span class=\"hljs-keyword\">int</span> count = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">int</span> element <span class=\"hljs-keyword\">in</span> fibNumbers)\n{\n    count++;\n    Console.WriteLine(<span class=\"hljs-string\">$\"Element #<span class=\"hljs-subst\">{count}</span>: <span class=\"hljs-subst\">{element}</span>\"</span>);\n}"
    },
    {
        "page_index": 51,
        "chunk_index": 14,
        "text": "}\nConsole.WriteLine(<span class=\"hljs-string\">$\"Number of elements: <span class=\"hljs-subst\">{count}</span>\"</span>);<br><span class=\"hljs-comment\"><br>// Output:</span>\n<span class=\"hljs-comment\">//Element #1: 0<br>//Element #2: 1<br>//Element #3: 1<br>//Element #4: 2<br>//Element #5: 3<br>//Element #6: 5<br>//Element #7: 8<br>//Element #8: 13<br>//Number of elements: 8<br></span>\n</code></pre>"
    },
    {
        "page_index": 52,
        "chunk_index": 0,
        "text": "<h1 id=\"while-c-reference\">while&nbsp;</h1>"
    },
    {
        "page_index": 52,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<code>while</code>&nbsp;statement executes a statement or a block of statements while a specified Boolean expression evaluates to&nbsp;<code>true</code>. Because that expression is evaluated before each execution of the loop, a&nbsp;<code>while</code>&nbsp;loop executes zero or more times. This differs from the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/do\" data-linktype=\"relative-path\">do</a>&nbsp;loop, which executes one or more"
    },
    {
        "page_index": 52,
        "chunk_index": 2,
        "text": "which executes one or more times.</p>"
    },
    {
        "page_index": 52,
        "chunk_index": 3,
        "text": "<p>At any point within the&nbsp;<code>while</code>&nbsp;statement block, you can break out of the loop by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/break\" data-linktype=\"relative-path\">break</a>&nbsp;statement.</p>"
    },
    {
        "page_index": 52,
        "chunk_index": 4,
        "text": "<p>You can step directly to the evaluation of the&nbsp;<code>while</code>&nbsp;expression by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/continue\" data-linktype=\"relative-path\">continue</a>&nbsp;statement. If the expression evaluates to&nbsp;<code>true</code>, execution continues at the first statement in the loop. Otherwise, execution continues at the first statement after the loop.</p>"
    },
    {
        "page_index": 52,
        "chunk_index": 5,
        "text": "<p>You also can exit a&nbsp;<code>while</code>&nbsp;loop by the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto\" data-linktype=\"relative-path\">goto</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/return\" data-linktype=\"relative-path\">return</a>, or&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw\" data-linktype=\"relative-path\">throw</a>&nbsp;statements.</p>"
    },
    {
        "page_index": 52,
        "chunk_index": 6,
        "text": "<h2 id=\"example\">Example</h2>\n<p>The following example shows the usage of the&nbsp;<code>while</code>&nbsp;statement. Select&nbsp;<strong>Run</strong>&nbsp;to run the example code. After that you can modify the code and run it again.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"int n = 0;\nwhile (n < 5)\n{\n    Console.WriteLine(n);"
    },
    {
        "page_index": 52,
        "chunk_index": 7,
        "text": "while (n < 5)\n{\n    Console.WriteLine(n);\n    n++;\n}\n\"><span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span> (n &lt; <span class=\"hljs-number\">5</span>)\n{\n    Console.WriteLine(n);\n    n++;\n}</code></pre>"
    },
    {
        "page_index": 53,
        "chunk_index": 0,
        "text": "<h1 id=\"do-c-reference\">do-while</h1>"
    },
    {
        "page_index": 53,
        "chunk_index": 1,
        "text": "<p>The&nbsp;<code>do</code>&nbsp;statement executes a statement or a block of statements while a specified Boolean expression evaluates to&nbsp;<code>true</code>. Because that expression is evaluated after each execution of the loop, a&nbsp;<code>do-while</code>&nbsp;loop executes one or more times. This differs from the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/while\" data-linktype=\"relative-path\">while</a>&nbsp;loop, which executes zero or more"
    },
    {
        "page_index": 53,
        "chunk_index": 2,
        "text": "which executes zero or more times.</p>"
    },
    {
        "page_index": 53,
        "chunk_index": 3,
        "text": "<p>At any point within the&nbsp;<code>do</code>&nbsp;statement block, you can break out of the loop by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/break\" data-linktype=\"relative-path\">break</a>&nbsp;statement.</p>"
    },
    {
        "page_index": 53,
        "chunk_index": 4,
        "text": "<p>You can step directly to the evaluation of the&nbsp;<code>while</code>&nbsp;expression by using the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/continue\" data-linktype=\"relative-path\">continue</a>&nbsp;statement. If the expression evaluates to&nbsp;<code>true</code>, execution continues at the first statement in the loop. Otherwise, execution continues at the first statement after the loop.</p>"
    },
    {
        "page_index": 53,
        "chunk_index": 5,
        "text": "<p>You also can exit a&nbsp;<code>do-while</code>&nbsp;loop by the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/goto\" data-linktype=\"relative-path\">goto</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/return\" data-linktype=\"relative-path\">return</a>, or&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/throw\""
    },
    {
        "page_index": 53,
        "chunk_index": 6,
        "text": "data-linktype=\"relative-path\">throw</a>&nbsp;statements.</p>"
    },
    {
        "page_index": 53,
        "chunk_index": 7,
        "text": "<h2 id=\"example\">Example</h2>\n<p>The following example shows the usage of the&nbsp;<code>do</code> statement.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"int n = 0;\ndo \n{\n    Console.WriteLine(n);\n    n++;\n} while (n < 5);\n\"><span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">0</span>;"
    },
    {
        "page_index": 53,
        "chunk_index": 8,
        "text": "<span class=\"hljs-keyword\">do</span> \n{\n    Console.WriteLine(n);\n    n++;\n} <span class=\"hljs-keyword\">while</span> (n &lt; <span class=\"hljs-number\">5</span>);</code></pre>"
    },
    {
        "page_index": 54,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides: &nbsp;</strong><a class=\"instructure_file_link instructure_scribd_file\" title=\"Method.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026340/download?verifier=beI976j7zPuef8AJ8iBNLg3I9vbvOIODE880pCEr&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026340\" data-api-returntype=\"File\">Method.pdf</a></p>"
    },
    {
        "page_index": 54,
        "chunk_index": 1,
        "text": "<p><i class=\"icon-hour-glass\"></i><strong>&nbsp;Sample Code: </strong><a id=\"8835187\" class=\"instructure_file_link\" href=\"https://umsystem.instructure.com/courses/296958/files/32026335?verifier=XsS8z56yYmOeVS9ZbqeTSGV7PdE7R1Cnh2QQHJ1s&amp;wrap=1\" target=\"_blank\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026335\" data-api-returntype=\"File\">Ov</a><a id=\"8835187\" class=\"instructure_file_link\""
    },
    {
        "page_index": 54,
        "chunk_index": 2,
        "text": "id=\"8835187\" class=\"instructure_file_link\" href=\"https://umsystem.instructure.com/courses/296958/files/32026335?verifier=XsS8z56yYmOeVS9ZbqeTSGV7PdE7R1Cnh2QQHJ1s&amp;wrap=1\" target=\"_blank\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026335\" data-api-returntype=\"File\">erload1.zip</a>&nbsp;</p>"
    },
    {
        "page_index": 54,
        "chunk_index": 3,
        "text": "<p><i class=\"icon-video\"></i><strong>&nbsp;Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/Whe-1fKpwvg\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p><i class=\"icon-like\"></i><strong>&nbsp;Recommended Online Resources:</strong></p>"
    },
    {
        "page_index": 54,
        "chunk_index": 4,
        "text": "<p>1. Channel 9 - <i class=\"icon-video\"> <a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Defining-and-Calling-Methods\">Defining and Calling Methods</a></i></p>"
    },
    {
        "page_index": 55,
        "chunk_index": 0,
        "text": "<h1 id=\"methods-c-programming-guide\">Methods&nbsp;</h1>"
    },
    {
        "page_index": 55,
        "chunk_index": 1,
        "text": "<p>A method is a code block that contains a series of statements. A program causes the statements to be executed by calling the method and specifying any required method arguments. In C#, every executed instruction is performed in the context of a method. The&nbsp;<code>Main</code> method is the entry point for every C# application and it's called by the common language runtime (CLR) when the program is started. There are named methods, and anonymous methods. We discuss named methods here."
    },
    {
        "page_index": 55,
        "chunk_index": 2,
        "text": "anonymous methods. We discuss named methods here. Anonymous methods will be covered in later modules.</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 3,
        "text": "<p>Methods are declared in a&nbsp;<code>class</code>&nbsp;or&nbsp;<code>struct</code>&nbsp;by specifying:</p>\n<ul>\n<li>An optional access level, such as&nbsp;<code>public</code>&nbsp;or&nbsp;<code>private</code>. The default is&nbsp;<code>private</code>.</li>\n<li>Optional modifiers such as&nbsp;<code>abstract</code>&nbsp;or&nbsp;<code>sealed</code>.</li>\n<li>The return value, or&nbsp;<code>void</code>&nbsp;if the method has none.</li>\n<li>The method name.</li>"
    },
    {
        "page_index": 55,
        "chunk_index": 4,
        "text": "<li>The method name.</li>\n<li>Any method parameters. Method parameters are enclosed in parentheses and are separated by commas. Empty parentheses indicate that the method requires no parameters.</li>\n</ul>\n<p>These parts together form the method signature.</p>\n<div class=\"alert is-info\">\n<p class=\"alert-title\">&nbsp;Note</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 5,
        "text": "<p class=\"alert-title\">&nbsp;Note</p>\n<p>A return type of a method is not part of the signature of the method for the purposes of method overloading. However, it is part of the signature of the method when determining the compatibility between a delegate and the method that it points to.</p>\n</div>\n<p>The following example defines a class named&nbsp;<code>Motorcycle</code>&nbsp;that contains five methods:</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 6,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;"
    },
    {
        "page_index": 55,
        "chunk_index": 7,
        "text": "abstract class Motorcycle\n{\n   // Anyone can call this.\n   public void StartEngine() {/* Method statements here */ }\n\n   // Only derived classes can call this.\n   protected void AddGas(int gallons) { /* Method statements here */ }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(int miles, int speed) { /* Method statements here */ return 1; }"
    },
    {
        "page_index": 55,
        "chunk_index": 8,
        "text": "// Derived classes can override the base class implementation.\n   public virtual int Drive(TimeSpan time, int speed) { /* Method statements here */ return 0; }\n\n   // Derived classes must implement this.\n   public abstract double GetTopSpeed(); \n}\n\"><span class=\"hljs-keyword\">using</span> System;"
    },
    {
        "page_index": 55,
        "chunk_index": 9,
        "text": "<span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Motorcycle</span>\n{\n   <span class=\"hljs-comment\">// Anyone can call this.</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">StartEngine</span>()</span> {<span class=\"hljs-comment\">/* Method statements here */</span> }"
    },
    {
        "page_index": 55,
        "chunk_index": 10,
        "text": "<span class=\"hljs-comment\">// Only derived classes can call this.</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddGas</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> gallons</span>)</span> { <span class=\"hljs-comment\">/* Method statements here */</span> }"
    },
    {
        "page_index": 55,
        "chunk_index": 11,
        "text": "<span class=\"hljs-comment\">// Derived classes can override the base class implementation.</span>"
    },
    {
        "page_index": 55,
        "chunk_index": 12,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Drive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> miles, <span class=\"hljs-keyword\">int</span> speed</span>)</span> { <span class=\"hljs-comment\">/* Method statements here */</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>; }"
    },
    {
        "page_index": 55,
        "chunk_index": 13,
        "text": "<span class=\"hljs-comment\">// Derived classes can override the base class implementation.</span>"
    },
    {
        "page_index": 55,
        "chunk_index": 14,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Drive</span>(<span class=\"hljs-params\">TimeSpan time, <span class=\"hljs-keyword\">int</span> speed</span>)</span> { <span class=\"hljs-comment\">/* Method statements here */</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; }"
    },
    {
        "page_index": 55,
        "chunk_index": 15,
        "text": "<span class=\"hljs-comment\">// Derived classes must implement this.</span>\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">GetTopSpeed</span>()</span>; \n}\n</code></pre>"
    },
    {
        "page_index": 55,
        "chunk_index": 16,
        "text": "}\n</code></pre>\n<p>Note that the&nbsp;<code>Motorcycle</code>&nbsp;class includes an overloaded method,&nbsp;<code>Drive</code>. Two methods have the same name, but must be differentiated by their parameter types.</p>\n<p><a name=\"invocation\"></a></p>\n<h2 id=\"method-invocation\">Method invocation</h2>"
    },
    {
        "page_index": 55,
        "chunk_index": 17,
        "text": "<p>Methods can be either&nbsp;<em>instance</em>&nbsp;or&nbsp;<em>static</em>. Invoking an instance method requires that you instantiate an object and call the method on that object; an instance method operates on that instance and its data. You invoke a static method by referencing the name of the type to which the method belongs; static methods do not operate on instance data. Attempting to call a static method through an object instance generates a compiler error.</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 18,
        "text": "<p>Calling a method is like accessing a field. After the object name (if you are calling an instance method) or the type name (if you are calling a&nbsp;<code>static</code>&nbsp;method), add a period, the name of the method, and parentheses. Arguments are listed within the parentheses, and are separated by commas.</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 19,
        "text": "<p>The method definition specifies the names and types of any parameters that are required. When a caller invokes the method, it provides concrete values, called arguments, for each parameter. The arguments must be compatible with the parameter type, but the argument name, if one is used in the calling code, does not have to be the same as the parameter named defined in the method. In the following example, the&nbsp;<code>Square</code>&nbsp;method includes a single parameter of"
    },
    {
        "page_index": 55,
        "chunk_index": 20,
        "text": "includes a single parameter of type&nbsp;<code>int</code>&nbsp;named&nbsp;<em>i</em>. The first method call passes the&nbsp;<code>Square</code>&nbsp;method a variable of type&nbsp;<code>int</code>&nbsp;named&nbsp;<em>num</em>; the second, a numeric constant; and the third, an expression.</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 21,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\">\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"public class Example\n{\n   public static void Main()\n   {\n      // Call with an int variable.\n      int num = 4;\n      int productA = Square(num);"
    },
    {
        "page_index": 55,
        "chunk_index": 22,
        "text": "// Call with an integer literal.\n      int productB = Square(12);"
    },
    {
        "page_index": 55,
        "chunk_index": 23,
        "text": "// Call with an expression that evaluates to int.\n      int productC = Square(productA * 3);\n   }\n   \n   static int Square(int i)\n   {\n      // Store input argument in a local variable.\n      int input = i;\n      return input * input;\n   }\n}\n\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Example</span>\n{"
    },
    {
        "page_index": 55,
        "chunk_index": 24,
        "text": "{\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n   {\n      <span class=\"hljs-comment\">// Call with an int variable.</span>\n      <span class=\"hljs-keyword\">int</span> num = <span class=\"hljs-number\">4</span>;\n      <span class=\"hljs-keyword\">int</span> productA = Square(num);"
    },
    {
        "page_index": 55,
        "chunk_index": 25,
        "text": "<span class=\"hljs-comment\">// Call with an integer literal.</span>\n      <span class=\"hljs-keyword\">int</span> productB = Square(<span class=\"hljs-number\">12</span>);"
    },
    {
        "page_index": 55,
        "chunk_index": 26,
        "text": "<span class=\"hljs-comment\">// Call with an expression that evaluates to int.</span>\n      <span class=\"hljs-keyword\">int</span> productC = Square(productA * <span class=\"hljs-number\">3</span>);\n   }\n   \n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Square</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> i</span>)</span>\n   {"
    },
    {
        "page_index": 55,
        "chunk_index": 27,
        "text": "{\n      <span class=\"hljs-comment\">// Store input argument in a local variable.</span>\n      <span class=\"hljs-keyword\">int</span> input = i;\n      <span class=\"hljs-keyword\">return</span> input * input;\n   }\n}\n</code></pre>"
    },
    {
        "page_index": 55,
        "chunk_index": 28,
        "text": "<span style=\"font-family: sans-serif; font-size: 1rem;\">The most common form of method invocation used positional arguments; it supplies arguments in the same order as method parameters. The methods of the </span><code>Motorcycle</code><span style=\"font-family: sans-serif; font-size: 1rem;\">&nbsp;class can therefore be called as in the following example. The call to the&nbsp;</span><code>Drive</code><span style=\"font-family: sans-serif; font-size: 1rem;\">&nbsp;method, for example, includes two"
    },
    {
        "page_index": 55,
        "chunk_index": 29,
        "text": "1rem;\">&nbsp;method, for example, includes two arguments that correspond to the two parameters in the method's syntax. The first becomes the value of the&nbsp;</span><code>miles</code><span style=\"font-family: sans-serif; font-size: 1rem;\">&nbsp;parameter, the second the value of the&nbsp;</span><code>speed</code><span style=\"font-family: sans-serif; font-size: 1rem;\">&nbsp;parameter.</span>"
    },
    {
        "page_index": 55,
        "chunk_index": 30,
        "text": "</div>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"class TestMotorcycle : Motorcycle\n{\n   public override double GetTopSpeed()\n   {\n      return 108.4;\n   }"
    },
    {
        "page_index": 55,
        "chunk_index": 31,
        "text": "static void Main()\n   {\n      \n      TestMotorcycle moto = new TestMotorcycle();"
    },
    {
        "page_index": 55,
        "chunk_index": 32,
        "text": "moto.StartEngine();\n      moto.AddGas(15);\n      moto.Drive(5, 20);\n      double speed = moto.GetTopSpeed();\n      Console.WriteLine(&quot;My top speed is {0}&quot;, speed);            \n   }\n}\n\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestMotorcycle</span> : <span class=\"hljs-title\">Motorcycle</span>\n{"
    },
    {
        "page_index": 55,
        "chunk_index": 33,
        "text": "{\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">GetTopSpeed</span>()</span>\n   {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">108.4</span>;\n   }"
    },
    {
        "page_index": 55,
        "chunk_index": 34,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n   {\n      \n      TestMotorcycle moto = <span class=\"hljs-keyword\">new</span> TestMotorcycle();"
    },
    {
        "page_index": 55,
        "chunk_index": 35,
        "text": "moto.StartEngine();\n      moto.AddGas(<span class=\"hljs-number\">15</span>);\n      moto.Drive(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">20</span>);\n      <span class=\"hljs-keyword\">double</span> speed = moto.GetTopSpeed();\n      Console.WriteLine(<span class=\"hljs-string\">\"My top speed is {0}\"</span>, speed);            \n   }\n}\n</code></pre>"
    },
    {
        "page_index": 55,
        "chunk_index": 36,
        "text": "<p>You can also used&nbsp;<em>named arguments</em>&nbsp;instead of positional arguments when invoking a method. When using named arguments, you specify the parameter name followed by a colon (\":\") and the argument. Arguments to the method can appear in any order, as long as all required arguments are present. The following example uses named arguments to invoke the&nbsp;<code>TestMotorcycle.Drive</code>&nbsp;method. In this example, the named arguments are passed in the opposite order from the"
    },
    {
        "page_index": 55,
        "chunk_index": 37,
        "text": "are passed in the opposite order from the method's parameter list.</p>"
    },
    {
        "page_index": 55,
        "chunk_index": 38,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"using System;"
    },
    {
        "page_index": 55,
        "chunk_index": 39,
        "text": "class TestMotorcycle : Motorcycle\n{\n   public override int Drive(int miles, int speed)\n   {\n      return (int) Math.Round( ((double)miles) / speed, 0);\n   }\n\n   public override double GetTopSpeed()\n   {\n      return 108.4;\n   }"
    },
    {
        "page_index": 55,
        "chunk_index": 40,
        "text": "static void Main()\n   {\n      \n      TestMotorcycle moto = new TestMotorcycle();\n      moto.StartEngine();\n      moto.AddGas(15);\n      var travelTime = moto.Drive(speed: 60, miles: 170);\n      Console.WriteLine(&quot;Travel time: approx. {0} hours&quot;, travelTime);            \n   }\n}\n// The example displays the following output:\n//      Travel time: approx. 3 hours\n\"><span class=\"hljs-keyword\">using</span> System;"
    },
    {
        "page_index": 55,
        "chunk_index": 41,
        "text": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestMotorcycle</span> : <span class=\"hljs-title\">Motorcycle</span>\n{\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">Drive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> miles, <span class=\"hljs-keyword\">int</span> speed</span>)</span>\n   {"
    },
    {
        "page_index": 55,
        "chunk_index": 42,
        "text": "{\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">int</span>) Math.Round( ((<span class=\"hljs-keyword\">double</span>)miles) / speed, <span class=\"hljs-number\">0</span>);\n   }"
    },
    {
        "page_index": 55,
        "chunk_index": 43,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">GetTopSpeed</span>()</span>\n   {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">108.4</span>;\n   }"
    },
    {
        "page_index": 55,
        "chunk_index": 44,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n   {\n      \n      TestMotorcycle moto = <span class=\"hljs-keyword\">new</span> TestMotorcycle();\n      moto.StartEngine();\n      moto.AddGas(<span class=\"hljs-number\">15</span>);\n      <span class=\"hljs-keyword\">var</span> travelTime = moto.Drive(speed: <span class=\"hljs-number\">60</span>, miles: <span class=\"hljs-number\">170</span>);"
    },
    {
        "page_index": 55,
        "chunk_index": 45,
        "text": "Console.WriteLine(<span class=\"hljs-string\">\"Travel time: approx. {0} hours\"</span>, travelTime);            \n   }\n}\n<span class=\"hljs-comment\">// The example displays the following output:</span>\n<span class=\"hljs-comment\">//      Travel time: approx. 3 hours</span>\n</code></pre>"
    },
    {
        "page_index": 55,
        "chunk_index": 46,
        "text": "</code></pre>\n<p>You can invoke a method using both positional arguments and named arguments. However, a positional argument cannot follow a named argument. The following example invokes the&nbsp;<code>TestMotorcycle.Drive</code>&nbsp;method from the previous example using one positional argument and one named argument.</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 55,
        "chunk_index": 47,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"var travelTime = moto.Drive(170, speed: 55);\n\"><span class=\"hljs-keyword\">var</span> travelTime = moto.Drive(<span class=\"hljs-number\">170</span>, speed: <span class=\"hljs-number\">55</span>);</code><code class=\"lang-csharp\" data-author-content=\" public void Caller()\n {\n     int numA = 4;\n     // Call with an int variable.\n     int productA = Square(numA);"
    },
    {
        "page_index": 55,
        "chunk_index": 48,
        "text": "int numB = 32;\n     // Call with another int variable.\n     int productB = Square(numB);\n\n     // Call with an integer literal.\n     int productC = Square(12);\n\n     // Call with an expression that evaulates to int.\n     productC = Square(productA * 3);\n }\n\n int Square(int i)\n {\n     // Store input argument in a local variable.\n     int input = i;\n     return input * input;\n }\n\">\n</code></pre>"
    },
    {
        "page_index": 56,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"><strong>&nbsp;Lecture Slides</strong>: &nbsp;<a class=\"instructure_file_link instructure_scribd_file\" title=\"Loops.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026355/download?verifier=IuH6q4ABZv09TZTScTC4Uu5Nsm5TlI6H9Q6H2Z98&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026355\" data-api-returntype=\"File\"></a></i><a class=\"instructure_file_link instructure_scribd_file\" title=\"ArrayList.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026336/download?verifier=1bKJVckTf5sJ5mOPWPyeXbapZDMC862FQQ3AoAqP&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026336\" data-api-returntype=\"File\">ArrayList.pdf</a></p>\n<p><i class=\"icon-like\"></i><strong>&nbsp;Recommended Online Resources:</strong></p>\n<p>1. Channel 9 -&nbsp;<a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Understanding-Arrays\"><i class=\"icon-video\"> Understanding Arrays</i></a></p>\n<p>2. Channel 9 - <a class=\"external\" href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Working-with-Collections\" target=\"_blank\"> <i class=\"icon-video\"> </i> Working with Collections</a>&nbsp;(this video touches topics related to Classes/Objects that we will cover later. Focus on how list works)</p>"
    },
    {
        "page_index": 57,
        "chunk_index": 0,
        "text": "<h1 id=\"arrays-c-programming-guide\">Arrays&nbsp;</h1>"
    },
    {
        "page_index": 57,
        "chunk_index": 1,
        "text": "<p>You can store multiple variables of the same type in an array data structure. You declare an array by specifying the type of its elements. If you want the array to store elements of any type, you can specify&nbsp;<code>object</code>&nbsp;as its type. In the unified type system of C#, all types, predefined and user-defined, reference types and value types, inherit directly or indirectly from&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.object\""
    },
    {
        "page_index": 57,
        "chunk_index": 2,
        "text": "data-linktype=\"absolute-path\">Object</a>.</p>"
    },
    {
        "page_index": 57,
        "chunk_index": 3,
        "text": "<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"type[] arrayName;\n\">type[] arrayName;\n</code></pre>\n<h2 id=\"example\">Example</h2>\n<p>The following example creates single-dimensional, multidimensional, and jagged arrays:</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 57,
        "chunk_index": 4,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"class TestArraysClass\n{\n    static void Main()\n    {\n        // Declare a single-dimensional array. \n        int[] array1 = new int[5];"
    },
    {
        "page_index": 57,
        "chunk_index": 5,
        "text": "// Declare and set array element values.\n        int[] array2 = new int[] { 1, 3, 5, 7, 9 };\n\n        // Alternative syntax.\n        int[] array3 = { 1, 2, 3, 4, 5, 6 };\n\n        // Declare a two dimensional array.\n        int[,] multiDimensionalArray1 = new int[2, 3];\n\n        // Declare and set array element values.\n        int[,] multiDimensionalArray2 = { { 1, 2, 3 }, { 4, 5, 6 } };\n\n        // Declare a jagged array.\n        int[][] jaggedArray = new int[6][];"
    },
    {
        "page_index": 57,
        "chunk_index": 6,
        "text": "// Set the values of the first array in the jagged array structure.\n        jaggedArray[0] = new int[4] { 1, 2, 3, 4 };\n    }\n}\n\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TestArraysClass</span>\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Main</span>()</span>\n    {\n        <span class=\"hljs-comment\">// Declare a single-dimensional array. </span>"
    },
    {
        "page_index": 57,
        "chunk_index": 7,
        "text": "<span class=\"hljs-keyword\">int</span>[] array1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">5</span>];"
    },
    {
        "page_index": 57,
        "chunk_index": 8,
        "text": "<span class=\"hljs-comment\">// Declare and set array element values.</span>\n        <span class=\"hljs-keyword\">int</span>[] array2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[] { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span> };"
    },
    {
        "page_index": 57,
        "chunk_index": 9,
        "text": "<span class=\"hljs-comment\">// Alternative syntax.</span>\n        <span class=\"hljs-keyword\">int</span>[] array3 = { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span> };"
    },
    {
        "page_index": 57,
        "chunk_index": 10,
        "text": "<span class=\"hljs-comment\">// Declare a two dimensional array.</span>\n        <span class=\"hljs-keyword\">int</span>[,] multiDimensionalArray1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];"
    },
    {
        "page_index": 57,
        "chunk_index": 11,
        "text": "<span class=\"hljs-comment\">// Declare and set array element values.</span>\n        <span class=\"hljs-keyword\">int</span>[,] multiDimensionalArray2 = { { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span> }, { <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span> } };"
    },
    {
        "page_index": 57,
        "chunk_index": 12,
        "text": "<span class=\"hljs-comment\">// Declare a jagged array.</span>\n        <span class=\"hljs-keyword\">int</span>[][] jaggedArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">6</span>][];"
    },
    {
        "page_index": 57,
        "chunk_index": 13,
        "text": "<span class=\"hljs-comment\">// Set the values of the first array in the jagged array structure.</span>\n        jaggedArray[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">4</span>] { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span> };\n    }\n}\n</code></pre>\n<h2 id=\"array-overview\">Array overview</h2>"
    },
    {
        "page_index": 57,
        "chunk_index": 14,
        "text": "<h2 id=\"array-overview\">Array overview</h2>\n<p>An array has the following properties:</p>\n<ul>"
    },
    {
        "page_index": 57,
        "chunk_index": 15,
        "text": "<li>An array can be&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/single-dimensional-arrays\" data-linktype=\"relative-path\">Single-Dimensional</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/multidimensional-arrays\" data-linktype=\"relative-path\">Multidimensional</a>&nbsp;or&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/jagged-arrays\""
    },
    {
        "page_index": 57,
        "chunk_index": 16,
        "text": "data-linktype=\"relative-path\">Jagged</a>.</li>"
    },
    {
        "page_index": 57,
        "chunk_index": 17,
        "text": "<li>The number of dimensions and the length of each dimension are established when the array instance is created. These values can't be changed during the lifetime of the instance.</li>\n<li>The default values of numeric array elements are set to zero, and reference elements are set to null.</li>\n<li>A jagged array is an array of arrays, and therefore its elements are reference types and are initialized to&nbsp;<code>null</code>.</li>"
    },
    {
        "page_index": 57,
        "chunk_index": 18,
        "text": "<li>Arrays are zero indexed: an array with&nbsp;<code>n</code>&nbsp;elements is indexed from&nbsp;<code>0</code>&nbsp;to&nbsp;<code>n-1</code>.</li>\n<li>Array elements can be of any type, including an array type.</li>"
    },
    {
        "page_index": 57,
        "chunk_index": 19,
        "text": "<li>Array types are&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\" data-linktype=\"relative-path\">reference types</a>&nbsp;derived from the abstract base type&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.array\" data-linktype=\"absolute-path\">Array</a>. Since this type implements&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable\""
    },
    {
        "page_index": 57,
        "chunk_index": 20,
        "text": "data-linktype=\"absolute-path\">IEnumerable</a>&nbsp;and&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.ienumerable-1\" data-linktype=\"absolute-path\">IEnumerable&lt;T&gt;</a>, you can use&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in\" data-linktype=\"relative-path\">foreach</a>&nbsp;iteration on all arrays in C#.</li>"
    },
    {
        "page_index": 57,
        "chunk_index": 21,
        "text": "</ul>"
    },
    {
        "page_index": 58,
        "chunk_index": 0,
        "text": "<h1 id=\"collections-c\">Lists and Collections&nbsp;</h1>\n<p>For many applications, you want to create and manage groups of related objects. There are two ways to group objects: by creating <strong>arrays</strong> of objects, and by creating <strong>collections</strong> of objects.</p>\n<p>Arrays are most useful for creating and working with a fixed number of strongly-typed objects.&nbsp;</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 1,
        "text": "<p>Collections provide a more flexible way to work with groups of objects. Unlike arrays, the group of objects you work with can grow and shrink dynamically as the needs of the application change. For some collections, you can assign a key to any object that you put into the collection so that you can quickly retrieve the object by using the key.</p>\n<p>A collection is a class, so you must declare an instance of the class before you can add elements to that collection.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 2,
        "text": "<p>If your collection contains elements of only one data type, you can use one of the classes in the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic\" data-linktype=\"absolute-path\">System.Collections.Generic</a> namespace. A generic collection enforces type safety so that no other data type can be added to it. When you retrieve an element from a generic collection, you do not have to determine its data type or convert it.</p>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 3,
        "text": "<p>&nbsp;</p>\n<h2 id=\"using-a-simple-collection\">Using a Simple Collection</h2>\n<p>The examples in this section use the generic&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\" data-linktype=\"absolute-path\">List&lt;T&gt;</a>&nbsp;class, which enables you to work with a strongly typed list of objects.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 4,
        "text": "<p>The following example creates a list of strings and then iterates through the strings by using a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/foreach-in\" data-linktype=\"relative-path\">foreach</a>&nbsp;statement.</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 58,
        "chunk_index": 5,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"// Create a list of strings.\nvar salmons = new List<string>();\nsalmons.Add(&quot;chinook&quot;);\nsalmons.Add(&quot;coho&quot;);\nsalmons.Add(&quot;pink&quot;);\nsalmons.Add(&quot;sockeye&quot;);"
    },
    {
        "page_index": 58,
        "chunk_index": 6,
        "text": "// Iterate through the list.\nforeach (var salmon in salmons)\n{\n    Console.Write(salmon + &quot; &quot;);\n}\n// Output: chinook coho pink sockeye\n\"><span class=\"hljs-comment\">// Create a list of strings.</span>\n<span class=\"hljs-keyword\">var</span> salmons = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-keyword\">string</span>&gt;();\nsalmons.Add(<span class=\"hljs-string\">\"chinook\"</span>);\nsalmons.Add(<span class=\"hljs-string\">\"coho\"</span>);"
    },
    {
        "page_index": 58,
        "chunk_index": 7,
        "text": "salmons.Add(<span class=\"hljs-string\">\"pink\"</span>);\nsalmons.Add(<span class=\"hljs-string\">\"sockeye\"</span>);"
    },
    {
        "page_index": 58,
        "chunk_index": 8,
        "text": "<span class=\"hljs-comment\">// Iterate through the list.</span>\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> salmon <span class=\"hljs-keyword\">in</span> salmons)\n{\n    Console.Write(salmon + <span class=\"hljs-string\">\" \"</span>);\n}\n<span class=\"hljs-comment\">// Output: chinook coho pink sockeye</span>\n</code></pre>"
    },
    {
        "page_index": 58,
        "chunk_index": 9,
        "text": "</code></pre>\n<p>If the contents of a collection are known in advance, you can use a&nbsp;<em>collection initializer</em>&nbsp;to initialize the collection. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">Object and Collection Initializers</a>.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 10,
        "text": "<p>The following example is the same as the previous example, except a collection initializer is used to add elements to the collection.</p>\n<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 58,
        "chunk_index": 11,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"// Create a list of strings by using a\n// collection initializer.\nvar salmons = new List<string> { &quot;chinook&quot;, &quot;coho&quot;, &quot;pink&quot;, &quot;sockeye&quot; };"
    },
    {
        "page_index": 58,
        "chunk_index": 12,
        "text": "// Iterate through the list.\nforeach (var salmon in salmons)\n{\n    Console.Write(salmon + &quot; &quot;);\n}\n// Output: chinook coho pink sockeye\n\"><span class=\"hljs-comment\">// Create a list of strings by using a</span>\n<span class=\"hljs-comment\">// collection initializer.</span>"
    },
    {
        "page_index": 58,
        "chunk_index": 13,
        "text": "<span class=\"hljs-keyword\">var</span> salmons = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-keyword\">string</span>&gt; { <span class=\"hljs-string\">\"chinook\"</span>, <span class=\"hljs-string\">\"coho\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"sockeye\"</span> };"
    },
    {
        "page_index": 58,
        "chunk_index": 14,
        "text": "<span class=\"hljs-comment\">// Iterate through the list.</span>\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> salmon <span class=\"hljs-keyword\">in</span> salmons)\n{\n    Console.Write(salmon + <span class=\"hljs-string\">\" \"</span>);\n}\n<span class=\"hljs-comment\">// Output: chinook coho pink sockeye</span>\n</code></pre>"
    },
    {
        "page_index": 58,
        "chunk_index": 15,
        "text": "</code></pre>\n<p>You can use a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for\" data-linktype=\"relative-path\">for</a>&nbsp;statement instead of a&nbsp;<code>foreach</code>&nbsp;statement to iterate through a collection. You accomplish this by accessing the collection elements by the index position. The index of the elements starts at 0 and ends at the element count minus 1.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 16,
        "text": "<p>The following example iterates through the elements of a collection by using&nbsp;<code>for</code>&nbsp;instead of&nbsp;<code>foreach</code>.</p>\n<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"// Create a list of strings by using a\n// collection initializer."
    },
    {
        "page_index": 58,
        "chunk_index": 17,
        "text": "// collection initializer.\nvar salmons = new List<string> { &quot;chinook&quot;, &quot;coho&quot;, &quot;pink&quot;, &quot;sockeye&quot; };"
    },
    {
        "page_index": 58,
        "chunk_index": 18,
        "text": "for (var index = 0; index < salmons.Count; index++)\n{\n    Console.Write(salmons[index] + &quot; &quot;);\n}\n// Output: chinook coho pink sockeye\n\"><span class=\"hljs-comment\">// Create a list of strings by using a</span>\n<span class=\"hljs-comment\">// collection initializer.</span>"
    },
    {
        "page_index": 58,
        "chunk_index": 19,
        "text": "<span class=\"hljs-keyword\">var</span> salmons = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-keyword\">string</span>&gt; { <span class=\"hljs-string\">\"chinook\"</span>, <span class=\"hljs-string\">\"coho\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"sockeye\"</span> };"
    },
    {
        "page_index": 58,
        "chunk_index": 20,
        "text": "<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>; index &lt; salmons.Count; index++)\n{\n    Console.Write(salmons[index] + <span class=\"hljs-string\">\" \"</span>);\n}\n<span class=\"hljs-comment\">// Output: chinook coho pink sockeye</span>\n</code></pre>\n<p>The following example removes an element from the collection by specifying the object to remove.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 21,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"// Create a list of strings by using a\n// collection initializer."
    },
    {
        "page_index": 58,
        "chunk_index": 22,
        "text": "// collection initializer.\nvar salmons = new List<string> { &quot;chinook&quot;, &quot;coho&quot;, &quot;pink&quot;, &quot;sockeye&quot; };"
    },
    {
        "page_index": 58,
        "chunk_index": 23,
        "text": "// Remove an element from the list by specifying\n// the object.\nsalmons.Remove(&quot;coho&quot;);"
    },
    {
        "page_index": 58,
        "chunk_index": 24,
        "text": "// Iterate through the list.\nforeach (var salmon in salmons)\n{\n    Console.Write(salmon + &quot; &quot;);\n}\n// Output: chinook pink sockeye\n\"><span class=\"hljs-comment\">// Create a list of strings by using a</span>\n<span class=\"hljs-comment\">// collection initializer.</span>"
    },
    {
        "page_index": 58,
        "chunk_index": 25,
        "text": "<span class=\"hljs-keyword\">var</span> salmons = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-keyword\">string</span>&gt; { <span class=\"hljs-string\">\"chinook\"</span>, <span class=\"hljs-string\">\"coho\"</span>, <span class=\"hljs-string\">\"pink\"</span>, <span class=\"hljs-string\">\"sockeye\"</span> };"
    },
    {
        "page_index": 58,
        "chunk_index": 26,
        "text": "<span class=\"hljs-comment\">// Remove an element from the list by specifying</span>\n<span class=\"hljs-comment\">// the object.</span>\nsalmons.Remove(<span class=\"hljs-string\">\"coho\"</span>);"
    },
    {
        "page_index": 58,
        "chunk_index": 27,
        "text": "<span class=\"hljs-comment\">// Iterate through the list.</span>\n<span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> salmon <span class=\"hljs-keyword\">in</span> salmons)\n{\n    Console.Write(salmon + <span class=\"hljs-string\">\" \"</span>);\n}\n<span class=\"hljs-comment\">// Output: chinook pink sockeye</span>\n</code></pre>"
    },
    {
        "page_index": 58,
        "chunk_index": 28,
        "text": "<p>The following example removes elements from a generic list. Instead of a&nbsp;<code>foreach</code>&nbsp;statement, a&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/for\" data-linktype=\"relative-path\">for</a>&nbsp;statement that iterates in descending order is used. This is because the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.removeat\" data-linktype=\"absolute-path\">RemoveAt</a>&nbsp;method"
    },
    {
        "page_index": 58,
        "chunk_index": 29,
        "text": "causes elements after a removed element to have a lower index value.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 30,
        "text": "<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"var numbers = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };"
    },
    {
        "page_index": 58,
        "chunk_index": 31,
        "text": "// Remove odd numbers.\nfor (var index = numbers.Count - 1; index >= 0; index--)\n{\n    if (numbers[index] % 2 == 1)\n    {\n        // Remove the element by specifying\n        // the zero-based index in the list.\n        numbers.RemoveAt(index);\n    }\n}"
    },
    {
        "page_index": 58,
        "chunk_index": 32,
        "text": "// Iterate through the list.\n// A lambda expression is placed in the ForEach method\n// of the List(T) object.\nnumbers.ForEach(\n    number => Console.Write(number + &quot; &quot;));\n// Output: 0 2 4 6 8"
    },
    {
        "page_index": 58,
        "chunk_index": 33,
        "text": "\"><span class=\"hljs-keyword\">var</span> numbers = <span class=\"hljs-keyword\">new</span> List&lt;<span class=\"hljs-keyword\">int</span>&gt; { <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>"
    },
    {
        "page_index": 58,
        "chunk_index": 34,
        "text": "<span class=\"hljs-number\">9</span> };"
    },
    {
        "page_index": 58,
        "chunk_index": 35,
        "text": "<span class=\"hljs-comment\">// Remove odd numbers.</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index = numbers.Count - <span class=\"hljs-number\">1</span>; index &gt;= <span class=\"hljs-number\">0</span>; index--)\n{\n    <span class=\"hljs-keyword\">if</span> (numbers[index] % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-comment\">// Remove the element by specifying</span>"
    },
    {
        "page_index": 58,
        "chunk_index": 36,
        "text": "<span class=\"hljs-comment\">// the zero-based index in the list.</span>\n        numbers.RemoveAt(index);\n    }\n}"
    },
    {
        "page_index": 58,
        "chunk_index": 37,
        "text": "<span class=\"hljs-comment\">// Iterate through the list.</span>\n<span class=\"hljs-comment\">// A lambda expression is placed in the ForEach method</span>\n<span class=\"hljs-comment\">// of the List(T) object.</span>\nnumbers.ForEach(\n    number =&gt; Console.Write(number + <span class=\"hljs-string\">\" \"</span>));\n<span class=\"hljs-comment\">// Output: 0 2 4 6 8</span>\n</code></pre>"
    },
    {
        "page_index": 58,
        "chunk_index": 38,
        "text": "<p>For the type of elements in the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\" data-linktype=\"absolute-path\">List&lt;T&gt;</a>, you can also define your own class. In the following example, the&nbsp;<code>Galaxy</code>&nbsp;class that is used by the&nbsp;<a class=\"xref\" href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1\" data-linktype=\"absolute-path\">List&lt;T&gt;</a>&nbsp;is defined in the code.</p>"
    },
    {
        "page_index": 58,
        "chunk_index": 39,
        "text": "<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-author-content=\"private static void IterateThroughList()\n{\n    var theGalaxies = new List<Galaxy>\n        {"
    },
    {
        "page_index": 58,
        "chunk_index": 40,
        "text": "var theGalaxies = new List<Galaxy>\n        {\n            new Galaxy() { Name=&quot;Tadpole&quot;, MegaLightYears=400},\n            new Galaxy() { Name=&quot;Pinwheel&quot;, MegaLightYears=25},\n            new Galaxy() { Name=&quot;Milky Way&quot;, MegaLightYears=0},\n            new Galaxy() { Name=&quot;Andromeda&quot;, MegaLightYears=3}\n        };"
    },
    {
        "page_index": 58,
        "chunk_index": 41,
        "text": "foreach (Galaxy theGalaxy in theGalaxies)\n    {\n        Console.WriteLine(theGalaxy.Name + &quot;  &quot; + theGalaxy.MegaLightYears);\n    }\n\n    // Output:\n    //  Tadpole  400\n    //  Pinwheel  25\n    //  Milky Way  0\n    //  Andromeda  3\n}"
    },
    {
        "page_index": 58,
        "chunk_index": 42,
        "text": "public class Galaxy\n{\n    public string Name { get; set; }\n    public int MegaLightYears { get; set; }\n}\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">IterateThroughList</span>()</span>\n{\n    <span class=\"hljs-keyword\">var</span> theGalaxies = <span class=\"hljs-keyword\">new</span> List&lt;Galaxy&gt;\n        {"
    },
    {
        "page_index": 58,
        "chunk_index": 43,
        "text": "{\n            <span class=\"hljs-keyword\">new</span> Galaxy() { Name=<span class=\"hljs-string\">\"Tadpole\"</span>, MegaLightYears=<span class=\"hljs-number\">400</span>},\n            <span class=\"hljs-keyword\">new</span> Galaxy() { Name=<span class=\"hljs-string\">\"Pinwheel\"</span>, MegaLightYears=<span class=\"hljs-number\">25</span>},"
    },
    {
        "page_index": 58,
        "chunk_index": 44,
        "text": "<span class=\"hljs-keyword\">new</span> Galaxy() { Name=<span class=\"hljs-string\">\"Milky Way\"</span>, MegaLightYears=<span class=\"hljs-number\">0</span>},\n            <span class=\"hljs-keyword\">new</span> Galaxy() { Name=<span class=\"hljs-string\">\"Andromeda\"</span>, MegaLightYears=<span class=\"hljs-number\">3</span>}\n        };"
    },
    {
        "page_index": 58,
        "chunk_index": 45,
        "text": "<span class=\"hljs-keyword\">foreach</span> (Galaxy theGalaxy <span class=\"hljs-keyword\">in</span> theGalaxies)\n    {\n        Console.WriteLine(theGalaxy.Name + <span class=\"hljs-string\">\"  \"</span> + theGalaxy.MegaLightYears);\n    }"
    },
    {
        "page_index": 58,
        "chunk_index": 46,
        "text": "<span class=\"hljs-comment\">// Output:</span>\n    <span class=\"hljs-comment\">//  Tadpole  400</span>\n    <span class=\"hljs-comment\">//  Pinwheel  25</span>\n    <span class=\"hljs-comment\">//  Milky Way  0</span>\n    <span class=\"hljs-comment\">//  Andromeda  3</span>\n}"
    },
    {
        "page_index": 58,
        "chunk_index": 47,
        "text": "<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Galaxy</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">string</span> Name { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> MegaLightYears { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n}</code></pre>"
    },
    {
        "page_index": 59,
        "chunk_index": 0,
        "text": "<p><span>Before C# 9,&nbsp; there was a lot of code just to output Hello, World! </span><span>In C# 9 there is a simpler way and it is known as top-level programs. Let's compare the traditional minimum console app, as shown in the following code: </span></p>\n<pre><code>using System;\nclass Program\n{ static void Main(string[] args)\n      { \n           Console.WriteLine(\"Hello World!\"); \n      }\n}\n</code></pre>"
    },
    {
        "page_index": 59,
        "chunk_index": 1,
        "text": "}\n}\n</code></pre>\n<p><span>To the new top-level program minimum console app, as shown in the following code: </span></p>\n<pre><code>using System;\nConsole.WriteLine(\"Hello World!\");</code></pre>"
    },
    {
        "page_index": 59,
        "chunk_index": 2,
        "text": "<p><span>That is a lot simpler, right? If you had to start with a blank file and write all the statements yourself, this is better. During compilation, all the boilerplate code to define the Program class and its Main method is generated and wrapped around the statements you write. Any using statements still have to go at the top of the file. There can be only one file like this in a project. Personally, especially when teaching and learning C#, I plan to continue to use the traditional project"
    },
    {
        "page_index": 59,
        "chunk_index": 3,
        "text": "I plan to continue to use the traditional project template since it is true to reality.&nbsp; For example, arguments can be passed into a console app. With a top-level program, you would need to know that the args parameter exists even though you cannot see it.&nbsp;</span></p>"
    },
    {
        "page_index": 59,
        "chunk_index": 4,
        "text": "<p>For more info, see <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/top-level-statements\" target=\"_blank\">https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-9.0/top-level-statements</a></p>\n<p>Read .NET 6 Template Changes: <a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/dotnet/core/tutorials/top-level-templates\" target=\"_blank\">C# console app template generates top-level statements</a></p>"
    },
    {
        "page_index": 59,
        "chunk_index": 5,
        "text": "<p id=\"tutorial-explore-ideas-using-top-level-statements-to-build-code-as-you-learn\"><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/dotnet/csharp/tutorials/top-level-statements\" target=\"_blank\">Tutorial: Explore ideas using top-level statements to build code as you learn</a></p>"
    },
    {
        "page_index": 60,
        "chunk_index": 0,
        "text": "<p><span>.NET is a free, cross-platform,&nbsp;</span><a href=\"https://github.com/dotnet/core\" data-linktype=\"external\">open-source developer platform</a><span>&nbsp;for building&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/dotnet/core/apps\" data-linktype=\"relative-path\">many kinds of applications</a><span>. It can run programs written in&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/dotnet/fundamentals/languages\" data-linktype=\"relative-path\">multiple languages</a><span>,"
    },
    {
        "page_index": 60,
        "chunk_index": 1,
        "text": "languages</a><span>, with&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/\" data-linktype=\"relative-path\">C#</a><span>&nbsp;being the most popular. It relies on a&nbsp;</span><a href=\"https://devblogs.microsoft.com/dotnet/category/performance/\" data-linktype=\"external\">high-performance</a><span>&nbsp;runtime that is used in production by many&nbsp;</span><a href=\"https://devblogs.microsoft.com/dotnet/category/developer-stories/\" data-linktype=\"external\">high-scale"
    },
    {
        "page_index": 60,
        "chunk_index": 2,
        "text": "data-linktype=\"external\">high-scale apps</a><span>.</span></p>"
    },
    {
        "page_index": 60,
        "chunk_index": 3,
        "text": "<div class=\"heading-wrapper\" data-heading-level=\"h2\">\n<h2 id=\"net-ecosystem\" class=\"heading-anchor\">.NET ecosystem</h2>\n</div>\n<p>There are multiple variants of .NET, each supporting a different type of app. The reason for multiple variants is part historical, part technical.</p>\n<p>.NET implementations:</p>\n<ul>"
    },
    {
        "page_index": 60,
        "chunk_index": 4,
        "text": "<p>.NET implementations:</p>\n<ul>\n<li><strong>.NET Framework</strong><span>&nbsp;</span>-- The original .NET. It provides access to the broad capabilities of Windows and Windows Server. It is actively supported, in maintenance.</li>\n<li><strong>Mono</strong><span>&nbsp;</span>-- The original community and open source .NET. A cross-platform implementation of .NET Framework. Actively supported for Android, iOS, and WebAssembly.</li>"
    },
    {
        "page_index": 60,
        "chunk_index": 5,
        "text": "<li><strong>.NET (Core)</strong><span>&nbsp;</span>-- Modern .NET. A cross-platform and open source implementation of .NET, rethought for the cloud age while remaining significantly compatible with .NET Framework. Actively supported for Linux, macOS, and Windows.</li>\n</ul>\n<p><strong>The .NET Framework and .NET Core</strong></p>"
    },
    {
        "page_index": 60,
        "chunk_index": 6,
        "text": "<p>.NET Core works similarly to the .NET Framework. In fact, many of the code and techniques that are presented in this course the same regardless of whether you use the .NET Framework or .NET Core. The main difference between these platforms is that the .NET Framework is older and only supports Windows. On the other hand, .NET Core is newer and cross-platform. As a result, .NET Core can run on Windows, macOS, and Linux. Because Microsoft ended development of the .NET Framework at version 4.8,"
    },
    {
        "page_index": 60,
        "chunk_index": 7,
        "text": "development of the .NET Framework at version 4.8, .NET Core is the future of .NET development.</p>"
    },
    {
        "page_index": 60,
        "chunk_index": 8,
        "text": "<p>In fact, starting with version 5, .NET Core is now just called .NET (no Core in the name). Because .NET combines the best features of the .NET Framework and previous versions of .NET Core, it provides an easy migration path for .NET Framework applications, and it provides a foundation for future development of the .NET platform.</p>"
    },
    {
        "page_index": 60,
        "chunk_index": 9,
        "text": "<p>Both the .NET Framework and .NET provide a set of class libraries. These class libraries consist of segments of pre-written code called classes that provide many of the functions that you need for developing .NET applications. For instance, the WPF classes are used for developing WPF apps. The ASP.NET and ASP.NET Core classes are used for developing Web Forms apps. The EF and EF Core classes are used for developing apps that access databases. And other classes let you manage security, access"
    },
    {
        "page_index": 60,
        "chunk_index": 10,
        "text": "And other classes let you manage security, access files, and perform many other functions.</p>"
    },
    {
        "page_index": 60,
        "chunk_index": 11,
        "text": "<p>The .NET Framework and .NET also provide a common infrastructure that applications written in a .NET language such as C# can use to run on various operating systems and hardware platforms. This infrastructure includes the Common Language Runtime, the .NET languages, and the compilers for those languages.</p>"
    },
    {
        "page_index": 60,
        "chunk_index": 12,
        "text": "<p>The Common Language Runtime (CLR) provides the services that are needed for executing any application that’s developed with one of the .NET languages. This is possible because all the .NET languages compile to a common intermediate language. The CLR also provides the Common Type System that defines the data types that are used by all .NET languages. Because all the .NET applications are managed by the CLR, they are sometimes referred to as managed applications.&nbsp;</p>"
    },
    {
        "page_index": 60,
        "chunk_index": 13,
        "text": "<h1 id=\"build-apps-with-net\">Build apps with .NET</h1>\n<p>.NET has support for building many kinds of apps, including client, cloud, and gaming.</p>\n<div class=\"heading-wrapper\" data-heading-level=\"h2\">\n<h4 id=\"client-apps\" class=\"heading-anchor\">Client apps</h4>\n</div>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/desktop/\" data-linktype=\"absolute-path\">Desktop apps</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/maui\" data-linktype=\"absolute-path\">Mobile</a></li>"
    },
    {
        "page_index": 60,
        "chunk_index": 14,
        "text": "<li><a href=\"https://dotnet.microsoft.com/apps/games\" data-linktype=\"external\">Games</a></li>\n</ul>\n<div class=\"heading-wrapper\" data-heading-level=\"h2\">\n<h4 id=\"cloud-apps\" class=\"heading-anchor\">Cloud apps</h4>\n</div>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/aspire\" data-linktype=\"absolute-path\">.NET Aspire</a></li>"
    },
    {
        "page_index": 60,
        "chunk_index": 15,
        "text": "<li><a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-create-your-first-function-visual-studio\" data-linktype=\"absolute-path\">Serverless functions</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core#recommended-learning-path\" data-linktype=\"absolute-path\">Web and microservices</a></li>\n</ul>\n<div class=\"heading-wrapper\" data-heading-level=\"h2\">\n<h4 id=\"other-app-types\" class=\"heading-anchor\">Other app types</h4>\n</div>\n<ul>"
    },
    {
        "page_index": 60,
        "chunk_index": 16,
        "text": "</div>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/core/tutorials/with-visual-studio-code\" data-linktype=\"relative-path\">Console apps</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/iot/\" data-linktype=\"relative-path\">Internet of Things (IoT)</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/machine-learning/\" data-linktype=\"relative-path\">Machine learning</a></li>"
    },
    {
        "page_index": 60,
        "chunk_index": 17,
        "text": "<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service\" data-linktype=\"absolute-path\">Windows services</a></li>\n</ul>"
    },
    {
        "page_index": 61,
        "chunk_index": 0,
        "text": "<h2>A Warm Welcome!</h2>\n<p>I'm glad to see you've enrolled in the&nbsp;<strong>InfoTC 4400 - C#/.NET Development&nbsp;</strong>this semester.&nbsp;Before you jump into the course content, I'd like to take you through a short orientation. It will help you acclimate to course organization, learn about the topics covered in this course, and understand (and set) your course expectations.</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 1,
        "text": "<p><iframe class=\"lti-embed\" style=\"width: 720px; height: 405px;\" title=\"Fang Wang's Personal Meeting Room\" src=\"https://umsystem.instructure.com/courses/296958/external_tools/retrieve?display=borderless&amp;url=https%3A%2F%2Fumsystem.hosted.panopto.com%2FPanopto%2FLTI%2FLTI.aspx%3Fcustom_context_delivery%3D088afda4-05b0-485a-8204-b0fc014553ad\" width=\"720\" height=\"405\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\""
    },
    {
        "page_index": 61,
        "chunk_index": 2,
        "text": "mozallowfullscreen=\"mozallowfullscreen\" allow=\"geolocation *; microphone *; camera *; midi *; encrypted-media *; autoplay *; clipboard-write *; display-capture *\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 61,
        "chunk_index": 3,
        "text": "<h2>Course Description</h2>\n<p>This course focuses on developing Windows applications using C#&nbsp;programming language.&nbsp; The following topics are covered:</p>\n<ul>\n<li>Introduction to C#, Microsoft Visual Studio, and the .NET platform</li>\n<li>Object-Oriented Programming with C#</li>\n<li>Advanced C# Programming</li>\n<li>Desktop application for Windows</li>\n</ul>\n<p>&nbsp;</p>\n<h2>Course Schedules</h2>"
    },
    {
        "page_index": 61,
        "chunk_index": 4,
        "text": "</ul>\n<p>&nbsp;</p>\n<h2>Course Schedules</h2>\n<p>The course officially starts on Tue Jan. 21, when your access to Canvas and the first week's modules are available.&nbsp; Each week you are provided with new modules on Sunday and the work needs to be completed by the following Friday.&nbsp; In general, there is&nbsp; one coding assignment and one quiz for each module.</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 5,
        "text": "<p>There is no time limit in taking the quiz before the deadline. You can ask questions, look things up, then come back to continue. Your work should be auto-saved. You can only submit once though. So submit only after you are completely done. If you need help, please ask. Students are encouraged to start working on the module early in the week, and utilize the TA office hours during the week. Assistance during weekend is extremely limited.</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 6,
        "text": "<p>&nbsp;Late assignments will receive a&nbsp;<strong>10%</strong> deduction of the assignment total score for the first day of being, and <strong>20% per day</strong> for the 2nd and 3rd day.&nbsp; After 3 full days until Stop Day, you will see a total of 50% reduction of points on the late work, plus any lost points from the rubric. This late policy is only for coding challenges and assignments. Quizzes, exams, and/or any other assignment must be completed by the due date/time to be"
    },
    {
        "page_index": 61,
        "chunk_index": 7,
        "text": "must be completed by the due date/time to be considered for credit.</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 8,
        "text": "<p>&nbsp;</p>\n<h2>Contacts</h2>\n<p><strong>Instructor</strong>: Dr. Fang Wang&nbsp; <br><span style=\"color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;\">Office: 2437H Lafferre Hall&nbsp; &nbsp; Phone: 884-8747&nbsp; &nbsp;&nbsp;Email: </span><a style=\"font-family: inherit; font-size: 1rem;\" href=\"mailto:wangfan@missouri.edu\">wangfan@missouri.edu &nbsp; </a></p>\n<p><strong>TA:&nbsp;</strong></p>"
    },
    {
        "page_index": 61,
        "chunk_index": 9,
        "text": "<p><span>Amith Nalmas (<a href=\"mailto:anr79@missouri.edu\" target=\"_blank\">anr79@missouri.edu</a>)<br>Office hour: Mon/Wed/Fri 2-4pm<br>Zoom meeting:&nbsp;<a class=\"anchor_c8ddc0 anchorUnderlineOnHover__78236 external\" title=\"https://umsystem.zoom.us/j/91603648117?pwd=MFpnbWpFTlN1dVg5NysvUlIrZ0pDQT09\" role=\"button\" href=\"https://umsystem.zoom.us/j/91603648117?pwd=MFpnbWpFTlN1dVg5NysvUlIrZ0pDQT09\" target=\"_blank\">https://umsystem.zoom.us/j/91603648117?pwd=MFpnbWpFTlN1dVg5NysvUlIrZ0pDQT09<span"
    },
    {
        "page_index": 61,
        "chunk_index": 10,
        "text": "class=\"external_link_icon\" role=\"presentation\"><span class=\"screenreader-only\">Links to an external site.</span></span></a></span></p>"
    },
    {
        "page_index": 61,
        "chunk_index": 11,
        "text": "<p>&nbsp;</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 12,
        "text": "<p>Caden Hicks (<a href=\"mailto:cjhbv4@missouri.edu\" target=\"_blank\">cjhbv4@missouri.edu</a>)<br>Office hour: Tuesday, Thursday at 10 am - 12 pm and Friday at 11 am - 1 pm<br>Zoom meeting:<span>&nbsp;</span><a class=\"inline_disabled external\" title=\"Link\" href=\"https://umsystem.zoom.us/j/5240824097?pwd=bys0VHRWTGlnTDV2UC96OUhZMVNWUT09\" target=\"_blank\"><span>https://umsystem.zoom.us/j/5240824097?pwd=bys0VHRWTGlnTDV2UC96OUhZMVNWUT09</span><span class=\"external_link_icon\" role=\"presentation\"><span"
    },
    {
        "page_index": 61,
        "chunk_index": 13,
        "text": "role=\"presentation\"><span class=\"screenreader-only\">Links to an external site.</span></span></a></p>"
    },
    {
        "page_index": 61,
        "chunk_index": 14,
        "text": "<p>&nbsp;</p>\n<p><strong>Course Discord Server:&nbsp;<span>&nbsp;</span></strong><a href=\"https://discord.gg/9UZMuGKxMd\" target=\"_blank\">https://discord.gg/9UZMuGKxMd</a></p>\n<p>&nbsp;</p>\n<h2>Question and Answers</h2>\n<p>Q: Do I have to be on campus for anything?</p>\n<p>A: No. This course is entirely online.</p>\n<p>&nbsp;</p>\n<p>Q: Are there any tests I actually have to be on campus for?</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 15,
        "text": "<p>A: No. Everything you need to do will be posted on Canvas. Work for all assignments and exams will be submitted on Canvas.</p>\n<p>&nbsp;</p>\n<p>Q: Where to get software used for the course?</p>\n<p>A: There are multiple ways to do that.&nbsp;</p>\n<ol style=\"list-style-type: decimal;\">\n<li><a class=\"inline_disabled\" title=\"Link\" href=\"https://visualstudio.microsoft.com/downloads/\" target=\"_blank\">Visual Studio Downloads</a></li>"
    },
    {
        "page_index": 61,
        "chunk_index": 16,
        "text": "<li>Lafferre Hall C1206 &amp; C1205 computers have VS installed.</li>\n<li>College of Engineering RemoteApps servers allow students, faculty, and staff to utilize software remotely without installing the software physically on their machines. <a href=\"http://remoteapps.missouri.edu/\" target=\"_blank\">http://remoteapps.missouri.edu/</a> (you need to VPN to campus network if you are off campus)</li>"
    },
    {
        "page_index": 61,
        "chunk_index": 17,
        "text": "<li>Engineering students and faculty are eligible to download free Microsoft software. For Microsoft software login to MS Azure Dev <a class=\"external\" href=\"https://aka.ms/devtoolsforteaching\" target=\"_blank\">Tools for Teaching</a>.&nbsp;</li>\n<li>Rider: Cross-Platform .NET IDE from JetBrains with <a class=\"inline_disabled\" href=\"https://www.jetbrains.com/community/education/#students\" target=\"_blank\">Free Educational Licenses</a></li>\n</ol>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 18,
        "text": "</ol>\n<p>&nbsp;</p>\n<p>Q: How do I get help if I need it?</p>\n<p>A: Zoom video conference during office hours. Email or use Discord to get in touch with instructor and TA anytime.</p>\n<p>&nbsp;</p>\n<p>Q:&nbsp;Is it OK to take code from online resources or other people and submit as my own work?&nbsp;</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 19,
        "text": "<p>You are encouraged to look for resources online and work together in an effort to comprehend the course material. For instance, you may discuss generalities with classmates or someone outside the class when trying to understand the assignments. However, you should work individually when working out the solutions.<span style=\"text-decoration: underline;\"> Never copy solutions of others or any solutions you find anywhere, including online</span>. Moreover, on assignments, quizzes and exams,"
    },
    {
        "page_index": 61,
        "chunk_index": 20,
        "text": "Moreover, on assignments, quizzes and exams, any person found to be cheating will receive a 0, and the full extent of the MU rules on academic dishonesty will be followed. No other warnings will be given or should be necessary.</p>"
    },
    {
        "page_index": 61,
        "chunk_index": 21,
        "text": "<p>&nbsp;</p>\n<p>If you have feedback that could help us improve the course or the course experience while you are taking the course, please let us know.</p>\n<p>I hope you have a great semester!</p>"
    },
    {
        "page_index": 62,
        "chunk_index": 0,
        "text": "<p style=\"margin-top: 0 !important;\">Our readings, materials, and discussion this week are aimed at helping us get started with Visual Studio IDE.</p>\n<h4><i class=\"icon-outcomes\"></i> <strong>Objectives</strong></h4>\n<p style=\"margin-top: 0 !important;\">After completing this week's work, you will be able to:</p>\n<ol style=\"margin-top: 0 !important;\">\n<li>Locate different components in Visual Studio IDE.</li>\n<li>Develop computer programs using VS IDE.</li>\n<li>Define the concepts of variables.</li>\n<li>Define different Boolean operations.</li>\n<li>Apply variables and Boolean operations in programming</li>\n</ol>\n<p>&nbsp;</p>\n<h4><i class=\"icon-question\"></i> <strong>M1 Activities</strong></h4>\n<ol style=\"margin-top: 0 !important;\">\n<li>Watch Video Lectures</li>\n<li>Read Programming Guide,</li>\n<li>Read&nbsp;Assessment and Rubrics</li>\n<li>Complete M1 Quiz and Assignments</li>\n</ol>\n<hr class=\"border br-md border-b br-blue-0\">"
    },
    {
        "page_index": 63,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-info\">&nbsp;For more information about installing the latest version of Visual Studio, see <a class=\"external\" href=\"https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio\" target=\"_blank\" data-linktype=\"absolute-path\">Install Visual Studio<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>.</i></p>\n<p>&nbsp;</p>\n<p><i class=\"icon-video\"></i>&nbsp;Video lectures:</p>\n<p><iframe src=\"https://www.youtube.com/embed/GFyFiB3lVPA\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>"
    },
    {
        "page_index": 64,
        "chunk_index": 0,
        "text": "<h4 id=\"microsoftdevelopersoftware\"><span style=\"font-size: 18pt;\">Microsoft Developer Software &amp; Visual Studio</span></h4>\n<p><span style=\"font-size: 12pt;\">Choose one of the ways that fits your need best.</span></p>\n<p><strong>1. </strong>For free Visual Studio Community version, go to <a class=\"inline_disabled\" href=\"https://visualstudio.microsoft.com/downloads/\" target=\"_blank\">Visual Studio 2022 Download</a>. Visual Studio Community version is sufficient for this course.<br><br></p>"
    },
    {
        "page_index": 64,
        "chunk_index": 1,
        "text": "<p><strong>2. </strong>College of Engineering RemoteApps servers allow students, faculty, and staff to utilize software remotely without installing the software physically on their machines.&nbsp;<a class=\"external\" href=\"http://remoteapps.missouri.edu/\" target=\"_blank\">http://remoteapps.missouri.edu/</a></p>"
    },
    {
        "page_index": 64,
        "chunk_index": 2,
        "text": "<p>Tutorials on how to use RemoteApps: <a href=\"https://mailmissouri.sharepoint.com/sites/COEIT/SitePages/CENGR-IT-Support---Public.aspx?csf=1&amp;web=1&amp;e=OreXRN&amp;cid=3a83ad74-d79b-4402-ba7b-c9ba4352f802\" target=\"_blank\">https://mailmissouri.sharepoint.com/sites/COEIT/SitePages/CENGR-IT-Support---Public.aspx?csf=1&amp;web=1&amp;e=OreXRN&amp;cid=3a83ad74-d79b-4402-ba7b-c9ba4352f802</a></p>\n<p>&nbsp;</p>\n<p><strong>3. </strong>Lafferre Hall C1206 C1205 computers have VS2022 installed</p>"
    },
    {
        "page_index": 64,
        "chunk_index": 3,
        "text": "<p>&nbsp;</p>\n<p><strong>4. </strong>For Visual Studio Enterprise version, follow the steps below.</p>\n<p>Microsoft software is available through the Microsoft Azure Dev Tools for Teaching.</p>\n<p>According to the page at <a href=\"https://azureforeducation.microsoft.com/devtools\">https://azureforeducation.microsoft.com/devtools</a>:</p>\n<blockquote>"
    },
    {
        "page_index": 64,
        "chunk_index": 4,
        "text": "<blockquote>\n<p>Students—you’re almost there! The developer tools and learning resources that were previously part of your Imagine account are now available with Azure Dev Tools for Teaching. Sign in using the button below—you’ll be taken to a page requesting you to sign in using a Microsoft Account. Learn about Microsoft Accounts here.</p>\n<p>Note: Please use the email you provided for your previous Imagine subscription access when creating a new Microsoft Account.</p>\n</blockquote>"
    },
    {
        "page_index": 64,
        "chunk_index": 5,
        "text": "</blockquote>\n<p>When you click the Sign In button you sign in using an existing Microsoft account or create a new account. The important thing is that you use your MU email address. Since your student email account is a Microsoft account, you may be able to directly log in. Or, if not, you will need to create an account using your email address.</p>\n<p>Once you log in, a page like the following should be displayed.</p>\n<div id=\"wrapper\">"
    },
    {
        "page_index": 64,
        "chunk_index": 6,
        "text": "<div id=\"wrapper\">\n<figure><img id=\"education-quick-start\" title=\"Education - Quick Start\" src=\"https://f.dale.onl/mu/all/IT%20Program/IT%20Program%20Resources/images/microsoft/Education%20-%20Quick%20Start.png\" alt=\"Eucation - Quick Start\" width=\"766\" height=\"455\" loading=\"lazy\"></figure>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 64,
        "chunk_index": 7,
        "text": "<p>&nbsp;</p>\n<p>Once you leave the <strong>Education - Overview</strong> page by clicking on links in the menu in the Azure portal, I am not sure how to navigate back to it. If you leave the page and need to get back to it, just go to the URL to login again <a href=\"https://azureforeducation.microsoft.com/devtools\">https://azureforeducation.microsoft.com/devtools</a>.</p>"
    },
    {
        "page_index": 64,
        "chunk_index": 8,
        "text": "<p>Click the <strong>Software</strong> link to view the Microsoft Software that is available. Visual Studio Enterprise is the first one in the list.&nbsp;</p>\n<div id=\"wrapper\">\n<figure><img id=\"microsoft-software\" title=\"Microsoft Software\" src=\"https://f.dale.onl/mu/all/IT%20Program/IT%20Program%20Resources/images/microsoft/Microsoft%20Software.png\" alt=\"Microsoft Software\" width=\"768\" height=\"430\" loading=\"lazy\"></figure>\n</div>\n</div>"
    },
    {
        "page_index": 65,
        "chunk_index": 0,
        "text": "<h1 id=\"welcome-to-the-visual-studio-ide\"><span style=\"font-size: 18pt;\"><strong><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/visualstudio/get-started/visual-studio-ide?view=vs-2022\" target=\"_blank\">Welcome to the Visual Studio IDE</a></strong></span></h1>"
    },
    {
        "page_index": 65,
        "chunk_index": 1,
        "text": "<p>An<span>&nbsp;</span><em>integrated development environment</em><span>&nbsp;</span>(IDE) is a feature-rich program that supports many aspects of software development. The Visual Studio IDE is a creative launching pad that you can use to edit, debug, and build code, and then publish an app. Over and above the standard editor and debugger that most IDEs provide, Visual Studio includes compilers, code completion tools, graphical designers, and many more features to enhance the software"
    },
    {
        "page_index": 65,
        "chunk_index": 2,
        "text": "and many more features to enhance the software development process.</p>"
    },
    {
        "page_index": 65,
        "chunk_index": 3,
        "text": "<div data-moniker=\"vs-2022\">"
    },
    {
        "page_index": 65,
        "chunk_index": 4,
        "text": "<p><a class=\"lightbox-enabled\" href=\"https://learn.microsoft.com/en-us/visualstudio/get-started/media/vs-2022/ide-overview.png?view=vs-2022#lightbox\" data-linktype=\"relative-path\" data-bi-name=\"lightbox\" aria-haspopup=\"dialog\"><img src=\"https://learn.microsoft.com/en-us/visualstudio/get-started/media/vs-2022/ide-overview.png?view=vs-2022\" alt=\"Screenshot showing the Visual Studio 2022 IDE, with callouts indicating the location of key features and functionality.\" data-linktype=\"relative-path\""
    },
    {
        "page_index": 65,
        "chunk_index": 5,
        "text": "and functionality.\" data-linktype=\"relative-path\" loading=\"lazy\"></a></p>"
    },
    {
        "page_index": 65,
        "chunk_index": 6,
        "text": "</div>\n<p>The preceding image shows Visual Studio with an open project that shows key windows and their functionality:</p>\n<ul>\n<li>"
    },
    {
        "page_index": 65,
        "chunk_index": 7,
        "text": "<p>In<span>&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/use-solution-explorer?view=vs-2022\" data-linktype=\"relative-path\">Solution Explorer</a>, at upper right, you can view, navigate, and manage your code files.<span>&nbsp;</span><strong>Solution Explorer</strong><span>&nbsp;</span>can help organize your code by grouping the files into<span>&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/solutions-and-projects-in-visual-studio?view=vs-2022\""
    },
    {
        "page_index": 65,
        "chunk_index": 8,
        "text": "data-linktype=\"relative-path\">solutions and projects</a>.</p>"
    },
    {
        "page_index": 65,
        "chunk_index": 9,
        "text": "</li>\n<li>\n<p>The central<span>&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/visualstudio/ide/writing-code-in-the-code-and-text-editor?view=vs-2022\" data-linktype=\"relative-path\">editor window</a>, where you'll probably spend most of your time, displays file contents. In the editor window, you can edit code or design a user interface such as a window with buttons and text boxes.</p>\n</li>\n<li>"
    },
    {
        "page_index": 65,
        "chunk_index": 10,
        "text": "</li>\n<li>\n<p>In<span>&nbsp;</span><a href=\"https://learn.microsoft.com/en-us/visualstudio/version-control/\" data-linktype=\"absolute-path\">Git Changes</a><span>&nbsp;</span>at lower right, you can track work items and share code with others by using version control technologies like<span>&nbsp;</span><a href=\"https://git-scm.com/\" data-linktype=\"external\">Git</a><span>&nbsp;</span>and<span>&nbsp;</span><a href=\"https://github.com/\" data-linktype=\"external\">GitHub</a>.</p>\n</li>\n</ul>"
    },
    {
        "page_index": 65,
        "chunk_index": 11,
        "text": "</li>\n</ul>\n<p>&nbsp;</p>\n<h1 id=\"intellisense-in-visual-studio\"><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2022\" target=\"_blank\"><strong><span style=\"font-size: 18pt;\">IntelliSense in Visual Studio</span></strong></a></h1>"
    },
    {
        "page_index": 65,
        "chunk_index": 12,
        "text": "<p><span style=\"font-size: 12pt;\">IntelliSense is a code-completion aid that includes a number of features: List Members, Parameter Info, Quick Info, and Complete Word. These features help you to learn more about the code you're using, keep track of the parameters you're typing, and add calls to properties and methods with only a few keystrokes.</span></p>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 65,
        "chunk_index": 13,
        "text": "<p>&nbsp;</p>\n<p><strong><a href=\"https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/?view=vs-2022\"><span style=\"font-size: 18pt;\">Visual Studio Tutorial | C#</span></a></strong></p>"
    },
    {
        "page_index": 66,
        "chunk_index": 0,
        "text": "<p><a class=\"inline_disabled\" href=\"https://visualstudio.microsoft.com/vs/github/\" target=\"_blank\">Visual Studio and GitHub</a></p>\n<p><a class=\"inline_disabled\" title=\"Link\" href=\"https://learn.microsoft.com/en-us/visualstudio/version-control/?wt.mc_id=visualstudio_vscomwebsite_webpage_cnl&amp;view=vs-2022\" target=\"_blank\">Visual Studio version control docs</a></p>\n<ul>\n<li><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/visualstudio/version-control/git-create-repository?view=vs-2022\" target=\"_blank\">Create a Git repository from Visual Studio</a></li>\n<li><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/visualstudio/version-control/git-clone-repository?view=vs-2022\" target=\"_blank\">Clone a Git repository in Visual Studio</a></li>\n</ul>"
    },
    {
        "page_index": 67,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"M1_Variables.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026318/download?verifier=4mZ8CrTiKIStCoGHC6JsglYXqmdYDYNkUc8bZ0Nz&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026318\" data-api-returntype=\"File\">M1_Variables.pdf</a></p>\n<p><i class=\"icon-video\"></i><strong>&nbsp;Video Lectures</strong>:&nbsp;</p>\n<p>Part 1</p>\n<p><iframe src=\"https://www.youtube.com/embed/D9Q2YNSqxoY\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>&nbsp;</p>\n<p>Part 2</p>\n<p><iframe src=\"https://www.youtube.com/embed/Dkp-SBI9BHg\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 68,
        "chunk_index": 0,
        "text": "<h1 id=\"types-and-variables\">Types and variables</h1>"
    },
    {
        "page_index": 68,
        "chunk_index": 1,
        "text": "<p>There are two kinds of types in C#:&nbsp;<em>value types</em>&nbsp;and&nbsp;<em>reference types</em>. Variables of value types directly contain their data whereas variables of reference types store references to their data, the latter being known as objects. With reference types, it is possible for two variables to reference the same object and thus possible for operations on one variable to affect the object referenced by the other variable. With value types, the variables each have their"
    },
    {
        "page_index": 68,
        "chunk_index": 2,
        "text": "With value types, the variables each have their own copy of the data, and it is not possible for operations on one to affect the other (except in the case of&nbsp;<code>ref</code>&nbsp;and&nbsp;<code>out</code>&nbsp;parameter variables).</p>"
    },
    {
        "page_index": 68,
        "chunk_index": 3,
        "text": "<p>C#’s value types are further divided into&nbsp;<em>simple types</em>,&nbsp;<em>enum types</em>,&nbsp;<em>struct types</em>, and&nbsp;<em>nullable value types</em>. C#’s reference types are further divided into&nbsp;<em>class types</em>,&nbsp;<em>interface types</em>,&nbsp;<em>array types</em>, and&nbsp;<em>delegate types</em>.</p>\n<p>The following provides an overview of C#’s type system.</p>\n<ul>"
    },
    {
        "page_index": 68,
        "chunk_index": 4,
        "text": "<ul>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value-types-table\" target=\"_blank\" data-linktype=\"relative-path\">Value types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>"
    },
    {
        "page_index": 68,
        "chunk_index": 5,
        "text": "<ul>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/value-types#simple-types\" target=\"_blank\" data-linktype=\"relative-path\">Simple types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>Signed integral:&nbsp;<code>sbyte</code>,&nbsp;<code>short</code>,&nbsp;<code>int</code>,&nbsp;<code>long</code></li>"
    },
    {
        "page_index": 68,
        "chunk_index": 6,
        "text": "<li>Unsigned integral:&nbsp;<code>byte</code>,&nbsp;<code>ushort</code>,&nbsp;<code>uint</code>,&nbsp;<code>ulong</code></li>\n<li>Unicode characters:&nbsp;<code>char</code></li>\n<li>IEEE binary floating-point:&nbsp;<code>float</code>,&nbsp;<code>double</code></li>\n<li>High-precision decimal floating-point:&nbsp;<code>decimal</code></li>\n<li>Boolean:&nbsp;<code>bool</code></li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 7,
        "text": "</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/enum\" target=\"_blank\" data-linktype=\"relative-path\">Enum types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>User-defined types of the form&nbsp;<code>enum E {...}</code></li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 8,
        "text": "</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/struct\" target=\"_blank\" data-linktype=\"relative-path\">Struct types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>User-defined types of the form&nbsp;<code>struct S {...}</code></li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 9,
        "text": "</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/nullable-types/index\" target=\"_blank\" data-linktype=\"relative-path\">Nullable value types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>Extensions of all other value types with a&nbsp;<code>null</code>&nbsp;value</li>\n</ul>\n</li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 10,
        "text": "</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/reference-types\" target=\"_blank\" data-linktype=\"relative-path\">Reference types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>"
    },
    {
        "page_index": 68,
        "chunk_index": 11,
        "text": "<ul>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/class\" target=\"_blank\" data-linktype=\"relative-path\">Class types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>Ultimate base class of all other types:&nbsp;<code>object</code></li>\n<li>Unicode strings:&nbsp;<code>string</code></li>\n<li>User-defined types of the form&nbsp;<code>class C {...}</code></li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 12,
        "text": "</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface\" target=\"_blank\" data-linktype=\"relative-path\">Interface types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>User-defined types of the form&nbsp;<code>interface I {...}</code></li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 13,
        "text": "</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/arrays/index\" target=\"_blank\" data-linktype=\"relative-path\">Array types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>Single- and multi-dimensional, for example,&nbsp;<code>int[]</code>&nbsp;and&nbsp;<code>int[,]</code></li>\n</ul>\n</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 14,
        "text": "</ul>\n</li>\n<li><a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/delegate\" target=\"_blank\" data-linktype=\"relative-path\">Delegate types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>\n<ul>\n<li>User-defined types of the form&nbsp;<code>delegate int D(...)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"
    },
    {
        "page_index": 68,
        "chunk_index": 15,
        "text": "<p>For more information about numeric types, see&nbsp;<a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" target=\"_blank\" data-linktype=\"relative-path\">Integral types<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>&nbsp;and&nbsp;<a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/floating-point-numeric-types\" target=\"_blank\""
    },
    {
        "page_index": 68,
        "chunk_index": 16,
        "text": "target=\"_blank\" data-linktype=\"relative-path\">Floating-point types table<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>.</p>"
    },
    {
        "page_index": 68,
        "chunk_index": 17,
        "text": "<p>C#’s&nbsp;<code>bool</code>&nbsp;type is used to represent Boolean values—values that are either&nbsp;<code>true</code>&nbsp;or&nbsp;<code>false</code>.</p>\n<p>Character and string processing in C# uses Unicode encoding. The&nbsp;<code>char</code>&nbsp;type represents a UTF-16 code unit, and the&nbsp;<code>string</code>&nbsp;type represents a sequence of UTF-16 code units.</p>"
    },
    {
        "page_index": 68,
        "chunk_index": 18,
        "text": "<p>C# programs use&nbsp;<em>type declarations</em>&nbsp;to create new types. A type declaration specifies the name and the members of the new type. Five of C#’s categories of types are user-definable: class types, struct types, interface types, enum types, and delegate types.</p>\n<p>&nbsp;</p>\n<h1 id=\"identifier-names\">Identifier names</h1>"
    },
    {
        "page_index": 68,
        "chunk_index": 19,
        "text": "<h1 id=\"identifier-names\">Identifier names</h1>\n<p>An&nbsp;<strong>identifier</strong>&nbsp;is the name you assign to a type (class, interface, struct, delegate, or enum), member, variable, or namespace. Valid identifiers must follow these rules:</p>\n<ul>\n<li>Identifiers must start with a letter, or&nbsp;<code>_</code>.</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 20,
        "text": "<li>Identifiers may contain Unicode letter characters, decimal digit characters, Unicode connecting characters, Unicode combining characters, or Unicode formatting characters. For more information on Unicode categories, see the&nbsp;<a class=\"external\" href=\"https://www.unicode.org/reports/tr44/\" target=\"_blank\" data-linktype=\"external\">Unicode Category Database<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>. You can declare identifiers that match C# keywords by"
    },
    {
        "page_index": 68,
        "chunk_index": 21,
        "text": "can declare identifiers that match C# keywords by using the&nbsp;<code>@</code>&nbsp;prefix on the identifier. The&nbsp;<code>@</code>&nbsp;is not part of the identifier name. For example,&nbsp;<code>@if</code>&nbsp;declares an identifier named&nbsp;<code>if</code>. These&nbsp;<a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/verbatim\" target=\"_blank\" data-linktype=\"relative-path\">verbatim identifiers<span class=\"screenreader-only\">&nbsp;(Links"
    },
    {
        "page_index": 68,
        "chunk_index": 22,
        "text": "class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>&nbsp;are primarily for interoperability with identifiers declared in other languages.</li>"
    },
    {
        "page_index": 68,
        "chunk_index": 23,
        "text": "</ul>\n<p>For a complete definition of valid identifiers, see the&nbsp;<a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#identifiers\" target=\"_blank\" data-linktype=\"relative-path\">Identifiers topic in the C# Language Specification<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>.</p>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 68,
        "chunk_index": 24,
        "text": "<p>&nbsp;</p>\n<h2 id=\"naming-conventions\">Naming conventions<a class=\"docon docon-link heading-anchor external\" href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/identifier-names#naming-conventions\" target=\"_blank\" aria-labelledby=\"naming-conventions\"> </a></h2>"
    },
    {
        "page_index": 68,
        "chunk_index": 25,
        "text": "<p>In addition to the rules, there are a number of identifier&nbsp;<a class=\"external\" href=\"https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines\" target=\"_blank\" data-linktype=\"relative-path\">naming conventions<span class=\"screenreader-only\">&nbsp;(Links to an external site.)</span></a>&nbsp;used throughout the .NET APIs. By convention, C# programs use&nbsp;<code>PascalCase</code>&nbsp;for type names, namespaces, and all public members. In addition, the"
    },
    {
        "page_index": 68,
        "chunk_index": 26,
        "text": "and all public members. In addition, the following conventions are common:</p>"
    },
    {
        "page_index": 68,
        "chunk_index": 27,
        "text": "<ul>\n<li>Interface names start with a capital&nbsp;<code>I</code>.</li>\n<li>Attribute types end with the word&nbsp;<code>Attribute</code>.</li>\n<li>Enum types use a singular noun for non-flags, and a plural noun for flags.</li>\n<li>Identifiers should not contain two consecutive&nbsp;<code>_</code>&nbsp;characters. Those names are reserved for compiler generated identifiers.</li>\n</ul>"
    },
    {
        "page_index": 69,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i><strong>&nbsp;Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"M1_Boolean.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026286/download?verifier=MD2R8m7RtcaKUhpx3LVcdUCXrv5XiA2G7EjfuIDm&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026286\" data-api-returntype=\"File\">M1_Boolean.pdf</a></p>\n<p><i class=\"icon-video\"></i><strong>&nbsp;Video Lectures:&nbsp;</strong></p>\n<p>Boonlean Operations and Comparison Operators</p>\n<p><iframe src=\"https://www.youtube.com/embed/WasllW0of_g\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>&nbsp;</p>\n<p>Conditional Statements</p>\n<p><iframe src=\"https://www.youtube.com/embed/p7maaPUr6QM\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p>&nbsp;</p>\n<p><i class=\"icon-like\"></i><strong>&nbsp;Recommended Online Resources:</strong></p>\n<p>1. Channel 9 - <i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/The-if-Decision-Statement\">The if Decision Statement</a></i></p>\n<p>2. Channel 9 - <i class=\"icon-video\"> <a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Operators-Expressions-and-Statements\">Operators, Expressions, and Statements</a></i></p>"
    },
    {
        "page_index": 70,
        "chunk_index": 0,
        "text": "<h1 id=\"boolean-logical-operators-c-reference\">Boolean logical operators&nbsp;</h1>\n<p>The following operators perform logical operations with&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/bool\" data-linktype=\"relative-path\">bool</a>&nbsp;operands:</p>\n<ul>"
    },
    {
        "page_index": 70,
        "chunk_index": 1,
        "text": "<ul>\n<li>Unary&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-negation-operator-\" data-linktype=\"self-bookmark\"><code>!</code>&nbsp;(logical negation)</a>&nbsp;operator.</li>"
    },
    {
        "page_index": 70,
        "chunk_index": 2,
        "text": "<li>Binary&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-and-operator-\" data-linktype=\"self-bookmark\"><code>&amp;</code>&nbsp;(logical AND)</a>,&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-or-operator-\" data-linktype=\"self-bookmark\"><code>|</code>&nbsp;(logical OR)</a>, and&nbsp;<a"
    },
    {
        "page_index": 70,
        "chunk_index": 3,
        "text": "OR)</a>, and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-exclusive-or-operator-\" data-linktype=\"self-bookmark\"><code>^</code>&nbsp;(logical exclusive OR)</a>&nbsp;operators. Those operators always evaluate both operands.</li>"
    },
    {
        "page_index": 70,
        "chunk_index": 4,
        "text": "<li>Binary&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-and-operator-\" data-linktype=\"self-bookmark\"><code>&amp;&amp;</code>&nbsp;(conditional logical AND)</a>&nbsp;and&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-or-operator-\" data-linktype=\"self-bookmark\"><code>||</code>&nbsp;(conditional logical"
    },
    {
        "page_index": 70,
        "chunk_index": 5,
        "text": "logical OR)</a>&nbsp;operators. Those operators evaluate the right-hand operand only if it's necessary.</li>"
    },
    {
        "page_index": 70,
        "chunk_index": 6,
        "text": "</ul>"
    },
    {
        "page_index": 70,
        "chunk_index": 7,
        "text": "<p>For operands of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">integral numeric types</a>, the&nbsp;<code>&amp;</code>,&nbsp;<code>|</code>, and&nbsp;<code>^</code>&nbsp;operators perform bitwise logical operations. For more information, see&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators\""
    },
    {
        "page_index": 70,
        "chunk_index": 8,
        "text": "data-linktype=\"relative-path\">Bitwise and shift operators</a>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 9,
        "text": "<h2 id=\"logical-negation-operator-\">Logical negation operator !</h2>\n<p>The unary prefix&nbsp;<code>!</code>&nbsp;operator computes logical negation of its operand. That is, it produces&nbsp;<code>true</code>, if the operand evaluates to&nbsp;<code>false</code>, and&nbsp;<code>false</code>, if the operand evaluates to&nbsp;<code>true</code>:</p>\n<div id=\"code-try-0\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 70,
        "chunk_index": 10,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"bool passed = false;\nConsole.WriteLine(!passed);  // output: True\nConsole.WriteLine(!true);    // output: False\n\"><span class=\"hljs-keyword\">bool</span> passed = <span class=\"hljs-literal\">false</span>;\nConsole.WriteLine(!passed);  <span class=\"hljs-comment\">// output: True</span>\nConsole.WriteLine(!<span class=\"hljs-literal\">true</span>);    <span class=\"hljs-comment\">// output: False</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 11,
        "text": "</code></pre>\n<p>Beginning with C# 8.0, the unary postfix&nbsp;<code>!</code>&nbsp;operator is the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-forgiving\" data-linktype=\"relative-path\">null-forgiving operator</a>.</p>\n<h2 id=\"logical-and-operator-\">Logical AND operator &amp;</h2>"
    },
    {
        "page_index": 70,
        "chunk_index": 12,
        "text": "<p>The&nbsp;<code>&amp;</code>&nbsp;operator computes the logical AND of its operands. The result of&nbsp;<code>x &amp; y</code>&nbsp;is&nbsp;<code>true</code>&nbsp;if both&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;evaluate to&nbsp;<code>true</code>. Otherwise, the result is&nbsp;<code>false</code>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 13,
        "text": "<p>The&nbsp;<code>&amp;</code>&nbsp;operator evaluates both operands even if the left-hand operand evaluates to&nbsp;<code>false</code>, so that the operation result is&nbsp;<code>false</code>&nbsp;regardless of the value of the right-hand operand.</p>\n<p>In the following example, the right-hand operand of the&nbsp;<code>&amp;</code>&nbsp;operator is a method call, which is performed regardless of the value of the left-hand operand:</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 14,
        "text": "<div id=\"code-try-1\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"bool SecondOperand() \n{\n    Console.WriteLine(&quot;Second operand is evaluated.&quot;);\n    return true;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 15,
        "text": "bool a = false &amp; SecondOperand();\nConsole.WriteLine(a);\n// Output:\n// Second operand is evaluated.\n// False"
    },
    {
        "page_index": 70,
        "chunk_index": 16,
        "text": "bool b = true &amp; SecondOperand();\nConsole.WriteLine(b);\n// Output:\n// Second operand is evaluated.\n// True\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">SecondOperand</span>()</span> \n{\n    Console.WriteLine(<span class=\"hljs-string\">\"Second operand is evaluated.\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 17,
        "text": "<span class=\"hljs-keyword\">bool</span> a = <span class=\"hljs-literal\">false</span> &amp; SecondOperand();\nConsole.WriteLine(a);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Second operand is evaluated.</span>\n<span class=\"hljs-comment\">// False</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 18,
        "text": "<span class=\"hljs-keyword\">bool</span> b = <span class=\"hljs-literal\">true</span> &amp; SecondOperand();\nConsole.WriteLine(b);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Second operand is evaluated.</span>\n<span class=\"hljs-comment\">// True</span>\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 19,
        "text": "</code></pre>\n<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-and-operator-\" data-linktype=\"self-bookmark\">conditional logical AND operator</a>&nbsp;<code>&amp;&amp;</code>&nbsp;also computes the logical AND of its operands, but doesn't evaluate the right-hand operand if the left-hand operand evaluates to&nbsp;<code>false</code>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 20,
        "text": "<p>For operands of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">integral numeric types</a>, the&nbsp;<code>&amp;</code>&nbsp;operator computes the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-and-operator-\" data-linktype=\"relative-path\">bitwise logical AND</a>&nbsp;of its operands. The"
    },
    {
        "page_index": 70,
        "chunk_index": 21,
        "text": "logical AND</a>&nbsp;of its operands. The unary&nbsp;<code>&amp;</code>&nbsp;operator is the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-\" data-linktype=\"relative-path\">address-of operator</a>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 22,
        "text": "<h2 id=\"logical-exclusive-or-operator-\">Logical exclusive OR operator ^</h2>"
    },
    {
        "page_index": 70,
        "chunk_index": 23,
        "text": "<p>The&nbsp;<code>^</code>&nbsp;operator computes the logical exclusive OR, also known as the logical XOR, of its operands. The result of&nbsp;<code>x ^ y</code>&nbsp;is&nbsp;<code>true</code>&nbsp;if&nbsp;<code>x</code>&nbsp;evaluates to&nbsp;<code>true</code>&nbsp;and&nbsp;<code>y</code>&nbsp;evaluates to&nbsp;<code>false</code>, or&nbsp;<code>x</code>&nbsp;evaluates to&nbsp;<code>false</code>&nbsp;and&nbsp;<code>y</code>&nbsp;evaluates to&nbsp;<code>true</code>. Otherwise, the result"
    },
    {
        "page_index": 70,
        "chunk_index": 24,
        "text": "to&nbsp;<code>true</code>. Otherwise, the result is&nbsp;<code>false</code>. That is, for the&nbsp;<code>bool</code>&nbsp;operands, the&nbsp;<code>^</code>&nbsp;operator computes the same result as the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/equality-operators#inequality-operator-\" data-linktype=\"relative-path\">inequality operator</a>&nbsp;<code>!=</code>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 25,
        "text": "<div id=\"code-try-2\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"Console.WriteLine(true ^ true);    // output: False\nConsole.WriteLine(true ^ false);   // output: True\nConsole.WriteLine(false ^ true);   // output: True\nConsole.WriteLine(false ^ false);  // output: False"
    },
    {
        "page_index": 70,
        "chunk_index": 26,
        "text": "\">Console.WriteLine(<span class=\"hljs-literal\">true</span> ^ <span class=\"hljs-literal\">true</span>);    <span class=\"hljs-comment\">// output: False</span>\nConsole.WriteLine(<span class=\"hljs-literal\">true</span> ^ <span class=\"hljs-literal\">false</span>);   <span class=\"hljs-comment\">// output: True</span>\nConsole.WriteLine(<span class=\"hljs-literal\">false</span> ^ <span class=\"hljs-literal\">true</span>);   <span class=\"hljs-comment\">// output: True</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 27,
        "text": "Console.WriteLine(<span class=\"hljs-literal\">false</span> ^ <span class=\"hljs-literal\">false</span>);  <span class=\"hljs-comment\">// output: False</span>\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 28,
        "text": "<p>For operands of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">integral numeric types</a>, the&nbsp;<code>^</code>&nbsp;operator computes the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-exclusive-or-operator-\" data-linktype=\"relative-path\">bitwise logical exclusive OR</a>&nbsp;of its operands.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 29,
        "text": "<h2 id=\"logical-or-operator-\">Logical OR operator |</h2>\n<p>The&nbsp;<code>|</code>&nbsp;operator computes the logical OR of its operands. The result of&nbsp;<code>x | y</code>&nbsp;is&nbsp;<code>true</code>&nbsp;if either&nbsp;<code>x</code>&nbsp;or&nbsp;<code>y</code>&nbsp;evaluates to&nbsp;<code>true</code>. Otherwise, the result is&nbsp;<code>false</code>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 30,
        "text": "<p>The&nbsp;<code>|</code>&nbsp;operator evaluates both operands even if the left-hand operand evaluates to&nbsp;<code>true</code>, so that the operation result is&nbsp;<code>true</code>&nbsp;regardless of the value of the right-hand operand.</p>\n<p>In the following example, the right-hand operand of the&nbsp;<code>|</code>&nbsp;operator is a method call, which is performed regardless of the value of the left-hand operand:</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 31,
        "text": "<div id=\"code-try-3\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"bool SecondOperand() \n{\n    Console.WriteLine(&quot;Second operand is evaluated.&quot;);\n    return true;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 32,
        "text": "bool a = true | SecondOperand();\nConsole.WriteLine(a);\n// Output:\n// Second operand is evaluated.\n// True"
    },
    {
        "page_index": 70,
        "chunk_index": 33,
        "text": "bool b = false | SecondOperand();\nConsole.WriteLine(b);\n// Output:\n// Second operand is evaluated.\n// True\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">SecondOperand</span>()</span> \n{\n    Console.WriteLine(<span class=\"hljs-string\">\"Second operand is evaluated.\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 34,
        "text": "<span class=\"hljs-keyword\">bool</span> a = <span class=\"hljs-literal\">true</span> | SecondOperand();\nConsole.WriteLine(a);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Second operand is evaluated.</span>\n<span class=\"hljs-comment\">// True</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 35,
        "text": "<span class=\"hljs-keyword\">bool</span> b = <span class=\"hljs-literal\">false</span> | SecondOperand();\nConsole.WriteLine(b);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Second operand is evaluated.</span>\n<span class=\"hljs-comment\">// True</span>\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 36,
        "text": "</code></pre>\n<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#conditional-logical-or-operator-\" data-linktype=\"self-bookmark\">conditional logical OR operator</a>&nbsp;<code>||</code>&nbsp;also computes the logical OR of its operands, but doesn't evaluate the right-hand operand if the left-hand operand evaluates to&nbsp;<code>true</code>.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 37,
        "text": "<p>For operands of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/integral-numeric-types\" data-linktype=\"relative-path\">integral numeric types</a>, the&nbsp;<code>|</code>&nbsp;operator computes the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-or-operator-\" data-linktype=\"relative-path\">bitwise logical OR</a>&nbsp;of its operands.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 38,
        "text": "<h2 id=\"conditional-logical-and-operator-\">Conditional logical AND operator &amp;&amp;</h2>"
    },
    {
        "page_index": 70,
        "chunk_index": 39,
        "text": "<p>The conditional logical AND operator&nbsp;<code>&amp;&amp;</code>, also known as the \"short-circuiting\" logical AND operator, computes the logical AND of its operands. The result of&nbsp;<code>x &amp;&amp; y</code>&nbsp;is&nbsp;<code>true</code>&nbsp;if both&nbsp;<code>x</code>&nbsp;and&nbsp;<code>y</code>&nbsp;evaluate to&nbsp;<code>true</code>. Otherwise, the result is&nbsp;<code>false</code>. If&nbsp;<code>x</code>&nbsp;evaluates to&nbsp;<code>false</code>,&nbsp;<code>y</code>&nbsp;is not"
    },
    {
        "page_index": 70,
        "chunk_index": 40,
        "text": "not evaluated.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 41,
        "text": "<p>In the following example, the right-hand operand of the&nbsp;<code>&amp;&amp;</code>&nbsp;operator is a method call, which isn't performed if the left-hand operand evaluates to&nbsp;<code>false</code>:</p>\n<div id=\"code-try-4\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"bool SecondOperand()\n{"
    },
    {
        "page_index": 70,
        "chunk_index": 42,
        "text": "{\n    Console.WriteLine(&quot;Second operand is evaluated.&quot;);\n    return true;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 43,
        "text": "bool a = false &amp;&amp; SecondOperand();\nConsole.WriteLine(a);\n// Output:\n// False"
    },
    {
        "page_index": 70,
        "chunk_index": 44,
        "text": "bool b = true &amp;&amp; SecondOperand();\nConsole.WriteLine(b);\n// Output:\n// Second operand is evaluated.\n// True\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">SecondOperand</span>()</span>\n{\n    Console.WriteLine(<span class=\"hljs-string\">\"Second operand is evaluated.\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 45,
        "text": "<span class=\"hljs-keyword\">bool</span> a = <span class=\"hljs-literal\">false</span> &amp;&amp; SecondOperand();\nConsole.WriteLine(a);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// False</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 46,
        "text": "<span class=\"hljs-keyword\">bool</span> b = <span class=\"hljs-literal\">true</span> &amp;&amp; SecondOperand();\nConsole.WriteLine(b);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Second operand is evaluated.</span>\n<span class=\"hljs-comment\">// True</span>\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 47,
        "text": "</code></pre>\n<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-and-operator-\" data-linktype=\"self-bookmark\">logical AND operator</a>&nbsp;<code>&amp;</code>&nbsp;also computes the logical AND of its operands, but always evaluates both operands.</p>\n<h2 id=\"conditional-logical-or-operator-\">Conditional logical OR operator ||</h2>"
    },
    {
        "page_index": 70,
        "chunk_index": 48,
        "text": "<p>The conditional logical OR operator&nbsp;<code>||</code>, also known as the \"short-circuiting\" logical OR operator, computes the logical OR of its operands. The result of&nbsp;<code>x || y</code>&nbsp;is&nbsp;<code>true</code>&nbsp;if either&nbsp;<code>x</code>&nbsp;or&nbsp;<code>y</code>&nbsp;evaluates to&nbsp;<code>true</code>. Otherwise, the result is&nbsp;<code>false</code>. If&nbsp;<code>x</code>&nbsp;evaluates to&nbsp;<code>true</code>,&nbsp;<code>y</code>&nbsp;is not evaluated.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 49,
        "text": "<p>In the following example, the right-hand operand of the&nbsp;<code>||</code>&nbsp;operator is a method call, which isn't performed if the left-hand operand evaluates to&nbsp;<code>true</code>:</p>\n<div id=\"code-try-5\" class=\"codeHeader\" data-bi-name=\"code-header\"></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"bool SecondOperand()\n{\n    Console.WriteLine(&quot;Second operand is evaluated.&quot;);\n    return true;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 50,
        "text": "bool a = true || SecondOperand();\nConsole.WriteLine(a);\n// Output:\n// True\n\nbool b = false || SecondOperand();\nConsole.WriteLine(b);\n// Output:\n// Second operand is evaluated.\n// True\n\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">SecondOperand</span>()</span>\n{\n    Console.WriteLine(<span class=\"hljs-string\">\"Second operand is evaluated.\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 51,
        "text": "<span class=\"hljs-keyword\">bool</span> a = <span class=\"hljs-literal\">true</span> || SecondOperand();\nConsole.WriteLine(a);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// True</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 52,
        "text": "<span class=\"hljs-keyword\">bool</span> b = <span class=\"hljs-literal\">false</span> || SecondOperand();\nConsole.WriteLine(b);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Second operand is evaluated.</span>\n<span class=\"hljs-comment\">// True</span>\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 53,
        "text": "</code></pre>\n<p>The&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/boolean-logical-operators#logical-or-operator-\" data-linktype=\"self-bookmark\">logical OR operator</a>&nbsp;<code>|</code>&nbsp;also computes the logical OR of its operands, but always evaluates both operands.</p>\n<h2 id=\"nullable-boolean-logical-operators\">Nullable Boolean logical operators</h2>"
    },
    {
        "page_index": 70,
        "chunk_index": 54,
        "text": "<p>For&nbsp;<code>bool?</code>&nbsp;operands, the&nbsp;<code>&amp;</code>&nbsp;and&nbsp;<code>|</code>&nbsp;operators support the three-valued logic. The semantics of these operators is defined by the following table:</p>\n<div class=\"table-scroll-wrapper\">\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>y</th>\n<th>x&amp;y</th>\n<th>x|y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>"
    },
    {
        "page_index": 70,
        "chunk_index": 55,
        "text": "<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>null</td>\n<td>null</td>\n<td>true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>false</td>\n<td>null</td>\n<td>false</td>\n<td>null</td>\n</tr>\n<tr>\n<td>null</td>\n<td>true</td>\n<td>null</td>\n<td>true</td>\n</tr>\n<tr>\n<td>null</td>\n<td>false</td>\n<td>false</td>\n<td>null</td>\n</tr>\n<tr>\n<td>null</td>\n<td>null</td>\n<td>null</td>"
    },
    {
        "page_index": 70,
        "chunk_index": 56,
        "text": "<tr>\n<td>null</td>\n<td>null</td>\n<td>null</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n</div>"
    },
    {
        "page_index": 70,
        "chunk_index": 57,
        "text": "<p>The behavior of those operators differs from the typical operator behavior with nullable value types. Typically, an operator which is defined for operands of a value type can be also used with operands of the corresponding nullable value type. Such an operator produces&nbsp;<code>null</code>&nbsp;if any of its operands evaluates to&nbsp;<code>null</code>. However, the&nbsp;<code>&amp;</code>&nbsp;and&nbsp;<code>|</code>&nbsp;operators can produce non-null even if one of the operands"
    },
    {
        "page_index": 70,
        "chunk_index": 58,
        "text": "can produce non-null even if one of the operands evaluates to&nbsp;<code>null</code>. For more information about the operator behavior with nullable value types, see the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types#lifted-operators\" data-linktype=\"relative-path\">Lifted operators</a>&nbsp;section of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types\""
    },
    {
        "page_index": 70,
        "chunk_index": 59,
        "text": "data-linktype=\"relative-path\">Nullable value types</a>&nbsp;article.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 60,
        "text": "<p>You can also use the&nbsp;<code>!</code>&nbsp;and&nbsp;<code>^</code>&nbsp;operators with&nbsp;<code>bool?</code>&nbsp;operands, as the following example shows:</p>\n<div id=\"code-try-6\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 70,
        "chunk_index": 61,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" style=\"font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 1em; direction: ltr; position: relative; border: 0px; padding: 0px; display: block; line-height: 19px;\" data-interactive=\"csharp\" data-author-content=\"bool? test = null;\nDisplay(!test);         // output: null\nDisplay(test ^ false);  // output: null\nDisplay(test ^ null);   // output: null\nDisplay(true ^ null);   // output: null"
    },
    {
        "page_index": 70,
        "chunk_index": 62,
        "text": "void Display(bool? b) => Console.WriteLine(b is null ? &quot;null&quot; : b.Value.ToString());\n\"><span class=\"hljs-keyword\">bool</span>? test = <span class=\"hljs-literal\">null</span>;\nDisplay(!test);         <span class=\"hljs-comment\">// output: null</span>\nDisplay(test ^ <span class=\"hljs-literal\">false</span>);  <span class=\"hljs-comment\">// output: null</span>\nDisplay(test ^ <span class=\"hljs-literal\">null</span>);   <span class=\"hljs-comment\">// output: null</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 63,
        "text": "Display(<span class=\"hljs-literal\">true</span> ^ <span class=\"hljs-literal\">null</span>);   <span class=\"hljs-comment\">// output: null </span>"
    },
    {
        "page_index": 70,
        "chunk_index": 64,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Display</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">bool</span>? b</span>)</span> =&gt; Console.WriteLine(b <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-string\">\"null\"</span> : b.Value.ToString());\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 65,
        "text": "</code></pre>\n<p>The conditional logical operators&nbsp;<code>&amp;&amp;</code>&nbsp;and&nbsp;<code>||</code>&nbsp;don't support&nbsp;<code>bool?</code>&nbsp;operands.</p>\n<h2 id=\"compound-assignment\">Compound assignment&lt;</h2>\n<p>For a binary operator&nbsp;<code>op</code>, a compound assignment expression of the form</p>\n<div id=\"code-try-7\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>"
    },
    {
        "page_index": 70,
        "chunk_index": 66,
        "text": "<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"x op= y\n\">x op= y\n</code></pre>\n<p>is equivalent to</p>\n<div id=\"code-try-8\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-author-content=\"x = x op y\n\">x = x op y\n</code></pre>\n<p>except that&nbsp;<code>x</code>&nbsp;is only evaluated once.</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 67,
        "text": "<p>The&nbsp;<code>&amp;</code>,&nbsp;<code>|</code>, and&nbsp;<code>^</code>&nbsp;operators support compound assignment, as the following example shows:</p>\n<div id=\"code-try-9\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"bool test = true;\ntest &amp;= false;\nConsole.WriteLine(test);  // output: False"
    },
    {
        "page_index": 70,
        "chunk_index": 68,
        "text": "test |= true;\nConsole.WriteLine(test);  // output: True\n\ntest ^= false;\nConsole.WriteLine(test);  // output: True\n\"><span class=\"hljs-keyword\">bool</span> test = <span class=\"hljs-literal\">true</span>;\ntest &amp;= <span class=\"hljs-literal\">false</span>;\nConsole.WriteLine(test);  <span class=\"hljs-comment\">// output: False</span>\n\ntest |= <span class=\"hljs-literal\">true</span>;\nConsole.WriteLine(test);  <span class=\"hljs-comment\">// output: True</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 69,
        "text": "test ^= <span class=\"hljs-literal\">false</span>;\nConsole.WriteLine(test);  <span class=\"hljs-comment\">// output: True</span>\n</code></pre>\n<p>The conditional logical operators&nbsp;<code>&amp;&amp;</code>&nbsp;and&nbsp;<code>||</code>&nbsp;don't support compound assignment.</p>\n<h2 id=\"operator-precedence\">Operator precedence</h2>\n<p>The following list orders logical operators starting from the highest precedence to the lowest:</p>\n<ul>\n<li>Logical negation operator&nbsp;<code>!</code></li>"
    },
    {
        "page_index": 70,
        "chunk_index": 70,
        "text": "<li>Logical AND operator&nbsp;<code>&amp;</code></li>\n<li>Logical exclusive OR operator&nbsp;<code>^</code></li>\n<li>Logical OR operator&nbsp;<code>|</code></li>\n<li>Conditional logical AND operator&nbsp;<code>&amp;&amp;</code></li>\n<li>Conditional logical OR operator&nbsp;<code>||</code></li>\n</ul>\n<p>Use parentheses,&nbsp;<code>()</code>, to change the order of evaluation imposed by operator precedence:</p>"
    },
    {
        "page_index": 70,
        "chunk_index": 71,
        "text": "<div id=\"code-try-10\" class=\"codeHeader\" data-bi-name=\"code-header\"><span class=\"language\">C#</span></div>\n<pre class=\"has-inner-focus\"><code class=\"lang-csharp\" data-interactive=\"csharp\" data-author-content=\"Console.WriteLine(true | true &amp; false);   // output: True\nConsole.WriteLine((true | true) &amp; false); // output: False"
    },
    {
        "page_index": 70,
        "chunk_index": 72,
        "text": "bool Operand(string name, bool value)\n{\n    Console.WriteLine($&quot;Operand {name} is evaluated.&quot;);\n    return value;\n}\n\nvar byDefaultPrecedence = Operand(&quot;A&quot;, true) || Operand(&quot;B&quot;, true) &amp;&amp; Operand(&quot;C&quot;, false);\nConsole.WriteLine(byDefaultPrecedence);\n// Output:\n// Operand A is evaluated.\n// True"
    },
    {
        "page_index": 70,
        "chunk_index": 73,
        "text": "var changedOrder = (Operand(&quot;A&quot;, true) || Operand(&quot;B&quot;, true)) &amp;&amp; Operand(&quot;C&quot;, false);\nConsole.WriteLine(changedOrder);\n// Output:\n// Operand A is evaluated.\n// Operand C is evaluated.\n// False\n\">Console.WriteLine(<span class=\"hljs-literal\">true</span> | <span class=\"hljs-literal\">true</span> &amp; <span class=\"hljs-literal\">false</span>);   <span class=\"hljs-comment\">// output: True</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 74,
        "text": "Console.WriteLine((<span class=\"hljs-literal\">true</span> | <span class=\"hljs-literal\">true</span>) &amp; <span class=\"hljs-literal\">false</span>); <span class=\"hljs-comment\">// output: False</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 75,
        "text": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">Operand</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> name, <span class=\"hljs-keyword\">bool</span> <span class=\"hljs-keyword\">value</span></span>)</span>\n{\n    Console.WriteLine(<span class=\"hljs-string\">$\"Operand <span class=\"hljs-subst\">{name}</span> is evaluated.\"</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">value</span>;\n}"
    },
    {
        "page_index": 70,
        "chunk_index": 76,
        "text": "<span class=\"hljs-keyword\">var</span> byDefaultPrecedence = Operand(<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">true</span>) || Operand(<span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-literal\">true</span>) &amp;&amp; Operand(<span class=\"hljs-string\">\"C\"</span>, <span class=\"hljs-literal\">false</span>);\nConsole.WriteLine(byDefaultPrecedence);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Operand A is evaluated.</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 77,
        "text": "<span class=\"hljs-comment\">// True</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 78,
        "text": "<span class=\"hljs-keyword\">var</span> changedOrder = (Operand(<span class=\"hljs-string\">\"A\"</span>, <span class=\"hljs-literal\">true</span>) || Operand(<span class=\"hljs-string\">\"B\"</span>, <span class=\"hljs-literal\">true</span>)) &amp;&amp; Operand(<span class=\"hljs-string\">\"C\"</span>, <span class=\"hljs-literal\">false</span>);\nConsole.WriteLine(changedOrder);\n<span class=\"hljs-comment\">// Output:</span>\n<span class=\"hljs-comment\">// Operand A is evaluated.</span>"
    },
    {
        "page_index": 70,
        "chunk_index": 79,
        "text": "<span class=\"hljs-comment\">// Operand C is evaluated.</span>\n<span class=\"hljs-comment\">// False</span>\n</code></pre>"
    },
    {
        "page_index": 70,
        "chunk_index": 80,
        "text": "</code></pre>\n<p>For the complete list of C# operators ordered by precedence level, see the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/#operator-precedence\" data-linktype=\"relative-path\">Operator precedence</a>&nbsp;section of the&nbsp;<a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/\" data-linktype=\"relative-path\">C# operators</a>&nbsp;article.</p>"
    },
    {
        "page_index": 71,
        "chunk_index": 0,
        "text": "<p><i class=\"icon-note\"></i>&nbsp;<strong>Lecture Slides</strong>: <a class=\"instructure_file_link instructure_scribd_file\" title=\"FirstWPF.pdf\" href=\"https://umsystem.instructure.com/courses/296958/files/32026322/download?verifier=B4u9k1OX1qgAY6kFNRYFxWsa6UkauLlMG5VFwvom&amp;wrap=1\" data-api-endpoint=\"https://umsystem.instructure.com/api/v1/courses/296958/files/32026322\" data-api-returntype=\"File\">FirstWPF.pdf</a></p>\n<p><i class=\"icon-video\"></i>&nbsp;<strong>Video Lectures</strong>:&nbsp;</p>\n<p><iframe src=\"https://www.youtube.com/embed/Tm_q5Dzos8I\" width=\"640\" height=\"480\" allowfullscreen=\"allowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\"></iframe></p>\n<p><i class=\"icon-like\"></i><strong>Recommended Online Resources:</strong></p>\n<p>&nbsp;1. WinUI 3 app, WPF, UWP, Windows Forms, or Cross-platform options: <a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/windows/apps/get-started/?tabs=rnw%2Cuwp\" target=\"_blank\">Get started with Windows: Selecting a development technology</a></p>\n<p>2. Channel 9 - <i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Creating-Your-First-C-Program\"> Creating Your First C# Program</a>&nbsp;</i></p>\n<p>3. Channel 9 - <i class=\"icon-video\"><a href=\"https://channel9.msdn.com/Series/CSharp-Fundamentals-for-Absolute-Beginners/Understanding-Your-First-C-Program\"> Understanding Your First C# Program</a></i></p>"
    },
    {
        "page_index": 72,
        "chunk_index": 0,
        "text": "<h1 id=\"tutorial-create-a-simple-c-console-app-in-visual-studio-part-1-of-2\"><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-console?view=vs-2022\" target=\"_blank\"><span style=\"font-size: 14pt;\">Tutorial: Create a simple C# console app in Visual Studio</span></a></h1>"
    },
    {
        "page_index": 73,
        "chunk_index": 0,
        "text": "<h3 class=\"LC20lb MBeuO DKV0Md\"><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/overview/?view=netdesktop-6.0\" target=\"_blank\"><span style=\"font-size: 14pt;\">What is Windows Presentation Foundation - WPF .NET</span></a></h3>\n<h1 id=\"tutorial-create-a-new-wpf-app-with-net\"><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/dotnet/desktop/wpf/get-started/create-app-visual-studio?view=netdesktop-6.0\" target=\"_blank\"><span style=\"font-size: 14pt;\">Tutorial: Create a new WPF app with .NET</span></a></h1>"
    },
    {
        "page_index": 74,
        "chunk_index": 0,
        "text": "<h1><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide\" target=\"_blank\"><span style=\"font-size: 14pt;\">What's a Universal Windows Platform (UWP) app?</span></a></h1>\n<h1 id=\"tutorial-create-your-first-universal-windows-platform-application-in-visual-studio-with-xaml-and-c\"><a href=\"https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-uwp?view=vs-2022\"><span style=\"font-size: 14pt;\">Tutorial: Create your first Universal Windows Platform application in Visual Studio with XAML and C#</span></a></h1>\n<p>&nbsp;</p>"
    },
    {
        "page_index": 75,
        "chunk_index": 0,
        "text": "<h1 class=\"gh-header-title flex-auto wb-break-word f1 mr-0\"><a class=\"inline_disabled\" href=\"https://github.com/microsoft/WindowsAppSDK/discussions/1615\" target=\"_blank\"><span class=\"js-issue-title markdown-title\" style=\"font-size: 14pt;\">Developing for Windows with the Windows App SDK</span></a></h1>\n<p><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/windows/apps/winui/winui3/create-your-first-winui3-app\" target=\"_blank\"><span class=\"js-issue-title markdown-title\" style=\"font-size: 14pt;\">Create your first WinUI 3 (Windows App SDK) project</span></a></p>\n<p><a class=\"inline_disabled\" href=\"https://learn.microsoft.com/en-us/windows/apps/get-started/simple-photo-viewer-winui3\" target=\"_blank\"><span class=\"js-issue-title markdown-title\" style=\"font-size: 14pt;\">Tutorial: Create a simple photo viewer with WinUI 3 (C#)</span></a></p>"
    }
]